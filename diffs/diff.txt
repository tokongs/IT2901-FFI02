diff --git a/.dockerignore b/.dockerignore
deleted file mode 100644
index 7bedcfe..0000000
--- a/.dockerignore
+++ /dev/null
@@ -1,9 +0,0 @@
-build/
-.idea/
-.gradle/
-.github/
-.gitignore
-.gitmodules
-.gitattributes
-*.md
-LICENSE
\ No newline at end of file
diff --git a/.github/workflows/broker.yml b/.github/workflows/broker.yml
deleted file mode 100644
index fba9235..0000000
--- a/.github/workflows/broker.yml
+++ /dev/null
@@ -1,77 +0,0 @@
-name: Broker CI
-on:
-  pull_request:
-    branches: [ main ]
-  push: 
-    branches: [ main ]
-
-jobs:
-  check:
-    name: Check code for bugs and run tests
-    runs-on: ubuntu-latest
-    defaults:
-      run:
-        working-directory: broker
-
-    steps:
-    - uses: actions/checkout@v2
-    - name: Set up JDK 11
-      uses: actions/setup-java@v1
-      with:
-        java-version: 11
-    - name: Grant execute permission for gradlew
-      run: chmod +x gradlew
-    - name: Check tests and spot bugs
-      run: ./gradlew check
-  build:
-    name: Build the broker
-    runs-on: ubuntu-latest
-    defaults:
-      run:
-        working-directory: broker
-    steps:
-    - uses: actions/checkout@v2
-    - name: Set up JDK 11
-      uses: actions/setup-java@v1
-      with:
-        java-version: 11
-    - name: Grant execute permission for gradlew
-      run: chmod +x gradlew
-    - name: Build project
-      run: ./gradlew build
-  build-docker:
-    name: Build docker image
-    runs-on: ubuntu-latest
-    needs: [check, build]
-    steps:
-      - uses: actions/checkout@v2
-      - name: Set up QEMU
-        uses: docker/setup-qemu-action@v1
-      - name: Set up Docker Buildx
-        uses: docker/setup-buildx-action@v1
-      - name: Login to DockerHub
-        uses: docker/login-action@v1 
-        with:
-          username: ${{ secrets.DOCKERHUB_USERNAME }}
-          password: ${{ secrets.DOCKERHUB_TOKEN }}
-      - name: Build and push
-        id: docker_build
-        uses: docker/build-push-action@v2
-        with:
-          context: broker
-          push: ${{ github.ref == 'refs/heads/main' && github.event_name == 'push' }}
-          tags: tokongs/ffi02-broker:latest
-          file: broker/docker/Dockerfile
-  deploy:
-    name: Deploy docker image to server
-    runs-on: ubuntu-latest
-    needs: build-docker
-    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
-    steps:
-      - name: Run deployment script on server via SSH
-        uses: garygrossgarten/github-action-ssh@release
-        with:
-          command: ./deploy.sh
-          host: ${{ secrets.SSH_HOST }}
-          username: ${{ secrets.SSH_USERNAME }}
-          privateKey: ${{ secrets.SSH_PRIVATE_KEY}}
diff --git a/.github/workflows/client.yml b/.github/workflows/client.yml
deleted file mode 100644
index 6e819e2..0000000
--- a/.github/workflows/client.yml
+++ /dev/null
@@ -1,40 +0,0 @@
-name: Client CI
-on:
-  pull_request:
-    branches: [ main ]
-  push: 
-    branches: [ main ]
-
-jobs:
-  check:
-    name: Check code for bugs and run tests
-    runs-on: ubuntu-latest
-    defaults:
-      run:
-        working-directory: client
-    steps:
-    - uses: actions/checkout@v2
-    - name: Set up JDK 11
-      uses: actions/setup-java@v1
-      with:
-        java-version: 11
-    - name: Grant execute permission for gradlew
-      run: chmod +x gradlew
-    - name: Check tests and spot bugs
-      run: ./gradlew check
-  build:
-    name: Build the client
-    runs-on: ubuntu-latest
-    defaults:
-      run:
-        working-directory: client
-    steps:
-    - uses: actions/checkout@v2
-    - name: Set up JDK 11
-      uses: actions/setup-java@v1
-      with:
-        java-version: 11
-    - name: Grant execute permission for gradlew
-      run: chmod +x gradlew
-    - name: Build project
-      run: ./gradlew build
diff --git a/.github/workflows/test-app.yml b/.github/workflows/test-app.yml
deleted file mode 100644
index d7d9bf6..0000000
--- a/.github/workflows/test-app.yml
+++ /dev/null
@@ -1,54 +0,0 @@
-name: Test app CI
-on:
-  pull_request:
-    branches: [ main ]
-  push:
-    branches: [ main ]
-
-jobs:
-  build:
-    name: Build the test app
-    runs-on: ubuntu-latest
-    steps:
-      - uses: actions/checkout@v2
-      - name: Set up JDK 11
-        uses: actions/setup-java@v1
-        with:
-          java-version: 11
-      - name: Grant execute permission for gradlew
-        run: chmod +x gradlew
-      - name: Build project
-        run: ./gradlew test-app:build
-  build-docker:
-    name: Build docker image
-    runs-on: ubuntu-latest
-    needs: [build]
-    steps:
-      - uses: actions/checkout@v2
-      - name: Set up QEMU
-        uses: docker/setup-qemu-action@v1
-      - name: Set up Docker Buildx
-        uses: docker/setup-buildx-action@v1
-      - name: Login to DockerHub
-        uses: docker/login-action@v1
-        with:
-          username: ${{ secrets.DOCKERHUB_USERNAME }}
-          password: ${{ secrets.DOCKERHUB_TOKEN }}
-      - name: Docker meta
-        id: meta
-        uses: crazy-max/ghaction-docker-meta@v2
-        with:
-          images: docker.io/tokongs/ffi02-test-app
-          tags: |
-            type=sha
-          flavor: |
-            latest=true
-      - name: Build and push
-        id: docker_build
-        uses: docker/build-push-action@v2
-        with:
-          push: ${{ github.ref == 'refs/heads/main' && github.event_name == 'push' }}
-          context: .
-          file: Dockerfile.test-app
-          tags: ${{ steps.meta.outputs.tags }}
-          labels: ${{ steps.meta.outputs.labels }}
diff --git a/.gitignore b/.gitignore
deleted file mode 100644
index 6605872..0000000
--- a/.gitignore
+++ /dev/null
@@ -1,73 +0,0 @@
-# IDEA Ignores #
-################
-*.iml
-*.ipr
-*.iws
-.idea/
-out/
-local.properties
-
-# VS Code Ignores #
-.vscode
-
-# Generic Android ignores #
-###########################
-bin/
-target
-gen/
-
-# Compiled source #
-###################
-*.com
-*.class
-*.dll
-*.exe
-*.o
-*.so
-
-
-# local data #
-broker/src/packaging/data/
-
-# Packages #
-############
-*.7z
-*.dmg
-*.gz
-*.iso
-*.rar
-*.tar
-*.zip
-
-# Logs and databases #
-######################
-log/
-*.log
-*.sql
-*.sqlite
-
-# OS generated files #
-######################
-.DS_Store
-.DS_Store?
-ehthumbs.db
-Icon?
-Thumbs.db
-
-# VCS #
-#######
-.svn
-.svn/
-CVS
-
-# XCode 4 #
-###########
-*.xcuserstate
-*.pbxuser
-*.mode1v3
-*.mode2v3
-*.perspectivev3
-xcuserdata/
-
-.gradle
-build/
diff --git a/.gitmodules b/.gitmodules
deleted file mode 100644
index 21266c8..0000000
--- a/.gitmodules
+++ /dev/null
@@ -1,3 +0,0 @@
-[submodule "hivemq-extension-sdk"]
-	path = hivemq-extension-sdk
-	url = https://github.com/hivemq/hivemq-extension-sdk
diff --git a/Dockerfile.test-app b/Dockerfile.test-app
deleted file mode 100644
index 98107b6..0000000
--- a/Dockerfile.test-app
+++ /dev/null
@@ -1,18 +0,0 @@
-FROM gradle:6.7 as builder
-WORKDIR /tmp
-
-COPY gradle/ gradle/
-COPY gradlew .
-COPY settings.gradle.kts .
-COPY gradle.properties .
-COPY client/ client/
-COPY test-app/ test-app/
-
-
-RUN gradle test-app:installDist
-
-FROM openjdk:15-alpine
-WORKDIR /etc/test-app
-COPY --from=builder /tmp/test-app/build/install/test-app .
-
-ENTRYPOINT ["./bin/test-app"]
\ No newline at end of file
diff --git a/README.md b/README.md
index cd50b31..da04f41 100644
--- a/README.md
+++ b/README.md
@@ -1,16 +1,3 @@
 # IT2901-FFI02
 
-This repository contains the code base for three seperate projects. 
-* An MQTT broker 
-* An MQTT client library 
-* A CLI application for testing puposes
-
-The broker and client library are written in Java and based on [HiveMQ Community Edition](https://github.com/hivemq/hivemq-community-edition) and [HiveMQ MQTT Client](https://github.com/hivemq/hivemq-mqtt-client) respsectively. The CLI application is written in Kotlin and relies heavily on the CLI library [Clikt](https://ajalt.github.io/clikt/).
-
-A [user manual](https://github.com/tokongs/IT2901-FFI02/wiki/User-manual) and [developer guide](https://github.com/tokongs/IT2901-FFI02/wiki/Developer-guide) can be found in the project [wiki](https://github.com/tokongs/IT2901-FFI02/wiki).
-
-## Quick start
-
-The quickest way to get the projects up and running is to run the docker images. For this you'll need to have docker installed. The user manual explains how you would spin up the docker containers. 
-
-The above assumes you don't want to modify the code base. If you want to run and modify the projects locally just clone the repo and use gradle to start the project. JDK 11 or above is a requirement for this to work. You do not need to have gradle installed as gradle is packaged with the source code. 
+Iver was here!
diff --git a/broker/.gitignore b/broker/.gitignore
index e5359d8..a5b3e62 100644
--- a/broker/.gitignore
+++ b/broker/.gitignore
@@ -12,7 +12,3 @@ out/
 
 .java-version
 .DS_Store
-
-.project
-.classpath
-.settings/org.eclipse.buildship.core.prefs
\ No newline at end of file
diff --git a/broker/.idea/runConfigurations/HiveMQServer.xml b/broker/.idea/runConfigurations/HiveMQServer.xml
index 3d180ba..b51d73f 100644
--- a/broker/.idea/runConfigurations/HiveMQServer.xml
+++ b/broker/.idea/runConfigurations/HiveMQServer.xml
@@ -1,14 +1,8 @@
 <component name="ProjectRunConfigurationManager">
   <configuration default="false" name="HiveMQServer" type="Application" factoryName="Application" nameIsGenerated="true">
-    <envs>
-      <env name="HIVEMQ_HOME" value="src/packaging" />
-    </envs>
-    <option name="ALTERNATIVE_JRE_PATH" value="C:\Program Files\Java\jdk-11.0.10" />
-    <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="true" />
     <option name="MAIN_CLASS_NAME" value="com.hivemq.HiveMQServer" />
     <module name="hivemq-community-edition.main" />
     <option name="VM_PARAMETERS" value="-Djava.net.preferIPv4Stack=true -Dhivemq.home=${HOME}/hivemq4home -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=9010 -Dcom.sun.management.jmxremote.local.only=false -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -noverify --add-opens java.base/java.lang=ALL-UNNAMED --add-opens java.base/java.nio=ALL-UNNAMED --add-opens java.base/sun.nio.ch=ALL-UNNAMED --add-opens jdk.management/com.sun.management.internal=ALL-UNNAMED --add-exports java.base/jdk.internal.misc=ALL-UNNAMED" />
-    <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$/src/packaging" />
     <extension name="coverage">
       <pattern>
         <option name="PATTERN" value="com.hivemq.*" />
diff --git a/broker/.travis.yml b/broker/.travis.yml
new file mode 100644
index 0000000..d1e6413
--- /dev/null
+++ b/broker/.travis.yml
@@ -0,0 +1,51 @@
+language: java
+
+dist: xenial
+
+jdk:
+  - openjdk11
+
+before_install:
+  - BRANCH=$(if [ "$TRAVIS_PULL_REQUEST" == "false" ]; then echo $TRAVIS_BRANCH; else echo $TRAVIS_PULL_REQUEST_BRANCH; fi)
+  - git clone https://github.com/hivemq/hivemq-extension-sdk.git ../hivemq-extension-sdk
+  - cd ../hivemq-extension-sdk
+  - git checkout $BRANCH || true
+  - cd ../hivemq-community-edition
+
+stages:
+  - test
+  - name: docker
+    if: ((branch = master) || (tag IS present)) && (type != pull_request)
+  - name: release
+    if: (tag IS present) && (type != pull_request)
+
+jobs:
+  include:
+    - stage: test
+      install: skip
+      script: ./gradlew test license forbiddenApis javadoc packaging
+    - stage: docker
+      install: skip
+      script: PUSH_IMAGE=true docker/build.sh
+    - stage: release
+      install: skip
+      script: ./gradlew packaging bintrayUpload
+      deploy:
+        provider: releases
+        token:
+          secure: "C9pHI53AodsU/jJDYurCn1gENWJTTuo62MrfFSEA68MylXywuIYaO3AZtQAscFCDSfHWeSdanIfB/TpnpIc1Y/lj7hXdSI1eid1xtbbSXkAQCMj4zjUBmZiPO415Ic+VSNETCP0NPDCkmJckolKBdUWhM7zAO+8N4SCs0Qz4N/Iy3QgFaHU0/QfXgnW4v8OS/7Or59etMyDklbqwR250tAOlkmx6ywzDo0BMMfo2pBu8HfZSEG+E07Sr7QJUwXQ+1pCReCga+2bW2+qRYwU6gzPGktg+g+fS0b9tLJUUi1hp7MEEHG4pdajINdGi1PklucBbnBNeCJyIZgfgBwbaBUiceAJkWxGEm3eZy6ueAFPhaEXcZH9hdncRHNX9UFy+PLLA03HA1icLIW8fESdr1keuHKDFSIWvxU9UcnSzHAVXTGKzeuOsDjP/YSy/RSSPlVCiqQjKB5Ld1D8IKytUs0h3Vg+T60G+6hhOxREg5XRAH+jC/o7Ojh1v2fQ8Ty1mFMRBxYTAjdRQgocvJ+FIToH2tx/f5Fp+Ij73CO0RC+L87QgpOwvxQ6pqEjrnEDw8/MpChxugsIHW7OJO2yCKgiTr0FBxsaWZbvLVoJV4uXjjbQuceeh6I/xwn78jrP07r0D5o8E380g6OYMhEne0qo8Fw6J6NT3MMPMPdFaCOYE="
+        file: "build/zip/hivemq-*.zip"
+        file_glob: true
+        skip_cleanup: true
+        draft: false
+        on:
+          tags: true
+
+before_cache:
+  - rm -f  $HOME/.gradle/caches/modules-2/modules-2.lock
+  - rm -fr $HOME/.gradle/caches/*/plugin-resolution/
+
+cache:
+  directories:
+    - $HOME/.gradle/caches/
+    - $HOME/.gradle/wrapper/
diff --git a/broker/CODE_OF_CONDUCT.md b/broker/CODE_OF_CONDUCT.md
new file mode 100644
index 0000000..0c00ec2
--- /dev/null
+++ b/broker/CODE_OF_CONDUCT.md
@@ -0,0 +1,3 @@
+# HiveMQ Code of Conduct
+
+Please refer to our [HiveMQ Code of Conduct](https://github.com/hivemq/hivemq-community/blob/master/code-of-conduct.md).
diff --git a/broker/CONTRIBUTING.adoc b/broker/CONTRIBUTING.adoc
new file mode 100644
index 0000000..b605cfe
--- /dev/null
+++ b/broker/CONTRIBUTING.adoc
@@ -0,0 +1,167 @@
+= HiveMQ Community Edition Contributing Guidelines
+
+== Introduction
+
+Anyone is welcome to participate and contribute to the HiveMQ open source community.
+We encourage people to use the https://github.com/hivemq/hivemq-community-edition/issues[Github issue tracker] and create pull requests.
+The scope of the HiveMQ CE is to provide
+
+. a high-quality implementation of the MQTT broker specification, and
+. the extension framework enabling the integration of HiveMQ CE into other applications.
+
+Therefore, we ask that contributions are focused on improving the current implementation and project scope.
+
+We will not accept contributions that would add features that expand the scope of the project.
+It is HiveMQ’s intention to offer commercial products that will add features suited for enterprise deployments of HiveMQ, such as clustering, monitoring tools, enterprise security, technical support, and more.
+We also expect that other companies and open source projects will create extensions of HiveMQ CE to suit their specific customer requirements.
+If you would like to suggest a new feature, please contact the project team (support@hivemq.com) to discuss if it fits within the project scope.
+If you wish to contribute, we will preferibly accept Bug Fixes, Typos, Documentation, JavaDoc and Logging.
+
+== Licensing
+
+HiveMQ CE is released under the Apache 2.0 license to allow you the use of the software as you please.
+By contributing your code, you agree to license your contribution under the terms of the Apache License, Version 2.0.
+
+Please fill out our Contributor License Agreement (CLA), otherwise we cannot accept your contribution.
+
+All files must contain the license header from the link:HEADER[header file].
+
+== Contributor License Agreement
+
+If you wish to contribute to the HiveMQ CE, please download, fill out and sign the https://www.hivemq.com/downloads/Contributor_License_Agreement.pdf[Contributor License Agreement].
+Send the signed agreement to (contributing@hivemq.com) with the subject `CLA for Project: HiveMQ Community Edition`.
+Please read this document carefully before signing it and keep a copy for your own records.
+Once we've received your signed CLA, you will be added to the list of contributors and our HiveMQ Development Team will review your contributions.
+
+In case the rights to all intellectual property created by you are maintained by your employer, including your work on HiveMQ CE, you must ensure you have retained all rights to grant the license, or that your employer has agreed to a separate https://www.hivemq.com/downloads/Corporate_Contributor_License_Agreement.pdf[Corporate CLA].
+
+== Contribution Guidelines
+
+=== Issues
+==== Bug Fixes and Minor Features
+
+Please always open an issue in the issue tracker before sending a pull request and wait until someone from the HiveMQ Development Team approves it, before you start working on it.
+This prevents you from working on issues that we will ultimately not accept.
+When you start working on an approved issue, please make it known in the comments that you are going to work on it, so a simulteaneous contribution by someone else can be avoided.
+
+After you committed, your contribution will be reviewed by the HiveMQ Development Team.
+We reserve the right to release only reviewed and approved implementations.
+
+==== Security Issues
+
+Please do not report any security issue to the public issue tracker. Please send security issues to security@hivemq.com.
+
+==== Questions
+
+Please refer all your questions about the HiveMQ CE to the https://community.hivemq.com[HiveMQ Community Forum].
+
+Issues consisting of questions or suggestions will be closed immediately.
+
+=== Checking out the Project
+
+We recommend that you use the https://www.jetbrains.com/idea/download/[IntelliJ] IDE for all development on HiveMQ CE.
+It will automate your process as much as possible.
+Java version 11 is required to build and run HiveMQ CE (we recommend OpenJDK 11).
+You can check your installed Java version by entering `java -version` on the command line.
+
+First you need to https://help.github.com/en/articles/fork-a-repo[fork] the HiveMQ Community Edition https://github.com/hivemq/hivemq-community-edition[repository].
+
+Then you can clone the repository:
+
+[source,bash]
+----
+git clone https://github.com/<your user name>/hivemq-community-edition.git
+----
+
+*Open* the HiveMQ CE project folder in IntelliJ.
+Choose to sync the gradle project, if so prompted by the IDE.
+After setting the gradle and project SDK (Java 11), you are good to go.
+
+=== Checking out the HiveMQ Extension SDK
+
+HiveMQ CE uses the HiveMQ Extension SDK which resides in https://github.com/hivemq/hivemq-extension-sdk[its own repository].
+By default, you can not use the latest changes of or modify the Extension SDK.
+Please checkout the `hivemq-extension-sdk` repository next to the `hivemq-community-edition` repository.
+Gradle and IntelliJ will then automatically wire the two projects.
+
+If you only want to use the Extension SDK, execute the following command from the `hivemq-community-edition` project directory:
+
+`git clone https://github.com/hivemq/hivemq-extension-sdk.git ../hivemq-extension-sdk`
+
+If you also want to make changes to the Extension SDK, please fork the `hivemq-extension-sdk` repository and clone your fork:
+
+`git clone https://github.com/<your user name>/hivemq-extension-sdk.git ../hivemq-extension-sdk`
+
+=== Branching Model
+
+A modified version of https://nvie.com/posts/a-successful-git-branching-model/[git-flow] is used for the structuring of the HiveMQ CE repository.
+
+All branches must start with an issue type tag, usually `bugfix` or `improvement`, followed by a slash `/` and a __speaking name__ describing the code change e.g. `bugfix/locking-for-concurrent-access-in-some-class` or `improvement/better-javadoc-in-some-interface`.
+The pull requests must be opened against the `master` branch.
+
+=== Code Style Guidelines
+
+Only code following _good_ Java practices, like using the appropriate keywords and visibility, will be accepted.
+
+HiveMQ CE uses nullability annotations, these should be used to annotate the declared types of variables and fields, whose initialization status can be in question.
+
+.Nullability example
+[source,java]
+----
+class SomeClass {
+
+    // this must never be null, the accessor can depend on it
+    private @NotNull SomeType myField;
+
+    // this may be null, the accessor must check
+    private @Nullable SomeType anotherField;
+
+}
+----
+
+The following annotations are provided for this purpose:
+
+.@Nullable
+----
+com.hivemq.extension.sdk.api.annotations.NotNull
+com.hivemq.extension.sdk.api.annotations.Nullable
+----
+
+=== Commit Guidelines
+
+You can set up IntelliJ to recognise these annotations under `Preferences > Inspections > @NotNull/@Nullable problems > Configure annotations`.
+
+Please watch out for this inspection and check the _Reformat code_, _Optimize imports_ and _Perform code analysis_ checkboxes in the commit dialogue.
+
+=== Testing
+
+The HiveMQ CE project only accepts pull requests that contain unit tests and have sufficient unit test coverage.
+
+=== Pull Requests
+
+As soon as your code is ready for a https://help.github.com/en/articles/creating-a-pull-request[pull request], please link the specific issue that you want to resolve.
+Once the continuous integration is successful and at least one member of the HiveMQ Development Team has approved the changes, you will be asked to rebase and squash before the pull request can be merged.
+
+We greatly appreciate your involvement and contribution.
+
+== Important gradle tasks
+
+To make it easier to develop HiveMQ CE and HiveMQ Extensions, we have provided some `gradle` tasks to help you get started quickly.
+
+.Build the complete HiveMQ CE zip file
+[source,gradle]
+----
+./gradlew packaging
+----
+
+.Perform all unit tests
+[source,gradle]
+----
+./gradlew check
+----
+
+.Publish the Extension SDK to your local maven repository
+[source,gradle]
+----
+./gradlew publishToMavenLocal
+----
diff --git a/broker/README.adoc b/broker/README.adoc
new file mode 100644
index 0000000..d5d87be
--- /dev/null
+++ b/broker/README.adoc
@@ -0,0 +1,379 @@
+++++
+<p align="center">
+  <img src="https://www.hivemq.com/img/svg/hivemq-ce.svg" width="500">
+</p>
+++++
+
+= HiveMQ Community Edition
+
+image:https://maven-badges.herokuapp.com/maven-central/com.hivemq/hivemq-community-edition-embedded/badge.svg["Maven Central",link="https://maven-badges.herokuapp.com/maven-central/com.hivemq/hivemq-community-edition-embedded"]
+image:https://jitpack.io/v/hivemq/hivemq-community-edition.svg["JitPack", link="https://jitpack.io/#hivemq/hivemq-community-edition"]
+image:https://javadoc.io/badge2/com.hivemq/hivemq-community-edition-embedded/javadoc.svg["javadoc", link=https://javadoc.io/doc/com.hivemq/hivemq-community-edition-embedded]
+image:https://travis-ci.com/hivemq/hivemq-community-edition.svg?token=2JEoSXzFpviQH47MBPSm&branch=master["Build Status",link="https://travis-ci.com/hivemq/hivemq-community-edition"]
+
+HiveMQ CE is a Java-based open source MQTT broker that fully supports MQTT 3.x and MQTT 5.
+
+HiveMQ CE is the foundation of the HiveMQ enterprise-connectivity and messaging platform and implements all MQTT features.
+This project is the technical core of many large MQTT deployments and is now available as open source software under the Apache 2 license.
+
+* Web Site: https://www.hivemq.com/
+* Documentation: https://github.com/hivemq/hivemq-community-edition/wiki
+* Community Forum: https://community.hivemq.com/
+* Contribution Guidelines: link:CONTRIBUTING.adoc[Contributing.adoc]
+* License: The source files in this repository are made available under the link:LICENSE[Apache License Version 2.0].
+
+== Features
+
+* All MQTT 3.1, 3.1.1 and MQTT 5.0 features
+* MQTT over TCP, TLS, WebSocket and Secure WebSocket transport
+* Java Extension SDK for:
+** Authentication
+** Authorization
+** Client Initializers
+** MQTT Packet Interceptors
+** Interacting with Publishes, Retained Messages, Clients and Subscriptions
+* Running on Windows, Linux and MacOS (Linux is recommended)
+* Embedded Mode
+
+HiveMQ CE is compatible with all MQTT 3 and MQTT 5 clients, including Eclipse Paho and https://github.com/hivemq/hivemq-mqtt-client[HiveMQ MQTT Client].
+
+== Documentation
+
+The documentation for the HiveMQ CE can be found https://github.com/hivemq/hivemq-community-edition/wiki[here].
+
+MQTT Resources
+
+* https://www.hivemq.com/mqtt-essentials/[MQTT Essentials]
+* https://www.hivemq.com/mqtt-5/[MQTT 5 Essentials]
+
+== HiveMQ Community Forum
+
+The ideal place for questions or discussions about the HiveMQ Community Edition is our brand new https://community.hivemq.com/[HiveMQ Community Forum].
+
+== How to Use
+
+=== Quick Start
+
+* Download the latest https://github.com/hivemq/hivemq-community-edition/releases/download/2020.2/hivemq-ce-2020.2.zip[HiveMQ CE binary package].
+* Unzip the package.
+* Run the run.sh (Linux/OSX) or run.bat (Windows) in the bin folder of the package.
+
+[source,bash]
+----
+cd hivemq-ce-<version>
+./bin/run.sh
+----
+
+You can now connect MQTT clients to `<ip address>:1883`.
+
+[CAUTION]
+If you want to connect devices on external networks to HiveMQ CE, please make sure your server is reachable from those networks and the required ports (default: 1883) are accessible through your firewall.
+
+=== Just in Time Builds
+
+Just in time builds for current branches on this repository and for specific commits are available https://hivemq.github.io/nightly-builds/[here].
+
+=== Run with Docker
+
+All releases as well as the current state of the `master` branch are available in the https://hub.docker.com/r/hivemq/hivemq-ce[hivemq/hivemq-ce] repository on DockerHub.
+To execute this image, simply run the following command:
+
+[source,bash]
+----
+docker run --name hivemq-ce -d -p 1883:1883 hivemq/hivemq-ce
+----
+
+To change the default log level you can set the environment variable `HIVEMQ_LOG_LEVEL` when running the container:
+
+[source,bash]
+----
+docker run --name hivemq-ce -e HIVEMQ_LOG_LEVEL=INFO -d -p 1883:1883 hivemq/hivemq-ce
+----
+
+=== Building from Source
+
+==== Prerequisites
+
+At least Java version 11 is required to build and run HiveMQ CE.
+
+If you are in doubt, you can check the installed Java version by entering `java -version` on your command line.
+
+==== Building the Binary Package
+
+Check out the git repository and build the binary package.
+
+[source,bash]
+----
+git clone https://github.com/hivemq/hivemq-community-edition.git
+
+cd hivemq-community-edition
+
+./gradlew clean packaging
+----
+
+The package `hivemq-ce-<version>.zip` is created in the sub-folder `build/zip/`.
+
+==== Building the Docker Image
+
+Check out the git repository and build the Docker image.
+
+[source,bash]
+----
+git clone https://github.com/hivemq/hivemq-community-edition.git
+
+cd hivemq-community-edition
+
+docker/build.sh
+
+docker run hivemq/hivemq-ce
+----
+
+The Docker image `hivemq/hivemq-ce` is created locally.
+
+You can tag the image or use the `TARGET_IMAGE` environment variable to manipulate the image name.
+
+==== Start
+
+Unzip the created binary package
+
+[source,bash]
+----
+cd hivemq-ce-<version>
+
+./bin/run.sh
+----
+
+For further development instructions see the link:CONTRIBUTING.adoc[contribution guidelines].
+
+=== Embedded Mode
+
+HiveMQ Community Edition offers an embedded mode and a programmatic API for integrating with Java/Java EE software.
+
+===== Gradle
+
+If you use Gradle, include the following code in your `build.gradle` file.
+
+[source,groovy]
+----
+
+dependencies {
+    implementation 'com.hivemq:hivemq-community-edition-embedded:2020.5'
+}
+----
+
+===== Maven
+
+If you use Maven, include the following code in your `pom.xml` file.
+
+[source,xml]
+----
+<project>
+    ...
+    <dependencies>
+        <dependency>
+            <groupId>com.hivemq</groupId>
+            <artifactId>hivemq-community-edition-embedded</artifactId>
+            <version>2020.5</version>
+        </dependency>
+    </dependencies>
+    ...
+</project>
+----
+
+NOTE: You must set the compiler version to `11` or higher.
+
+==== Usage
+
+Entry into the embedded mode is done with the `com.hivemq.embedded.EmbeddedHiveMQBuilder`.
+
+[source,java]
+----
+public class Main {
+
+    public static void main(String[] args) {
+
+        final EmbeddedHiveMQBuilder embeddedHiveMQBuilder = EmbeddedHiveMQ.builder()
+            .withConfigurationFolder(Path.of("/path/to/embedded-config-folder"))
+            .withDataFolder(Path.of("/path/to/embedded-data-folder"))
+            .withExtensionsFolder(Path.of("/path/to/embedded-extensions-folder"));
+        ...
+    }
+}
+----
+
+Once built, an EmbeddedHiveMQ can be started with `start()`.
+
+[source,java]
+----
+public class Main {
+
+    public static void main(String[] args) {
+        final EmbeddedHiveMQBuilder embeddedHiveMQBuilder = EmbeddedHiveMQ.builder();
+        ...
+
+        try (final EmbeddedHiveMQ hiveMQ = embeddedHiveMQBuilder.build()) {
+            hiveMQ.start().join();
+            ...
+        } catch (final Exception ex) {
+            ex.printStackTrace();
+        }
+    }
+}
+----
+
+A running EmbeddedHiveMQ can be stopped with `stop()`.
+
+[source,java]
+----
+public class Main {
+
+    public static void main(String[] args) {
+
+        ...
+
+        try (final EmbeddedHiveMQ hiveMQ = embeddedHiveMQBuilder.build()) {
+            ...
+            hiveMQ.stop().join();
+        } catch (final Exception ex) {
+            ex.printStackTrace();
+        }
+    }
+}
+----
+
+Similar to the embedded HiveMQ an embedded extension can be built with the `com.hivemq.embedded.EmbeddedExtensionBuilder`.
+
+Then add the embedded extension to the embedded HiveMQ builder.
+
+[source,java]
+----
+public class Main {
+
+    public static void main(String[] args) {
+
+        final EmbeddedExtension embeddedExtension = EmbeddedExtension.builder()
+                .withId("embedded-ext-1")
+                .withName("Embedded Extension")
+                .withVersion("1.0.0")
+                .withPriority(0)
+                .withStartPriority(1000)
+                .withAuthor("Me")
+                .withExtensionMain(new MyEmbeddedExtensionMain())
+                .build();
+
+        final EmbeddedHiveMQBuilder builder = EmbeddedHiveMQ.builder()
+                .withConfigurationFolder(Path.of("/path/to/embedded-config-folder"))
+                .withDataFolder(Path.of("/path/to/embedded-data-folder"))
+                .withExtensionsFolder(Path.of("/path/to/embedded-extensions-folder"))
+                .withEmbeddedExtension(embeddedExtension);
+
+        try (final EmbeddedHiveMQ hiveMQ = builder.build()) {
+            hiveMQ.start().join();
+            //do something with hivemq
+        } catch (final Exception ex) {
+            ex.printStackTrace();
+        }
+    }
+
+    private static class MyEmbeddedExtensionMain implements ExtensionMain {
+
+        @Override
+        public void extensionStart(final @NotNull ExtensionStartInput extensionStartInput, final @NotNull ExtensionStartOutput extensionStartOutput) {
+            // my extension start code
+        }
+
+        @Override
+        public void extensionStop(final @NotNull ExtensionStopInput extensionStopInput, final @NotNull ExtensionStopOutput extensionStopOutput) {
+            // my extension stop code
+        }
+    }
+}
+----
+
+NOTE: An EmbeddedHiveMQ is a resource that is similar to a e.g. network connection and implements the `java.lang.AutoCloseable` interface.
+Always use ARM (_try with resources_) or ensure a call to `close()`.
+
+==== Exclusions
+
+When you deploy an application that includes EmbeddedHiveMQ, it can be useful to exclude some dependencies.
+One way to exclude dependencies is with the  link:https://maven.apache.org/plugins/maven-shade-plugin/[maven shade plugin].
+
+[source,xml]
+----
+<project>
+...
+ <build>
+        <plugins>
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-shade-plugin</artifactId>
+                <version>3.2.1</version>
+                <executions>
+                    <execution>
+                        <phase>package</phase>
+                        <goals>
+                            <goal>shade</goal>
+                        </goals>
+                        <configuration>
+                            <artifactSet>
+                                <excludes>
+                                    <!--Exclude the undesired dependencies-->
+                                    <exclude>org.rocksdb:rocksdbjni</exclude>
+                                    <exclude>ch.qos.logback:logback-classic</exclude>
+                                </excludes>
+                            </artifactSet>
+                            <filters>
+                                <filter>
+                                    <artifact>*:*</artifact>
+                                    <excludes>
+                                        <exclude>META-INF/*.SF</exclude>
+                                        <exclude>META-INF/*.DSA</exclude>
+                                        <exclude>META-INF/*.RSA</exclude>
+                                    </excludes>
+                                </filter>
+                            </filters>
+                        </configuration>
+                    </execution>
+                </executions>
+            </plugin>
+        </plugins>
+    </build>
+...
+</project>
+----
+
+===== RocksDB Exclusion
+
+To exclude the `org.rocksdb:rocksdbjni` dependency, two internal configurations must be changed before you call `start()`.
+
+[source,java]
+----
+public class Main {
+
+    public static void main(String[] args) {
+
+        ...
+
+        try (final EmbeddedHiveMQ hiveMQ = embeddedHiveMQBuilder.build()) {
+
+            InternalConfigurations.PAYLOAD_PERSISTENCE_TYPE.set(PersistenceType.FILE);
+            InternalConfigurations.RETAINED_MESSAGE_PERSISTENCE_TYPE.set(PersistenceType.FILE);
+
+            hiveMQ.start().join();
+
+            ...
+        } catch (final Exception ex) {
+            ex.printStackTrace();
+        }
+    }
+}
+----
+
+== Contributing
+
+If you want to contribute to HiveMQ CE, see the link:CONTRIBUTING.adoc[contribution guidelines].
+
+== License
+
+HiveMQ Community Edition is licensed under the `APACHE LICENSE, VERSION 2.0`.
+A copy of the license can be found link:LICENSE[here].
diff --git a/broker/deploy.sh b/broker/deploy.sh
deleted file mode 100644
index 2104686..0000000
--- a/broker/deploy.sh
+++ /dev/null
@@ -1,6 +0,0 @@
-#!/bin/bash
-
-docker pull tokongs/ffi02-broker:latest
-docker stop broker
-docker rm broker
-docker run --name=broker --restart=always -p 8000:8000 -p 1883:1883 -d tokongs/ffi02:latest
diff --git a/broker/docker/Dockerfile b/broker/docker/Dockerfile
index 35dcb53..91178f8 100644
--- a/broker/docker/Dockerfile
+++ b/broker/docker/Dockerfile
@@ -1,22 +1,15 @@
 # We use multi-stage here to unzip in an initial layer so we don't have to COPY and then RUN unzip (two layers). ADD can lead to larger layers as well.
-FROM gradle:6.3-jdk11 AS build
+FROM busybox AS unzip
 
-WORKDIR /home/gradle/broker
-RUN git clone https://github.com/hivemq/hivemq-extension-sdk.git ../hivemq-extension-sdk \
-    && cd ../hivemq-extension-sdk \
-    && git reset --hard 56fd3489107934ac073c53adbc6a1709ec5c34ce
+ARG HIVEMQ_VERSION=2019.1
 
+COPY hivemq-ce-${HIVEMQ_VERSION}.zip /
 
-COPY build.gradle .
-COPY gradle.properties .
-COPY settings.gradle .
-COPY src src
-
-RUN gradle packaging
+RUN unzip /hivemq-ce-${HIVEMQ_VERSION}.zip
 
 FROM openjdk:11-jre-slim
 
-ARG HIVEMQ_VERSION=2021.1
+ARG HIVEMQ_VERSION=2019.1
 
 ENV HIVEMQ_GID=10000
 ENV HIVEMQ_UID=10000
@@ -47,11 +40,11 @@ RUN set -x \
         && gosu nobody true \
         && apt-get purge -y gpg dirmngr && rm -rf /var/lib/apt/lists/*
 
-COPY ./docker/config.xml /opt/config.xml
-COPY ./docker/docker-entrypoint.sh /opt/docker-entrypoint.sh
+COPY config.xml /opt/config.xml
+COPY docker-entrypoint.sh /opt/docker-entrypoint.sh
 
 # HiveMQ setup
-COPY --from=build /home/gradle/broker/build/package/hivemq-ce-${HIVEMQ_VERSION} /opt/hivemq-ce-${HIVEMQ_VERSION}
+COPY --from=unzip /hivemq-ce-${HIVEMQ_VERSION} /opt/hivemq-ce-${HIVEMQ_VERSION}
 RUN ln -s /opt/hivemq-ce-${HIVEMQ_VERSION} /opt/hivemq \
     && mv /opt/config.xml /opt/hivemq/conf/config.xml \
     && groupadd --gid ${HIVEMQ_GID} hivemq \
diff --git a/broker/docker/build.sh b/broker/docker/build.sh
new file mode 100644
index 0000000..cabb2b8
--- /dev/null
+++ b/broker/docker/build.sh
@@ -0,0 +1,41 @@
+#!/usr/bin/env bash
+
+set -eo pipefail
+
+IMAGE=${TARGET_IMAGE:-hivemq/hivemq-ce:snapshot}
+
+if [[ ${TRAVIS} == "true" ]]; then
+    echo "Logging into DockerHub"
+    echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
+fi
+
+cd "$(dirname $0)/../"
+HIVEMQ_VERSION=$(./gradlew properties | grep ^version: | sed -e "s/version: //")
+echo "Building Docker image for HiveMQ ${HIVEMQ_VERSION}"
+./gradlew packaging
+cd docker
+cp ../build/zip/hivemq-ce-${HIVEMQ_VERSION}.zip .
+docker build --build-arg HIVEMQ_VERSION=${HIVEMQ_VERSION} -f Dockerfile -t ${IMAGE} .
+rm -f hivemq-ce-${HIVEMQ_VERSION}.zip
+
+if [[ ! -z ${TRAVIS_TAG} ]]; then
+    echo "Tagging image as ${TRAVIS_TAG}"
+    TAGGED_IMAGE="${IMAGE//:*}:${TRAVIS_TAG}"
+    docker tag ${IMAGE} "${TAGGED_IMAGE}"
+
+    if [[ ${PUSH_IMAGE} == true ]]; then
+        docker push ${TAGGED_IMAGE}
+    fi
+
+    # If we're building a tagged commit, it will also be the new :latest image on Docker Hub.
+    if [[ ${PUSH_IMAGE} == true ]]; then
+        docker tag ${IMAGE} "${IMAGE//:*}:latest"
+        docker push ${IMAGE//:*}:latest
+    fi
+
+fi
+
+if [[ ${PUSH_IMAGE} == true ]]; then
+    echo "Pushing image"
+    docker push ${IMAGE}
+fi
\ No newline at end of file
diff --git a/broker/gradle/wrapper/gradle-wrapper.properties b/broker/gradle/wrapper/gradle-wrapper.properties
index 28201f2..a4b4429 100644
--- a/broker/gradle/wrapper/gradle-wrapper.properties
+++ b/broker/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,5 @@
-#Wed Feb 17 12:47:25 CET 2021
-distributionUrl=https\://services.gradle.org/distributions/gradle-6.3-all.zip
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
-zipStorePath=wrapper/dists
+distributionUrl=https\://services.gradle.org/distributions/gradle-6.3-bin.zip
 zipStoreBase=GRADLE_USER_HOME
+zipStorePath=wrapper/dists
diff --git a/broker/gradlew b/broker/gradlew
old mode 100755
new mode 100644
diff --git a/broker/jitpack.yml b/broker/jitpack.yml
new file mode 100644
index 0000000..d84b487
--- /dev/null
+++ b/broker/jitpack.yml
@@ -0,0 +1,14 @@
+jdk:
+  - openjdk11
+
+before_install:
+  - mkdir hivemq-community-edition
+  - ls -a | grep -v hivemq-community-edition | xargs mv -t hivemq-community-edition
+  - git clone https://github.com/hivemq/hivemq-extension-sdk.git
+  - cd hivemq-extension-sdk
+  - git checkout $GIT_BRANCH || true
+  - cd ..
+
+install:
+  - hivemq-community-edition/gradlew -p hivemq-community-edition publishToMavenLocal
+  - hivemq-extension-sdk/gradlew -p hivemq-extension-sdk publishToMavenLocal
diff --git a/broker/src/main/java/com/hivemq/bootstrap/netty/ChannelDependencies.java b/broker/src/main/java/com/hivemq/bootstrap/netty/ChannelDependencies.java
index efbaa64..b975d9d 100644
--- a/broker/src/main/java/com/hivemq/bootstrap/netty/ChannelDependencies.java
+++ b/broker/src/main/java/com/hivemq/bootstrap/netty/ChannelDependencies.java
@@ -38,7 +38,6 @@ import com.hivemq.mqtt.handler.ping.PingRequestHandler;
 import com.hivemq.mqtt.handler.publish.MessageExpiryHandler;
 import com.hivemq.mqtt.handler.subscribe.SubscribeHandler;
 import com.hivemq.mqtt.handler.unsubscribe.UnsubscribeHandler;
-import com.hivemq.mqtt.topic.TopicMatcher;
 import com.hivemq.security.ssl.SslParameterHandler;
 import io.netty.channel.group.ChannelGroup;
 import io.netty.handler.traffic.GlobalTrafficShapingHandler;
@@ -111,8 +110,7 @@ public class ChannelDependencies {
             final @NotNull Provider<MessageExpiryHandler> publishMessageExpiryHandlerProvider,
             final @NotNull MqttServerDisconnector mqttServerDisconnector,
             final @NotNull InterceptorHandler interceptorHandler,
-            final @NotNull GlobalMQTTMessageCounter globalMQTTMessageCounter,
-            final @NotNull TopicMatcher topicMatcher) {
+            final @NotNull GlobalMQTTMessageCounter globalMQTTMessageCounter) {
 
         this.noConnectIdleHandler = noConnectIdleHandler;
         this.connectHandlerProvider = connectHandlerProvider;
@@ -128,8 +126,7 @@ public class ChannelDependencies {
         this.pingRequestHandler = pingRequestHandler;
         this.restrictionsConfigurationService = restrictionsConfigurationService;
         this.mqttConnectDecoder = mqttConnectDecoder;
-        this.mqttMessageEncoder = new MQTTMessageEncoder(encoderFactory, globalMQTTMessageCounter,
-                fullConfigurationService.topicConfiguration(), topicMatcher);
+        this.mqttMessageEncoder = new MQTTMessageEncoder(encoderFactory, globalMQTTMessageCounter);
         this.eventLog = eventLog;
         this.sslParameterHandler = sslParameterHandler;
         this.mqttDecoders = mqttDecoders;
diff --git a/broker/src/main/java/com/hivemq/codec/encoder/MQTTMessageEncoder.java b/broker/src/main/java/com/hivemq/codec/encoder/MQTTMessageEncoder.java
index ef2fc22..391469b 100644
--- a/broker/src/main/java/com/hivemq/codec/encoder/MQTTMessageEncoder.java
+++ b/broker/src/main/java/com/hivemq/codec/encoder/MQTTMessageEncoder.java
@@ -17,21 +17,14 @@
 package com.hivemq.codec.encoder;
 
 import com.google.inject.Inject;
-import com.hivemq.configuration.service.TopicPriorityConfigurationService;
 import com.hivemq.extension.sdk.api.annotations.NotNull;
-import com.hivemq.extensions.priority.TopicPriority;
 import com.hivemq.metrics.handler.GlobalMQTTMessageCounter;
 import com.hivemq.mqtt.message.Message;
-import com.hivemq.mqtt.message.publish.PUBLISH;
-import com.hivemq.mqtt.topic.TopicMatcher;
 import io.netty.buffer.ByteBuf;
 import io.netty.channel.ChannelHandler;
 import io.netty.channel.ChannelHandlerContext;
-import io.netty.channel.socket.SocketChannelConfig;
 import io.netty.handler.codec.MessageToByteEncoder;
 
-import java.util.logging.Logger;
-
 /**
  * @author Dominik Obermaier
  */
@@ -40,23 +33,13 @@ public class MQTTMessageEncoder extends MessageToByteEncoder<Message> {
 
     private final @NotNull EncoderFactory encoderFactory;
     private final @NotNull GlobalMQTTMessageCounter globalMQTTMessageCounter;
-    private final @NotNull TopicPriorityConfigurationService TopicPriorityConfigurationService;
-    private final @NotNull TopicMatcher topicMatcher;
-    private final int ROUTINE_BIT_MASK = 0b11100111;
-    private final int PRIORITY_BIT_MASK = 0b11101111;
-    private final int IMMEDIATE_BIT_MASK = 0b11110111;
-    private final int FLASH_BIT_MASK = 0b11111111;
 
     @Inject
     public MQTTMessageEncoder(
             final @NotNull EncoderFactory encoderFactory,
-            final @NotNull GlobalMQTTMessageCounter globalMQTTMessageCounter,
-            final @NotNull TopicPriorityConfigurationService TopicPriorityConfigurationService,
-            final @NotNull TopicMatcher topicMatcher) {
+            final @NotNull GlobalMQTTMessageCounter globalMQTTMessageCounter) {
         this.encoderFactory = encoderFactory;
         this.globalMQTTMessageCounter = globalMQTTMessageCounter;
-        this.TopicPriorityConfigurationService = TopicPriorityConfigurationService;
-        this.topicMatcher = topicMatcher;
     }
 
     @Override
@@ -67,9 +50,6 @@ public class MQTTMessageEncoder extends MessageToByteEncoder<Message> {
         globalMQTTMessageCounter.countOutbound(msg);
         encoderFactory.encode(ctx, msg, out);
         globalMQTTMessageCounter.countOutboundTraffic(out.readableBytes());
-        if (msg instanceof PUBLISH){
-            setTosValue(ctx, (PUBLISH)msg);
-        }
     }
 
     @Override
@@ -79,34 +59,4 @@ public class MQTTMessageEncoder extends MessageToByteEncoder<Message> {
             final boolean preferDirect) {
         return encoderFactory.allocateBuffer(ctx, msg, preferDirect);
     }
-
-    public void setTosValue(@NotNull final ChannelHandlerContext ctx, @NotNull final PUBLISH message){
-        final String topic = message.getTopic() ;
-        TopicPriorityConfigurationService.getPriorities();
-        try {
-            final int prevTos = ((SocketChannelConfig) ctx.channel().config()).getTrafficClass();
-            ((SocketChannelConfig) ctx.channel().config()).setTrafficClass(prevTos & ROUTINE_BIT_MASK);
-            for (TopicPriority priority : TopicPriorityConfigurationService.getPriorities()) {
-                if (topicMatcher.matches(priority.getTopicFilter(), topic)) {
-                    switch (priority.getPriorityClass()) {
-                        case PRIORITY:
-                            ((SocketChannelConfig) ctx.channel().config()).setTrafficClass((prevTos | 24) & PRIORITY_BIT_MASK);
-                            return;
-                        case IMMEDIATE:
-                            ((SocketChannelConfig) ctx.channel().config()).setTrafficClass((prevTos | 24) & IMMEDIATE_BIT_MASK);
-                            return;
-                        case FLASH:
-                            ((SocketChannelConfig) ctx.channel().config()).setTrafficClass((prevTos | 24) & FLASH_BIT_MASK);
-                            return;
-                    }
-                }
-            }
-        } catch (ClassCastException e){
-            Logger log = Logger.getLogger("MQTTMessageEncoder");
-            log.info("Failed to set traffic class... (ClassCastException)");
-        }
-
-    }
 }
-
-
diff --git a/broker/src/main/java/com/hivemq/codec/encoder/mqtt5/Mqtt5MessageWithUserPropertiesEncoder.java b/broker/src/main/java/com/hivemq/codec/encoder/mqtt5/Mqtt5MessageWithUserPropertiesEncoder.java
index 0271b5b..36dda7f 100644
--- a/broker/src/main/java/com/hivemq/codec/encoder/mqtt5/Mqtt5MessageWithUserPropertiesEncoder.java
+++ b/broker/src/main/java/com/hivemq/codec/encoder/mqtt5/Mqtt5MessageWithUserPropertiesEncoder.java
@@ -29,12 +29,10 @@ import com.hivemq.mqtt.message.mqtt5.Mqtt5UserProperties;
 import com.hivemq.mqtt.message.mqtt5.MqttMessageWithUserProperties;
 import com.hivemq.mqtt.message.publish.PUBLISH;
 import com.hivemq.mqtt.message.reason.Mqtt5ReasonCode;
-import com.hivemq.mqtt.message.subscribe.Topic;
 import com.hivemq.util.ChannelAttributes;
 import io.netty.buffer.ByteBuf;
 import io.netty.channel.Channel;
 import io.netty.channel.ChannelHandlerContext;
-import io.netty.channel.socket.SocketChannelConfig;
 import io.netty.handler.codec.EncoderException;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -61,10 +59,7 @@ abstract class Mqtt5MessageWithUserPropertiesEncoder<T extends Message> extends
     // Need the security service here for enabling / disabling configuration on runtime.
     private final @NotNull SecurityConfigurationService securityConfigurationService;
 
-
-
-    public Mqtt5MessageWithUserPropertiesEncoder(final @NotNull MessageDroppedService messageDroppedService,
-            final @NotNull SecurityConfigurationService securityConfigurationService) {
+    public Mqtt5MessageWithUserPropertiesEncoder(final @NotNull MessageDroppedService messageDroppedService, final @NotNull SecurityConfigurationService securityConfigurationService) {
         this.messageDroppedService = messageDroppedService;
         this.securityConfigurationService = securityConfigurationService;
     }
diff --git a/broker/src/main/java/com/hivemq/codec/encoder/mqtt5/Mqtt5PublishEncoder.java b/broker/src/main/java/com/hivemq/codec/encoder/mqtt5/Mqtt5PublishEncoder.java
index 6fb7fc7..b080ae7 100644
--- a/broker/src/main/java/com/hivemq/codec/encoder/mqtt5/Mqtt5PublishEncoder.java
+++ b/broker/src/main/java/com/hivemq/codec/encoder/mqtt5/Mqtt5PublishEncoder.java
@@ -43,8 +43,7 @@ public class Mqtt5PublishEncoder extends Mqtt5MessageWithUserPropertiesEncoder<P
     private static final int FIXED_HEADER = MessageType.PUBLISH.ordinal() << 4;
 
     public Mqtt5PublishEncoder(final @NotNull MessageDroppedService messageDroppedService,
-                               final @NotNull SecurityConfigurationService securityConfigurationService){
-
+                               final @NotNull SecurityConfigurationService securityConfigurationService) {
         super(messageDroppedService, securityConfigurationService);
     }
 
diff --git a/broker/src/main/java/com/hivemq/configuration/ConfigurationBootstrap.java b/broker/src/main/java/com/hivemq/configuration/ConfigurationBootstrap.java
index d7cd2e6..6de153a 100644
--- a/broker/src/main/java/com/hivemq/configuration/ConfigurationBootstrap.java
+++ b/broker/src/main/java/com/hivemq/configuration/ConfigurationBootstrap.java
@@ -38,9 +38,7 @@ public class ConfigurationBootstrap {
                 new RestrictionsConfigurationServiceImpl(),
                 new SecurityConfigurationServiceImpl(),
                 new UsageStatisticsConfigImpl(),
-                new PersistenceConfigurationServiceImpl(),
-
-                new TopicPriorityConfigurationServiceImpl());
+                new PersistenceConfigurationServiceImpl());
 
         final ConfigurationFile configurationFile = ConfigurationFileProvider.get(systemInformation);
 
@@ -52,9 +50,7 @@ public class ConfigurationBootstrap {
                 new UsageStatisticsConfigurator(configurationService.usageStatisticsConfiguration()),
                 new MqttConfigurator(configurationService.mqttConfiguration()),
                 new ListenerConfigurator(configurationService.listenerConfiguration(), systemInformation),
-                new PersistenceConfigurator(configurationService.persistenceConfigurationService()),
-
-                new TopicPriorirtyConfigurator(configurationService.topicConfiguration()));
+                new PersistenceConfigurator(configurationService.persistenceConfigurationService()));
 
         configFileReader.applyConfig();
 
diff --git a/broker/src/main/java/com/hivemq/configuration/entity/HiveMQConfigEntity.java b/broker/src/main/java/com/hivemq/configuration/entity/HiveMQConfigEntity.java
index acaf9a5..05d525c 100644
--- a/broker/src/main/java/com/hivemq/configuration/entity/HiveMQConfigEntity.java
+++ b/broker/src/main/java/com/hivemq/configuration/entity/HiveMQConfigEntity.java
@@ -35,10 +35,6 @@ public class HiveMQConfigEntity {
     @XmlElementRef(required = false)
     private @NotNull List<ListenerEntity> listeners = new ArrayList<>();
 
-    @XmlElementWrapper(name = "priorities")
-    @XmlElementRef(required = false)
-    private @NotNull List<TopicPriorityEntity> priorities = new ArrayList<>();
-
     @XmlElementRef(required = false)
     private @NotNull MqttConfigEntity mqtt = new MqttConfigEntity();
 
@@ -54,15 +50,10 @@ public class HiveMQConfigEntity {
     @XmlElementRef(required = false)
     private @NotNull PersistenceEntity persistence = new PersistenceEntity();
 
-
     public @NotNull List<ListenerEntity> getListenerConfig() {
         return listeners;
     }
 
-    public @NotNull List<TopicPriorityEntity> getTopicPriorityConfig() {
-        return priorities;
-    }
-
     public @NotNull MqttConfigEntity getMqttConfig() {
         return mqtt;
     }
@@ -82,5 +73,4 @@ public class HiveMQConfigEntity {
     public @NotNull PersistenceEntity getPersistenceConfig() {
         return persistence;
     }
-
 }
diff --git a/broker/src/main/java/com/hivemq/configuration/entity/TopicPriorityEntity.java b/broker/src/main/java/com/hivemq/configuration/entity/TopicPriorityEntity.java
deleted file mode 100644
index b0e7427..0000000
--- a/broker/src/main/java/com/hivemq/configuration/entity/TopicPriorityEntity.java
+++ /dev/null
@@ -1,55 +0,0 @@
-/*
- * Copyright 2019-present HiveMQ GmbH
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.hivemq.configuration.entity;
-
-import com.hivemq.extension.sdk.api.annotations.NotNull;
-import com.hivemq.extension.sdk.api.annotations.Nullable;
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlElement;
-import javax.xml.bind.annotation.XmlRootElement;
-
-/**
- * @author Christoffer Stensrud
- */
-@XmlRootElement(name = "priority")
-@XmlAccessorType(XmlAccessType.NONE)
-@SuppressWarnings({"FieldMayBeFinal", "FieldCanBeLocal"})
-public class TopicPriorityEntity {
-
-    @XmlElement(name = "filter")
-    private @Nullable String filter;
-
-    @XmlElement(name = "priority", required = true)
-    private @NotNull int priority;
-
-    @XmlElement(name = "priority-class", required = true)
-    private String priorityClass;
-
-
-
-    public @NotNull String getFilter() {
-        return filter;
-    }
-
-    public @NotNull int getPriority() {
-        return priority;
-    }
-
-    public String getPriorityClass() {
-        return priorityClass;
-    }
-}
\ No newline at end of file
diff --git a/broker/src/main/java/com/hivemq/configuration/ioc/ConfigurationModule.java b/broker/src/main/java/com/hivemq/configuration/ioc/ConfigurationModule.java
index 34ab40e..95eea12 100644
--- a/broker/src/main/java/com/hivemq/configuration/ioc/ConfigurationModule.java
+++ b/broker/src/main/java/com/hivemq/configuration/ioc/ConfigurationModule.java
@@ -59,8 +59,6 @@ public class ConfigurationModule extends SingletonModule {
         bind(UsageStatisticsConfig.class).toInstance(configurationService.usageStatisticsConfiguration());
 
         bind(SecurityConfigurationService.class).toInstance(configurationService.securityConfiguration());
-
-        bind(TopicPriorityConfigurationService.class).toInstance(configurationService.topicConfiguration());
     }
 
 }
diff --git a/broker/src/main/java/com/hivemq/configuration/reader/ConfigFileReader.java b/broker/src/main/java/com/hivemq/configuration/reader/ConfigFileReader.java
index 2b90bdc..7793cda 100644
--- a/broker/src/main/java/com/hivemq/configuration/reader/ConfigFileReader.java
+++ b/broker/src/main/java/com/hivemq/configuration/reader/ConfigFileReader.java
@@ -53,8 +53,6 @@ public class ConfigFileReader {
     private final @NotNull UsageStatisticsConfigurator usageStatisticsConfigurator;
     private final @NotNull PersistenceConfigurator persistenceConfigurator;
 
-    private final @NotNull TopicPriorirtyConfigurator topicPriorirtyConfigurator;
-
     public ConfigFileReader(
             @NotNull final ConfigurationFile configurationFile,
             @NotNull final RestrictionConfigurator restrictionConfigurator,
@@ -63,9 +61,7 @@ public class ConfigFileReader {
             @NotNull final UsageStatisticsConfigurator usageStatisticsConfigurator,
             @NotNull final MqttConfigurator mqttConfigurator,
             @NotNull final ListenerConfigurator listenerConfigurator,
-            @NotNull final PersistenceConfigurator persistenceConfigurator,
-
-            @NotNull final TopicPriorirtyConfigurator topicPriorirtyConfigurator) {
+            @NotNull final PersistenceConfigurator persistenceConfigurator) {
 
         this.configurationFile = configurationFile;
         this.envVarUtil = envVarUtil;
@@ -75,8 +71,6 @@ public class ConfigFileReader {
         this.securityConfigurator = securityConfigurator;
         this.usageStatisticsConfigurator = usageStatisticsConfigurator;
         this.persistenceConfigurator = persistenceConfigurator;
-
-        this.topicPriorirtyConfigurator = topicPriorirtyConfigurator;
     }
 
     public void applyConfig() {
@@ -145,13 +139,6 @@ public class ConfigFileReader {
         securityConfigurator.setSecurityConfig(config.getSecurityConfig());
         usageStatisticsConfigurator.setUsageStatisticsConfig(config.getUsageStatisticsConfig());
         persistenceConfigurator.setPersistenceConfig(config.getPersistenceConfig());
-
-        /**
-         * Topic configurator
-         *
-         * Added by Christoffer Stensrud
-         */
-        topicPriorirtyConfigurator.setTopicPriorityConfig(config.getTopicPriorityConfig());
     }
 
 }
diff --git a/broker/src/main/java/com/hivemq/configuration/reader/TopicPriorirtyConfigurator.java b/broker/src/main/java/com/hivemq/configuration/reader/TopicPriorirtyConfigurator.java
deleted file mode 100644
index cc3bf8d..0000000
--- a/broker/src/main/java/com/hivemq/configuration/reader/TopicPriorirtyConfigurator.java
+++ /dev/null
@@ -1,72 +0,0 @@
-/*
- * Copyright 2019-present HiveMQ GmbH
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.hivemq.configuration.reader;
-
-import com.google.common.collect.ImmutableList;
-import com.google.inject.Inject;
-import com.hivemq.configuration.entity.TopicPriorityEntity;
-import com.hivemq.configuration.service.TopicPriorityConfigurationService;
-import com.hivemq.extension.sdk.api.annotations.NotNull;
-import com.hivemq.extensions.priority.PriorityClass;
-import com.hivemq.extensions.priority.TopicPriority;
-
-import java.util.List;
-
-/**
- *
- * @author Christoffer Stensrud
- *
- */
-public class TopicPriorirtyConfigurator {
-
-    private final @NotNull TopicPriorityConfigurationService topicPriorityConfigurationService;
-
-    @Inject
-    public TopicPriorirtyConfigurator(final @NotNull TopicPriorityConfigurationService topicPriorityConfigurationService){
-        this.topicPriorityConfigurationService = topicPriorityConfigurationService;
-    }
-
-    void setTopicPriorityConfig(final @NotNull List<TopicPriorityEntity> entities) {
-        final ImmutableList<TopicPriority> priorities = convertPriorityEntities(entities);
-
-        for (final TopicPriority priority : priorities) {
-            topicPriorityConfigurationService.addPriority(priority);
-        }
-
-
-    }
-    private @NotNull ImmutableList<TopicPriority> convertPriorityEntities(final @NotNull List<TopicPriorityEntity> entities) {
-        final ImmutableList.Builder<TopicPriority> builder = ImmutableList.builder();
-
-        for (final TopicPriorityEntity entity : entities) {
-            final TopicPriority priority = convertPriority(entity);
-            if (priority != null) {
-                builder.add(priority);
-            }
-        }
-
-        return builder.build();
-    }
-
-    @NotNull TopicPriority convertPriority(final @NotNull TopicPriorityEntity entity) {
-        return new TopicPriority(
-                entity.getFilter(),
-                PriorityClass.valueOf(entity.getPriorityClass()),
-                entity.getPriority());
-    }
-
-
-}
diff --git a/broker/src/main/java/com/hivemq/configuration/service/FullConfigurationService.java b/broker/src/main/java/com/hivemq/configuration/service/FullConfigurationService.java
index db57ec6..a3ebc8d 100644
--- a/broker/src/main/java/com/hivemq/configuration/service/FullConfigurationService.java
+++ b/broker/src/main/java/com/hivemq/configuration/service/FullConfigurationService.java
@@ -28,6 +28,4 @@ public interface FullConfigurationService extends ConfigurationService {
 
     PersistenceConfigurationService persistenceConfigurationService();
 
-    TopicPriorityConfigurationService topicConfiguration();
-
 }
diff --git a/broker/src/main/java/com/hivemq/configuration/service/TopicPriorityConfigurationService.java b/broker/src/main/java/com/hivemq/configuration/service/TopicPriorityConfigurationService.java
deleted file mode 100644
index 1029a7b..0000000
--- a/broker/src/main/java/com/hivemq/configuration/service/TopicPriorityConfigurationService.java
+++ /dev/null
@@ -1,55 +0,0 @@
-/*
- * Copyright 2019-present HiveMQ GmbH
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.hivemq.configuration.service;
-
-import com.hivemq.annotations.ReadOnly;
-import com.hivemq.configuration.service.entity.Listener;
-import com.hivemq.configuration.service.exception.ConfigurationValidationException;
-import com.hivemq.extensions.priority.TopicPriority;
-import com.hivemq.mqtt.message.subscribe.Topic;
-import java.util.List;
-
-/**
- * The service which allows to inspect Topic configuration at runtime.
- *
- * @author Christoffer Stensrud
- *
- */
-public interface TopicPriorityConfigurationService {
-
-    /**
-     * Adds a new Priority at runtime
-     *
-     * @param priority    the priority
-     * @throws ConfigurationValidationException if the validation of the priority wasn't successful
-     */
-    void addPriority(final TopicPriority priority) throws ConfigurationValidationException;
-
-    /**
-     * @return an unmodifiable list of all available priorities
-     */
-    @ReadOnly
-    List<TopicPriority> getPriorities();
-
-
-
-
-
-
-
-}
-
-
diff --git a/broker/src/main/java/com/hivemq/configuration/service/impl/ConfigurationServiceImpl.java b/broker/src/main/java/com/hivemq/configuration/service/impl/ConfigurationServiceImpl.java
index 7b9c711..741f658 100644
--- a/broker/src/main/java/com/hivemq/configuration/service/impl/ConfigurationServiceImpl.java
+++ b/broker/src/main/java/com/hivemq/configuration/service/impl/ConfigurationServiceImpl.java
@@ -34,26 +34,19 @@ public class ConfigurationServiceImpl implements FullConfigurationService {
     private final UsageStatisticsConfig usageStatisticsConfig;
     private final PersistenceConfigurationService persistenceConfigurationService;
 
-    private final TopicPriorityConfigurationService topicPriorityConfigurationService;
-
     public ConfigurationServiceImpl(
             final ListenerConfigurationService listenerConfigurationService,
             final MqttConfigurationService mqttConfigurationService,
             final RestrictionsConfigurationService restrictionsConfigurationService,
             final SecurityConfigurationService securityConfigurationService,
             final UsageStatisticsConfig usageStatisticsConfig,
-            final PersistenceConfigurationService persistenceConfigurationService,
-
-            final TopicPriorityConfigurationServiceImpl topicConfigurationService) {
-
+            final PersistenceConfigurationService persistenceConfigurationService) {
         this.listenerConfigurationService = listenerConfigurationService;
         this.mqttConfigurationService = mqttConfigurationService;
         this.restrictionsConfigurationService = restrictionsConfigurationService;
         this.securityConfigurationService = securityConfigurationService;
         this.usageStatisticsConfig = usageStatisticsConfig;
         this.persistenceConfigurationService = persistenceConfigurationService;
-
-        this.topicPriorityConfigurationService = topicConfigurationService;
     }
 
     @Override
@@ -85,9 +78,4 @@ public class ConfigurationServiceImpl implements FullConfigurationService {
     public PersistenceConfigurationService persistenceConfigurationService() {
         return persistenceConfigurationService;
     }
-
-    @Override
-    public TopicPriorityConfigurationService topicConfiguration() {
-        return topicPriorityConfigurationService;
-    }
 }
diff --git a/broker/src/main/java/com/hivemq/configuration/service/impl/TopicPriorityConfigurationServiceImpl.java b/broker/src/main/java/com/hivemq/configuration/service/impl/TopicPriorityConfigurationServiceImpl.java
deleted file mode 100644
index 0f10842..0000000
--- a/broker/src/main/java/com/hivemq/configuration/service/impl/TopicPriorityConfigurationServiceImpl.java
+++ /dev/null
@@ -1,47 +0,0 @@
-/*
- * Copyright 2019-present HiveMQ GmbH
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.hivemq.configuration.service.impl;
-
-import com.hivemq.configuration.service.TopicPriorityConfigurationService;
-import com.hivemq.configuration.service.exception.ConfigurationValidationException;
-import com.hivemq.extensions.priority.TopicPriority;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import javax.inject.Singleton;
-import java.util.ArrayList;
-import java.util.List;
-
-@Singleton
-public class TopicPriorityConfigurationServiceImpl implements TopicPriorityConfigurationService {
-
-    private static final Logger log = LoggerFactory.getLogger(TopicPriorityConfigurationServiceImpl.class);
-
-    /**
-     * The actual topic. Maybe make it a COWAL?
-     */
-    final List<TopicPriority> priorities = new ArrayList<>();
-
-    @Override
-    public void addPriority(TopicPriority priority) throws ConfigurationValidationException {
-        priorities.add(priority);
-    }
-
-    @Override
-    public List<TopicPriority> getPriorities() {
-        return priorities;
-    }
-}
diff --git a/broker/src/main/java/com/hivemq/extensions/priority/PriorityClass.java b/broker/src/main/java/com/hivemq/extensions/priority/PriorityClass.java
deleted file mode 100644
index 0575431..0000000
--- a/broker/src/main/java/com/hivemq/extensions/priority/PriorityClass.java
+++ /dev/null
@@ -1,19 +0,0 @@
-/*
- * Copyright 2019-present HiveMQ GmbH
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.hivemq.extensions.priority;
-
-public enum PriorityClass { FLASH, IMMEDIATE, PRIORITY, ROUTINE }
\ No newline at end of file
diff --git a/broker/src/main/java/com/hivemq/extensions/priority/TopicPriority.java b/broker/src/main/java/com/hivemq/extensions/priority/TopicPriority.java
deleted file mode 100644
index 596c3fc..0000000
--- a/broker/src/main/java/com/hivemq/extensions/priority/TopicPriority.java
+++ /dev/null
@@ -1,45 +0,0 @@
-/*
- * Copyright 2019-present HiveMQ GmbH
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.hivemq.extensions.priority;
-
-import com.hivemq.extension.sdk.api.annotations.NotNull;
-
-
-public class TopicPriority {
-
-    private final @NotNull String filter;
-    private final @NotNull PriorityClass priorityClass;
-    private final @NotNull int priority;
-
-    public TopicPriority(@NotNull String filter, @NotNull PriorityClass priorityClass, @NotNull int priority) {
-        this.filter = filter;
-        this.priorityClass = priorityClass;
-        this.priority = priority;
-    }
-
-    public String getTopicFilter(){
-        return filter;
-    }
-
-    public PriorityClass getPriorityClass(){
-        return priorityClass;
-    }
-
-    public int getPriority(){
-        return priority;
-    }
-}
\ No newline at end of file
diff --git a/broker/src/main/java/com/hivemq/mqtt/message/subscribe/Topic.java b/broker/src/main/java/com/hivemq/mqtt/message/subscribe/Topic.java
index d6f0e51..5c11e37 100644
--- a/broker/src/main/java/com/hivemq/mqtt/message/subscribe/Topic.java
+++ b/broker/src/main/java/com/hivemq/mqtt/message/subscribe/Topic.java
@@ -43,9 +43,6 @@ public class Topic implements Serializable, Comparable<Topic>, Mqtt3Topic, Mqtt5
      */
     public static final QoS DEFAULT_QOS = QoS.AT_LEAST_ONCE;
 
-    //Priority
-    private int priority;
-
     //MQTT 3 & 5
     private final @NotNull String topic;
     private @NotNull QoS qoS;
@@ -86,14 +83,6 @@ public class Topic implements Serializable, Comparable<Topic>, Mqtt3Topic, Mqtt5
         this(topic, qoS, noLocal, retainAsPublished, DEFAULT_RETAIN_HANDLING, null);
     }
 
-    //MQTT 5 Topic with priority
-    public Topic(final @NotNull String topic, final @NotNull QoS qoS, final @NotNull int priority,
-                  final boolean noLocal, final boolean retainAsPublished) {
-
-        this(topic, qoS, noLocal, retainAsPublished, DEFAULT_RETAIN_HANDLING, null);
-        this.priority = priority;
-    }
-
     //MQTT 3 Topic
     public Topic(final @NotNull String topic, final @NotNull QoS qoS) {
         this(topic, qoS, DEFAULT_NO_LOCAL, DEFAULT_RETAIN_AS_PUBLISHED, DEFAULT_RETAIN_HANDLING, null);
@@ -212,12 +201,4 @@ public class Topic implements Serializable, Comparable<Topic>, Mqtt3Topic, Mqtt5
         sizeInMemory = size;
         return sizeInMemory;
     }
-
-    /**
-     * testtesttest
-     * @return a integer to test topic config.
-     */
-    public int getPriority() {
-        return priority;
-    }
 }
diff --git a/broker/src/main/java/com/hivemq/persistence/ioc/LocalPersistenceMemoryModule.java b/broker/src/main/java/com/hivemq/persistence/ioc/LocalPersistenceMemoryModule.java
index 9d2d275..4f873c1 100644
--- a/broker/src/main/java/com/hivemq/persistence/ioc/LocalPersistenceMemoryModule.java
+++ b/broker/src/main/java/com/hivemq/persistence/ioc/LocalPersistenceMemoryModule.java
@@ -19,8 +19,6 @@ import com.google.inject.Injector;
 import com.hivemq.bootstrap.ioc.SingletonModule;
 import com.hivemq.extension.sdk.api.annotations.NotNull;
 import com.hivemq.extension.sdk.api.annotations.Nullable;
-import com.hivemq.mqtt.topic.TokenizedTopicMatcher;
-import com.hivemq.mqtt.topic.TopicMatcher;
 import com.hivemq.persistence.clientqueue.ClientQueueLocalPersistence;
 import com.hivemq.persistence.local.ClientSessionLocalPersistence;
 import com.hivemq.persistence.local.ClientSessionSubscriptionLocalPersistence;
@@ -29,7 +27,6 @@ import com.hivemq.persistence.local.memory.ClientSessionMemoryLocalPersistence;
 import com.hivemq.persistence.local.memory.ClientSessionSubscriptionMemoryLocalPersistence;
 import com.hivemq.persistence.local.memory.RetainedMessageMemoryLocalPersistence;
 import com.hivemq.persistence.retained.RetainedMessageLocalPersistence;
-import com.hivemq.util.PublishComparator;
 
 import javax.inject.Singleton;
 
@@ -61,7 +58,6 @@ class LocalPersistenceMemoryModule extends SingletonModule<Class<LocalPersistenc
         bindLocalPersistence(ClientQueueLocalPersistence.class,
                 ClientQueueMemoryLocalPersistence.class);
 
-        bind(PublishComparator.class);
     }
 
     private void bindLocalPersistence(final @NotNull Class localPersistenceClass,
diff --git a/broker/src/main/java/com/hivemq/persistence/local/memory/ClientQueueMemoryLocalPersistence.java b/broker/src/main/java/com/hivemq/persistence/local/memory/ClientQueueMemoryLocalPersistence.java
index e825591..50fdd09 100644
--- a/broker/src/main/java/com/hivemq/persistence/local/memory/ClientQueueMemoryLocalPersistence.java
+++ b/broker/src/main/java/com/hivemq/persistence/local/memory/ClientQueueMemoryLocalPersistence.java
@@ -17,6 +17,7 @@ package com.hivemq.persistence.local.memory;
 
 import com.codahale.metrics.Gauge;
 import com.codahale.metrics.MetricRegistry;
+import com.google.common.annotations.VisibleForTesting;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.primitives.ImmutableIntArray;
@@ -34,14 +35,16 @@ import com.hivemq.mqtt.message.publish.PUBLISH;
 import com.hivemq.mqtt.message.pubrel.PUBREL;
 import com.hivemq.persistence.clientqueue.ClientQueueLocalPersistence;
 import com.hivemq.persistence.payload.PublishPayloadPersistence;
-import com.hivemq.util.*;
+import com.hivemq.util.ObjectMemoryEstimation;
+import com.hivemq.util.PublishUtil;
+import com.hivemq.util.Strings;
+import com.hivemq.util.ThreadPreConditions;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import javax.inject.Inject;
 import java.util.*;
 import java.util.concurrent.atomic.AtomicLong;
-import java.util.stream.Collectors;
 
 import static com.google.common.base.Preconditions.checkNotNull;
 import static com.hivemq.configuration.service.InternalConfigurations.QOS_0_MEMORY_HARD_LIMIT_DIVISOR;
@@ -52,93 +55,62 @@ import static com.hivemq.util.ThreadPreConditions.SINGLE_WRITER_THREAD_PREFIX;
  * @author Silvio Giebl
  */
 @LazySingleton
-public class ClientQueueMemoryLocalPersistence
-        implements ClientQueueLocalPersistence {
+public class ClientQueueMemoryLocalPersistence implements ClientQueueLocalPersistence {
 
-    @NotNull
-    private static final Logger log = LoggerFactory.getLogger(
-            ClientQueueMemoryLocalPersistence.class
-    );
+    private static final @NotNull Logger log = LoggerFactory.getLogger(ClientQueueMemoryLocalPersistence.class);
 
     private static final int NO_PACKET_ID = 0;
 
-    @NotNull
-    private final Map<String, Messages> @NotNull [] buckets;
-
-    @NotNull
-    private final Map<String, Messages> @NotNull [] sharedBuckets;
-
-    static class Messages {
-
-        @NotNull
-        final PriorityQueue<MessageWithID> qos1Or2Messages;
-
-        @NotNull
-        final PriorityQueue<PublishWithRetained> qos0Messages;
-
-        public Messages(Comparator<PUBLISH> comparator) {
-            qos1Or2Messages = new PriorityQueue(comparator);
-            qos0Messages = new PriorityQueue(comparator);
-        }
-
+    private final @NotNull Map<String, Messages> @NotNull [] buckets;
+    private final @NotNull Map<String, Messages> @NotNull [] sharedBuckets;
 
+    private static class Messages {
+        final @NotNull LinkedList<MessageWithID> qos1Or2Messages = new LinkedList<>();
+        final @NotNull LinkedList<PublishWithRetained> qos0Messages = new LinkedList<>();
         int retainedQos1Or2Messages = 0;
         long qos0Memory = 0;
     }
 
-    @NotNull
-    private final PublishPayloadPersistence payloadPersistence;
-
-    @NotNull
-    private final MessageDroppedService messageDroppedService;
+    private final @NotNull PublishPayloadPersistence payloadPersistence;
+    private final @NotNull MessageDroppedService messageDroppedService;
 
     private final long qos0MemoryLimit;
     private final int qos0ClientMemoryLimit;
     private final int retainedMessageMax;
 
-    @NotNull
-    private final AtomicLong qos0MessagesMemory;
-
-    @NotNull
-    private final AtomicLong totalMemorySize;
-
-    @NotNull
-    private final PublishComparator publishComparator;
+    private final @NotNull AtomicLong qos0MessagesMemory;
+    private final @NotNull AtomicLong totalMemorySize;
 
     @Inject
     ClientQueueMemoryLocalPersistence(
             final @NotNull PublishPayloadPersistence payloadPersistence,
             final @NotNull MessageDroppedService messageDroppedService,
-            final @NotNull MetricRegistry metricRegistry,
-            final @NotNull PublishComparator publishComparator
-    ) {
+            final @NotNull MetricRegistry metricRegistry) {
+
         final int bucketCount = InternalConfigurations.PERSISTENCE_BUCKET_COUNT.get();
-        // noinspection unchecked
+        //noinspection unchecked
         buckets = new HashMap[bucketCount];
-        // noinspection unchecked
+        //noinspection unchecked
         sharedBuckets = new HashMap[bucketCount];
         for (int i = 0; i < bucketCount; i++) {
             buckets[i] = new HashMap<>();
             sharedBuckets[i] = new HashMap<>();
         }
-        this.publishComparator = publishComparator;
 
         this.payloadPersistence = payloadPersistence;
         this.messageDroppedService = messageDroppedService;
 
         qos0MemoryLimit = getQos0MemoryLimit();
-        qos0ClientMemoryLimit =
-                InternalConfigurations.QOS_0_MEMORY_LIMIT_PER_CLIENT.get();
-        retainedMessageMax =
-                InternalConfigurations.RETAINED_MESSAGE_QUEUE_SIZE.get();
+        qos0ClientMemoryLimit = InternalConfigurations.QOS_0_MEMORY_LIMIT_PER_CLIENT.get();
+        retainedMessageMax = InternalConfigurations.RETAINED_MESSAGE_QUEUE_SIZE.get();
 
         qos0MessagesMemory = new AtomicLong();
         totalMemorySize = new AtomicLong();
 
         metricRegistry.register(
                 HiveMQMetrics.QUEUED_MESSAGES_MEMORY_PERSISTENCE_TOTAL_SIZE.name(),
-                (Gauge<Long>) totalMemorySize::get
-        );
+                (Gauge<Long>) totalMemorySize::get);
+
     }
 
     private long getQos0MemoryLimit() {
@@ -148,15 +120,12 @@ public class ClientQueueMemoryLocalPersistence
         final int hardLimitDivisor = QOS_0_MEMORY_HARD_LIMIT_DIVISOR.get();
 
         if (hardLimitDivisor < 1) {
-            // fallback to default if config failed
+            //fallback to default if config failed
             maxHardLimit = maxHeap / 4;
         } else {
             maxHardLimit = maxHeap / hardLimitDivisor;
         }
-        log.debug(
-                "{} allocated for qos 0 inflight messages",
-                Strings.convertBytes(maxHardLimit)
-        );
+        log.debug("{} allocated for qos 0 inflight messages", Strings.convertBytes(maxHardLimit));
         return maxHardLimit;
     }
 
@@ -172,22 +141,14 @@ public class ClientQueueMemoryLocalPersistence
             final long max,
             final @NotNull QueuedMessagesStrategy strategy,
             final boolean retained,
-            final int bucketIndex
-    ) {
+            final int bucketIndex) {
+
         checkNotNull(queueId, "Queue ID must not be null");
         checkNotNull(publish, "Publish must not be null");
         checkNotNull(strategy, "Strategy must not be null");
         ThreadPreConditions.startsWith(SINGLE_WRITER_THREAD_PREFIX);
 
-        add(
-                queueId,
-                shared,
-                List.of(publish),
-                max,
-                strategy,
-                retained,
-                bucketIndex
-        );
+        add(queueId, shared, List.of(publish), max, strategy, retained, bucketIndex);
     }
 
     /**
@@ -210,7 +171,7 @@ public class ClientQueueMemoryLocalPersistence
         ThreadPreConditions.startsWith(SINGLE_WRITER_THREAD_PREFIX);
 
         final Map<String, Messages> bucket = shared ? sharedBuckets[bucketIndex] : buckets[bucketIndex];
-        final Messages messages = bucket.computeIfAbsent(queueId, s -> new Messages(publishComparator));
+        final Messages messages = bucket.computeIfAbsent(queueId, s -> new Messages());
 
         for (final PUBLISH publish : publishes) {
             final PublishWithRetained publishWithRetained = new PublishWithRetained(publish, retained);
@@ -255,93 +216,36 @@ public class ClientQueueMemoryLocalPersistence
         }
     }
 
-    /**
-     * @return true if a message was discarded, else false
-     */
-    private boolean discardOldest(
-            final @NotNull String queueId,
-            final boolean shared,
-            final @NotNull Messages messages,
-            final boolean retainedOnly) {
-
-        final Iterator<MessageWithID> iterator = messages.qos1Or2Messages.iterator();
-        while (iterator.hasNext()) {
-            final MessageWithID messageWithID = iterator.next();
-            if (!(messageWithID instanceof PublishWithRetained)) {
-                continue;
-            }
-            final PublishWithRetained publish = (PublishWithRetained) messageWithID;
-            // we must no discard inflight messages
-            if (publish.getPacketIdentifier() != NO_PACKET_ID) {
-                continue;
-            }
-            // Messages that are queued as retained messages are not discarded,
-            // otherwise a client could only receive a limited amount of retained messages per subscription.
-            if ((retainedOnly && !publish.retained) || (!retainedOnly && publish.retained)) {
-                continue;
-            }
-            logAndDecrementPayloadReference(publish, shared, queueId);
-            iterator.remove();
-            return true;
-        }
-        return false;
-
-    }
-
-
     private void addQos0Publish(
             final @NotNull String queueId,
             final boolean shared,
             final @NotNull Messages messages,
-            final @NotNull PublishWithRetained publishWithRetained
-    ) {
+            final @NotNull PublishWithRetained publishWithRetained) {
+
         final long currentQos0MessagesMemory = qos0MessagesMemory.get();
         if (currentQos0MessagesMemory >= qos0MemoryLimit) {
             if (shared) {
                 messageDroppedService.qos0MemoryExceededShared(
-                        queueId,
-                        publishWithRetained.getTopic(),
-                        0,
-                        currentQos0MessagesMemory,
-                        qos0MemoryLimit
-                );
+                        queueId, publishWithRetained.getTopic(), 0, currentQos0MessagesMemory, qos0MemoryLimit);
             } else {
                 messageDroppedService.qos0MemoryExceeded(
-                        queueId,
-                        publishWithRetained.getTopic(),
-                        0,
-                        currentQos0MessagesMemory,
-                        qos0MemoryLimit
-                );
+                        queueId, publishWithRetained.getTopic(), 0, currentQos0MessagesMemory, qos0MemoryLimit);
             }
-            payloadPersistence.decrementReferenceCounter(
-                    publishWithRetained.getPublishId()
-            );
+            payloadPersistence.decrementReferenceCounter(publishWithRetained.getPublishId());
             return;
         }
 
         if (!shared) {
             if (messages.qos0Memory >= qos0ClientMemoryLimit) {
-                messageDroppedService.qos0MemoryExceeded(
-                        queueId,
-                        publishWithRetained.getTopic(),
-                        0,
-                        messages.qos0Memory,
-                        qos0ClientMemoryLimit
-                );
-                payloadPersistence.decrementReferenceCounter(
-                        publishWithRetained.getPublishId()
-                );
+                messageDroppedService.qos0MemoryExceeded(queueId, publishWithRetained.getTopic(), 0, messages.qos0Memory, qos0ClientMemoryLimit);
+                payloadPersistence.decrementReferenceCounter(publishWithRetained.getPublishId());
                 return;
             }
         }
 
         messages.qos0Messages.add(publishWithRetained);
         increaseQos0MessagesMemory(publishWithRetained.getEstimatedSize());
-        increaseClientQos0MessagesMemory(
-                messages,
-                publishWithRetained.getEstimatedSize()
-        );
+        increaseClientQos0MessagesMemory(messages, publishWithRetained.getEstimatedSize());
         increaseMessagesMemory(publishWithRetained.getEstimatedSize());
     }
 
@@ -355,19 +259,18 @@ public class ClientQueueMemoryLocalPersistence
             final boolean shared,
             final @NotNull ImmutableIntArray packetIds,
             final long bytesLimit,
-            final int bucketIndex
-    ) {
+            final int bucketIndex) {
+
         checkNotNull(queueId, "Queue ID must not be null");
         checkNotNull(packetIds, "Packet IDs must not be null");
         ThreadPreConditions.startsWith(SINGLE_WRITER_THREAD_PREFIX);
 
-        final Map<String, Messages> bucket = shared
-                ? sharedBuckets[bucketIndex]
-                : buckets[bucketIndex];
+        final Map<String, Messages> bucket = shared ? sharedBuckets[bucketIndex] : buckets[bucketIndex];
         final Messages messages = bucket.get(queueId);
         if (messages == null) {
             return ImmutableList.of();
         }
+
         // In case there are only qos 0 messages
         if (messages.qos1Or2Messages.size() == 0) {
             return getQos0Publishes(messages, packetIds, bytesLimit);
@@ -379,36 +282,26 @@ public class ClientQueueMemoryLocalPersistence
         int bytes = 0;
         final ImmutableList.Builder<PUBLISH> publishes = ImmutableList.builder();
 
-        PriorityQueue<PublishWithRetained> allPublishes = new PriorityQueue(publishComparator);
-        allPublishes.addAll(messages.qos0Messages);
-        allPublishes.addAll(messages.qos1Or2Messages
-                .stream()
-                .filter(m -> m instanceof PublishWithRetained)
-                .map(m -> (PublishWithRetained) m)
-                .collect(Collectors.toList()));
-
-        while (!allPublishes.isEmpty()) {
-            final PublishWithRetained publishWithRetained = allPublishes.poll();
-
+        final Iterator<MessageWithID> iterator = messages.qos1Or2Messages.iterator();
+        while (iterator.hasNext()) {
+            final MessageWithID messageWithID = iterator.next();
+            if (!(messageWithID instanceof PublishWithRetained)) {
+                continue;
+            }
+            final PublishWithRetained publishWithRetained = (PublishWithRetained) messageWithID;
             if (publishWithRetained.getPacketIdentifier() != NO_PACKET_ID) {
                 //already inflight
                 continue;
             }
 
-            if(publishWithRetained.getQoS() == QoS.AT_MOST_ONCE  && !PublishUtil.checkExpiry(publishWithRetained.getTimestamp(), publishWithRetained.getMessageExpiryInterval()) ){
-                messages.qos0Messages.poll();
-                publishes.add(publishWithRetained);
-                    messageCount++;
-                    bytes += publishWithRetained.getEstimatedSizeInMemory();
-                    continue;
-            }
-
             if (PublishUtil.checkExpiry(publishWithRetained.getTimestamp(), publishWithRetained.getMessageExpiryInterval())) {
+                iterator.remove();
                 payloadPersistence.decrementReferenceCounter(publishWithRetained.getPublishId());
                 if (publishWithRetained.retained) {
                     messages.retainedQos1Or2Messages--;
                 }
                 increaseMessagesMemory(-publishWithRetained.getEstimatedSize());
+                //do not return here, because we could have a QoS 0 message left
             } else {
 
                 final int packetId = packetIds.get(packetIdIndex);
@@ -422,6 +315,13 @@ public class ClientQueueMemoryLocalPersistence
                 }
             }
 
+            // poll a qos 0 message
+            final PUBLISH qos0Publish = pollQos0Message(messages);
+            if ((qos0Publish != null) && !PublishUtil.checkExpiry(qos0Publish.getTimestamp(), qos0Publish.getMessageExpiryInterval())) {
+                publishes.add(qos0Publish);
+                messageCount++;
+                bytes += qos0Publish.getEstimatedSizeInMemory();
+            }
             if ((messageCount == countLimit) || (bytes > bytesLimit)) {
                 break;
             }
@@ -430,10 +330,8 @@ public class ClientQueueMemoryLocalPersistence
     }
 
     private @NotNull ImmutableList<PUBLISH> getQos0Publishes(
-            final @NotNull Messages messages,
-            final @NotNull ImmutableIntArray packetIds,
-            final long bytesLimit
-    ) {
+            final @NotNull Messages messages, final @NotNull ImmutableIntArray packetIds, final long bytesLimit) {
+
         final ImmutableList.Builder<PUBLISH> publishes = ImmutableList.builder();
         int qos0MessagesFound = 0;
         int qos0Bytes = 0;
@@ -442,12 +340,7 @@ public class ClientQueueMemoryLocalPersistence
             if (qos0Publish == null) {
                 break;
             }
-            if (
-                    !PublishUtil.checkExpiry(
-                            qos0Publish.getTimestamp(),
-                            qos0Publish.getMessageExpiryInterval()
-                    )
-            ) {
+            if (!PublishUtil.checkExpiry(qos0Publish.getTimestamp(), qos0Publish.getMessageExpiryInterval())) {
                 publishes.add(qos0Publish);
                 qos0MessagesFound++;
                 qos0Bytes += qos0Publish.getEstimatedSizeInMemory();
@@ -466,9 +359,7 @@ public class ClientQueueMemoryLocalPersistence
         increaseQos0MessagesMemory(-estimatedSize);
         increaseClientQos0MessagesMemory(messages, -estimatedSize);
         increaseMessagesMemory(-estimatedSize);
-        payloadPersistence.decrementReferenceCounter(
-                publishWithRetained.getPublishId()
-        );
+        payloadPersistence.decrementReferenceCounter(publishWithRetained.getPublishId());
         return publishWithRetained;
     }
 
@@ -479,14 +370,12 @@ public class ClientQueueMemoryLocalPersistence
             final boolean shared,
             final int batchSize,
             final long bytesLimit,
-            final int bucketIndex
-    ) {
+            final int bucketIndex) {
+
         checkNotNull(queueId, "client id must not be null");
         ThreadPreConditions.startsWith(SINGLE_WRITER_THREAD_PREFIX);
 
-        final Map<String, Messages> bucket = shared
-                ? sharedBuckets[bucketIndex]
-                : buckets[bucketIndex];
+        final Map<String, Messages> bucket = shared ? sharedBuckets[bucketIndex] : buckets[bucketIndex];
         final Messages messages = bucket.get(queueId);
         if (messages == null) {
             return ImmutableList.of();
@@ -524,10 +413,8 @@ public class ClientQueueMemoryLocalPersistence
     @Override
     @ExecuteInSingleWriter
     public @Nullable String replace(
-            final @NotNull String queueId,
-            final @NotNull PUBREL pubrel,
-            final int bucketIndex
-    ) {
+            final @NotNull String queueId, final @NotNull PUBREL pubrel, final int bucketIndex) {
+
         checkNotNull(queueId, "client id must not be null");
         checkNotNull(pubrel, "pubrel must not be null");
         ThreadPreConditions.startsWith(SINGLE_WRITER_THREAD_PREFIX);
@@ -569,12 +456,12 @@ public class ClientQueueMemoryLocalPersistence
                 break;
             }
         }
-        final PubrelWithRetained pubrelWithRetained = new PubrelWithRetained(
-                pubrel,
-                retained
-        );
+        final PubrelWithRetained pubrelWithRetained = new PubrelWithRetained(pubrel, retained);
         if (packetIdFound) {
-            messages.qos1Or2Messages.add(pubrelWithRetained);
+            messages.qos1Or2Messages.set(messageIndexInQueue, pubrelWithRetained);
+        } else {
+            // Ensure unknown PUBRELs are always first in queue
+            messages.qos1Or2Messages.addFirst(pubrelWithRetained);
         }
         increaseMessagesMemory(pubrelWithRetained.getEstimatedSize());
         return replacedId;
@@ -585,11 +472,7 @@ public class ClientQueueMemoryLocalPersistence
      */
     @Override
     @ExecuteInSingleWriter
-    public @Nullable String remove(
-            final @NotNull String queueId,
-            final int packetId,
-            final int bucketIndex
-    ) {
+    public @Nullable String remove(final @NotNull String queueId, final int packetId, final int bucketIndex) {
         return remove(queueId, packetId, null, bucketIndex);
     }
 
@@ -599,11 +482,8 @@ public class ClientQueueMemoryLocalPersistence
     @Override
     @ExecuteInSingleWriter
     public @Nullable String remove(
-            final @NotNull String queueId,
-            final int packetId,
-            final @Nullable String uniqueId,
-            final int bucketIndex
-    ) {
+            final @NotNull String queueId, final int packetId, final @Nullable String uniqueId, final int bucketIndex) {
+
         checkNotNull(queueId, "client id must not be null");
         ThreadPreConditions.startsWith(SINGLE_WRITER_THREAD_PREFIX);
 
@@ -637,26 +517,19 @@ public class ClientQueueMemoryLocalPersistence
         return null;
     }
 
+
     /**
      * {@inheritDoc}
      */
     @Override
     @ExecuteInSingleWriter
-    public int size(
-            final @NotNull String queueId,
-            final boolean shared,
-            final int bucketIndex
-    ) {
+    public int size(final @NotNull String queueId, final boolean shared, final int bucketIndex) {
         checkNotNull(queueId, "Queue ID must not be null");
         ThreadPreConditions.startsWith(SINGLE_WRITER_THREAD_PREFIX); // QueueSizes are not thread save
 
-        final Map<String, Messages> bucket = shared
-                ? sharedBuckets[bucketIndex]
-                : buckets[bucketIndex];
+        final Map<String, Messages> bucket = shared ? sharedBuckets[bucketIndex] : buckets[bucketIndex];
         final Messages messages = bucket.get(queueId);
-        return (messages == null)
-                ? 0
-                : (messages.qos1Or2Messages.size() + messages.qos0Messages.size());
+        return (messages == null) ? 0 : (messages.qos1Or2Messages.size() + messages.qos0Messages.size());
     }
 
     /**
@@ -664,17 +537,11 @@ public class ClientQueueMemoryLocalPersistence
      */
     @Override
     @ExecuteInSingleWriter
-    public int qos0Size(
-            final @NotNull String queueId,
-            final boolean shared,
-            final int bucketIndex
-    ) {
+    public int qos0Size(final @NotNull String queueId, final boolean shared, final int bucketIndex) {
         checkNotNull(queueId, "Queue ID must not be null");
         ThreadPreConditions.startsWith(SINGLE_WRITER_THREAD_PREFIX); // QueueSizes are not thread save
 
-        final Map<String, Messages> bucket = shared
-                ? sharedBuckets[bucketIndex]
-                : buckets[bucketIndex];
+        final Map<String, Messages> bucket = shared ? sharedBuckets[bucketIndex] : buckets[bucketIndex];
         final Messages messages = bucket.get(queueId);
         return (messages == null) ? 0 : messages.qos0Messages.size();
     }
@@ -684,17 +551,11 @@ public class ClientQueueMemoryLocalPersistence
      */
     @Override
     @ExecuteInSingleWriter
-    public void clear(
-            final @NotNull String queueId,
-            final boolean shared,
-            final int bucketIndex
-    ) {
+    public void clear(final @NotNull String queueId, final boolean shared, final int bucketIndex) {
         checkNotNull(queueId, "Queue ID must not be null");
         ThreadPreConditions.startsWith(SINGLE_WRITER_THREAD_PREFIX);
 
-        final Map<String, Messages> bucket = shared
-                ? sharedBuckets[bucketIndex]
-                : buckets[bucketIndex];
+        final Map<String, Messages> bucket = shared ? sharedBuckets[bucketIndex] : buckets[bucketIndex];
         final Messages messages = bucket.remove(queueId);
         if (messages == null) {
             return;
@@ -702,9 +563,7 @@ public class ClientQueueMemoryLocalPersistence
 
         for (final MessageWithID messageWithID : messages.qos1Or2Messages) {
             if (messageWithID instanceof PublishWithRetained) {
-                payloadPersistence.decrementReferenceCounter(
-                        ((PublishWithRetained) messageWithID).getPublishId()
-                );
+                payloadPersistence.decrementReferenceCounter(((PublishWithRetained) messageWithID).getPublishId());
             }
             increaseMessagesMemory(-getMessageSize(messageWithID));
         }
@@ -713,8 +572,7 @@ public class ClientQueueMemoryLocalPersistence
             payloadPersistence.decrementReferenceCounter(qos0Message.getPublishId());
             final int estimatedSize = qos0Message.getEstimatedSize();
             increaseQos0MessagesMemory(-estimatedSize);
-            // increaseClientQos0MessagesMemory not necessary as messages are removed
-            // completely
+            // increaseClientQos0MessagesMemory not necessary as messages are removed completely
             increaseMessagesMemory(-estimatedSize);
         }
     }
@@ -724,29 +582,20 @@ public class ClientQueueMemoryLocalPersistence
      */
     @Override
     @ExecuteInSingleWriter
-    public void removeAllQos0Messages(
-            final @NotNull String queueId,
-            final boolean shared,
-            final int bucketIndex
-    ) {
+    public void removeAllQos0Messages(final @NotNull String queueId, final boolean shared, final int bucketIndex) {
         checkNotNull(queueId, "Queue id must not be null");
         ThreadPreConditions.startsWith(SINGLE_WRITER_THREAD_PREFIX);
 
-        final Map<String, Messages> bucket = shared
-                ? sharedBuckets[bucketIndex]
-                : buckets[bucketIndex];
+        final Map<String, Messages> bucket = shared ? sharedBuckets[bucketIndex] : buckets[bucketIndex];
         final Messages messages = bucket.get(queueId);
         if (messages == null) {
             return;
         }
 
         for (final PublishWithRetained publishWithRetained : messages.qos0Messages) {
-            payloadPersistence.decrementReferenceCounter(
-                    publishWithRetained.getPublishId()
-            );
+            payloadPersistence.decrementReferenceCounter(publishWithRetained.getPublishId());
             increaseQos0MessagesMemory(-publishWithRetained.getEstimatedSize());
-            // increaseClientQos0MessagesMemory not necessary as messages.qos0Memory = 0
-            // below
+            // increaseClientQos0MessagesMemory not necessary as messages.qos0Memory = 0 below
             increaseMessagesMemory(-publishWithRetained.getEstimatedSize());
         }
         messages.qos0Messages.clear();
@@ -776,10 +625,8 @@ public class ClientQueueMemoryLocalPersistence
     @Override
     @ExecuteInSingleWriter
     public void removeShared(
-            final @NotNull String sharedSubscription,
-            final @NotNull String uniqueId,
-            final int bucketIndex
-    ) {
+            final @NotNull String sharedSubscription, final @NotNull String uniqueId, final int bucketIndex) {
+
         checkNotNull(sharedSubscription, "Shared subscription must not be null");
         checkNotNull(uniqueId, "Unique id must not be null");
         ThreadPreConditions.startsWith(SINGLE_WRITER_THREAD_PREFIX);
@@ -814,10 +661,8 @@ public class ClientQueueMemoryLocalPersistence
     @Override
     @ExecuteInSingleWriter
     public void removeInFlightMarker(
-            final @NotNull String sharedSubscription,
-            final @NotNull String uniqueId,
-            final int bucketIndex
-    ) {
+            final @NotNull String sharedSubscription, final @NotNull String uniqueId, final int bucketIndex) {
+
         checkNotNull(sharedSubscription, "Shared subscription must not be null");
         checkNotNull(uniqueId, "Unique id must not be null");
         ThreadPreConditions.startsWith(SINGLE_WRITER_THREAD_PREFIX);
@@ -871,148 +716,101 @@ public class ClientQueueMemoryLocalPersistence
     }
 
     private void logMessageDropped(
-            final @NotNull PUBLISH publish,
-            final boolean shared,
-            final @NotNull String queueId
-    ) {
+            final @NotNull PUBLISH publish, final boolean shared, final @NotNull String queueId) {
+
         if (shared) {
-            messageDroppedService.queueFullShared(
-                    queueId,
-                    publish.getTopic(),
-                    publish.getQoS().getQosNumber()
-            );
+            messageDroppedService.queueFullShared(queueId, publish.getTopic(), publish.getQoS().getQosNumber());
         } else {
-            messageDroppedService.queueFull(
-                    queueId,
-                    publish.getTopic(),
-                    publish.getQoS().getQosNumber()
-            );
+            messageDroppedService.queueFull(queueId, publish.getTopic(), publish.getQoS().getQosNumber());
         }
     }
 
     /**
-     * @param size the amount of bytes the currently used qos 0 memory will be
-     *             increased by. May be negative.
+     * @param size the amount of bytes the currently used qos 0 memory will be increased by. May be negative.
      */
     private void increaseQos0MessagesMemory(final int size) {
         if (size < 0) {
-            qos0MessagesMemory.addAndGet(
-                    size - ObjectMemoryEstimation.linkedListNodeOverhead()
-            );
+            qos0MessagesMemory.addAndGet(size - ObjectMemoryEstimation.linkedListNodeOverhead());
         } else {
-            qos0MessagesMemory.addAndGet(
-                    size + ObjectMemoryEstimation.linkedListNodeOverhead()
-            );
+            qos0MessagesMemory.addAndGet(size + ObjectMemoryEstimation.linkedListNodeOverhead());
         }
     }
 
     /**
-     * @param size the amount of bytes the currently used memory will be increased
-     *             by. May be negative.
+     * @param size the amount of bytes the currently used memory will be increased by. May be negative.
      */
     private void increaseMessagesMemory(final int size) {
         if (size < 0) {
-            totalMemorySize.addAndGet(
-                    size - ObjectMemoryEstimation.linkedListNodeOverhead()
-            );
+            totalMemorySize.addAndGet(size - ObjectMemoryEstimation.linkedListNodeOverhead());
         } else {
-            totalMemorySize.addAndGet(
-                    size + ObjectMemoryEstimation.linkedListNodeOverhead()
-            );
+            totalMemorySize.addAndGet(size + ObjectMemoryEstimation.linkedListNodeOverhead());
         }
     }
 
     /**
-     * @param size the amount of bytes the currently used qos 0 memory will be
-     *             increased by. May be negative.
+     * @param size the amount of bytes the currently used qos 0 memory will be increased by. May be negative.
      */
-    private void increaseClientQos0MessagesMemory(
-            final @NotNull Messages messages,
-            final int size
-    ) {
+    private void increaseClientQos0MessagesMemory(final @NotNull Messages messages, final int size) {
         if (size < 0) {
-            messages.qos0Memory +=
-                    size - ObjectMemoryEstimation.linkedListNodeOverhead();
+            messages.qos0Memory += size - ObjectMemoryEstimation.linkedListNodeOverhead();
         } else {
-            messages.qos0Memory +=
-                    size + ObjectMemoryEstimation.linkedListNodeOverhead();
+            messages.qos0Memory += size + ObjectMemoryEstimation.linkedListNodeOverhead();
         }
         if (messages.qos0Memory < 0) {
             messages.qos0Memory = 0;
         }
     }
 
-
     /**
-     * Discards the message if it exists.
-     *
-     * @param queueId  queueId
-     * @param shared   if the topic is shared
-     * @param messages all the messages
      * @return true if a message was discarded, else false
      */
-    private boolean discardPublishWithRetained(
+    private boolean discardOldest(
             final @NotNull String queueId,
             final boolean shared,
             final @NotNull Messages messages,
-            final @NotNull PublishWithRetained publishWithRetained
-    ) {
+            final boolean retainedOnly) {
 
-        if (publishWithRetained == null) {
-            return false;
-        } else if (messages.qos0Messages.contains(publishWithRetained)) {
-            logAndDecrementPayloadReference(
-                    publishWithRetained,
-                    shared,
-                    queueId
-            );
-            messages.qos0Messages.remove(publishWithRetained);
-            return true;
-        } else if (messages.qos1Or2Messages.contains(publishWithRetained)) {
-            logAndDecrementPayloadReference(
-                    publishWithRetained,
-                    shared,
-                    queueId
-            );
-            if (isRetained(publishWithRetained)) {
-                messages.retainedQos1Or2Messages--;
+        final Iterator<MessageWithID> iterator = messages.qos1Or2Messages.iterator();
+        while (iterator.hasNext()) {
+            final MessageWithID messageWithID = iterator.next();
+            if (!(messageWithID instanceof PublishWithRetained)) {
+                continue;
+            }
+            final PublishWithRetained publish = (PublishWithRetained) messageWithID;
+            // we must no discard inflight messages
+            if (publish.getPacketIdentifier() != NO_PACKET_ID) {
+                continue;
             }
-            increaseMessagesMemory(-getMessageSize(publishWithRetained));
-            messages.qos1Or2Messages.remove(publishWithRetained);
+            // Messages that are queued as retained messages are not discarded,
+            // otherwise a client could only receive a limited amount of retained messages per subscription.
+            if ((retainedOnly && !publish.retained) || (!retainedOnly && publish.retained)) {
+                continue;
+            }
+            logAndDecrementPayloadReference(publish, shared, queueId);
+            iterator.remove();
             return true;
         }
-
         return false;
+
     }
 
     private void logAndDecrementPayloadReference(
-            final @NotNull PUBLISH publish,
-            final boolean shared,
-            final @NotNull String queueId
-    ) {
+            final @NotNull PUBLISH publish, final boolean shared, final @NotNull String queueId) {
+
         logMessageDropped(publish, shared, queueId);
         payloadPersistence.decrementReferenceCounter(publish.getPublishId());
     }
 
     private void cleanExpiredMessages(final @NotNull Messages messages) {
+
         final Iterator<PublishWithRetained> iterator = messages.qos0Messages.iterator();
         while (iterator.hasNext()) {
             final PublishWithRetained publishWithRetained = iterator.next();
-            if (
-                    PublishUtil.checkExpiry(
-                            publishWithRetained.getTimestamp(),
-                            publishWithRetained.getMessageExpiryInterval()
-                    )
-            ) {
+            if (PublishUtil.checkExpiry(publishWithRetained.getTimestamp(), publishWithRetained.getMessageExpiryInterval())) {
                 increaseQos0MessagesMemory(-publishWithRetained.getEstimatedSize());
-                increaseClientQos0MessagesMemory(
-                        messages,
-                        -publishWithRetained.getEstimatedSize()
-                );
+                increaseClientQos0MessagesMemory(messages, -publishWithRetained.getEstimatedSize());
                 increaseMessagesMemory(-publishWithRetained.getEstimatedSize());
-                payloadPersistence.decrementReferenceCounter(
-                        publishWithRetained.getPublishId()
-                );
+                payloadPersistence.decrementReferenceCounter(publishWithRetained.getPublishId());
                 iterator.remove();
             }
         }
@@ -1025,18 +823,10 @@ public class ClientQueueMemoryLocalPersistence
                 if (!InternalConfigurations.EXPIRE_INFLIGHT_PUBRELS) {
                     continue;
                 }
-                if (
-                        pubrel.getExpiryInterval() == null ||
-                                pubrel.getPublishTimestamp() == null
-                ) {
+                if (pubrel.getExpiryInterval() == null || pubrel.getPublishTimestamp() == null) {
                     continue;
                 }
-                if (
-                        !PublishUtil.checkExpiry(
-                                pubrel.getPublishTimestamp(),
-                                pubrel.getExpiryInterval()
-                        )
-                ) {
+                if (!PublishUtil.checkExpiry(pubrel.getPublishTimestamp(), pubrel.getExpiryInterval())) {
                     continue;
                 }
                 if (pubrel.retained) {
@@ -1044,15 +834,12 @@ public class ClientQueueMemoryLocalPersistence
                 }
                 increaseMessagesMemory(-pubrel.getEstimatedSize());
                 qos12iterator.remove();
+
             } else if (messageWithID instanceof PublishWithRetained) {
                 final PublishWithRetained publish = (PublishWithRetained) messageWithID;
-                final boolean expireInflight =
-                        InternalConfigurations.EXPIRE_INFLIGHT_MESSAGES;
-                final boolean isInflight =
-                        publish.getQoS() == QoS.EXACTLY_ONCE &&
-                                publish.getPacketIdentifier() > 0;
-                final boolean drop =
-                        PublishUtil.checkExpiry(publish) && (!isInflight || expireInflight);
+                final boolean expireInflight = InternalConfigurations.EXPIRE_INFLIGHT_MESSAGES;
+                final boolean isInflight = publish.getQoS() == QoS.EXACTLY_ONCE && publish.getPacketIdentifier() > 0;
+                final boolean drop = PublishUtil.checkExpiry(publish) && (!isInflight || expireInflight);
                 if (drop) {
                     payloadPersistence.decrementReferenceCounter(publish.getPublishId());
                     if (publish.retained) {
@@ -1065,53 +852,41 @@ public class ClientQueueMemoryLocalPersistence
         }
     }
 
+    @VisibleForTesting
     static class PublishWithRetained extends PUBLISH {
 
         private final boolean retained;
 
-        PublishWithRetained(
-                final @NotNull PUBLISH publish,
-                final boolean retained
-        ) {
+        PublishWithRetained(final @NotNull PUBLISH publish, final boolean retained) {
             super(publish, publish.getPersistence());
             this.retained = retained;
         }
 
         int getEstimatedSize() {
-            return (
-                    getEstimatedSizeInMemory() + // publish
-                            ObjectMemoryEstimation.objectShellSize() + // the object itself
-                            ObjectMemoryEstimation.booleanSize()
-            ); // retain flag
+            return getEstimatedSizeInMemory()  // publish
+                    + ObjectMemoryEstimation.objectShellSize() // the object itself
+                    + ObjectMemoryEstimation.booleanSize(); // retain flag
         }
     }
 
-    static class PubrelWithRetained extends PUBREL {
+    private static class PubrelWithRetained extends PUBREL {
 
         private final boolean retained;
 
-        private PubrelWithRetained(
-                final @NotNull PUBREL pubrel,
-                final boolean retained
-        ) {
-            super(
-                    pubrel.getPacketIdentifier(),
+        private PubrelWithRetained(final @NotNull PUBREL pubrel, final boolean retained) {
+            super(pubrel.getPacketIdentifier(),
                     pubrel.getReasonCode(),
                     pubrel.getReasonString(),
                     pubrel.getUserProperties(),
                     pubrel.getPublishTimestamp(),
-                    pubrel.getExpiryInterval()
-            );
+                    pubrel.getExpiryInterval());
             this.retained = retained;
         }
 
         private int getEstimatedSize() {
-            return (
-                    getEstimatedSizeInMemory() + // publish
-                            ObjectMemoryEstimation.objectShellSize() + // the object itself
-                            ObjectMemoryEstimation.booleanSize()
-            ); // retain flag
+            return getEstimatedSizeInMemory()  // publish
+                    + ObjectMemoryEstimation.objectShellSize() // the object itself
+                    + ObjectMemoryEstimation.booleanSize(); // retain flag
         }
     }
-
 }
diff --git a/broker/src/main/java/com/hivemq/util/PublishComparator.java b/broker/src/main/java/com/hivemq/util/PublishComparator.java
deleted file mode 100644
index f986478..0000000
--- a/broker/src/main/java/com/hivemq/util/PublishComparator.java
+++ /dev/null
@@ -1,63 +0,0 @@
-/*
- * Copyright 2019-present HiveMQ GmbH
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.hivemq.util;
-
-import com.hivemq.configuration.service.TopicPriorityConfigurationService;
-import com.hivemq.extensions.priority.TopicPriority;
-import com.hivemq.mqtt.message.publish.PUBLISH;
-import com.hivemq.mqtt.topic.TokenizedTopicMatcher;
-import com.hivemq.mqtt.topic.TopicMatcher;
-
-import javax.inject.Inject;
-import java.util.Comparator;
-import java.util.Optional;
-
-public class PublishComparator implements Comparator<PUBLISH> {
-
-    private final TopicPriorityConfigurationService topicPriorityConfigurationService;
-    private final TokenizedTopicMatcher topicMatcher;
-
-    @Inject
-    public PublishComparator(TopicPriorityConfigurationService topicPriorityConfigurationService, TokenizedTopicMatcher topicMatcher) {
-        this.topicPriorityConfigurationService = topicPriorityConfigurationService;
-        this.topicMatcher = topicMatcher;
-    }
-
-    @Override
-    public int compare(PUBLISH t1, PUBLISH t2) {
-        // Find priorities matching the topic of the messages
-        Optional<TopicPriority> p1 = topicPriorityConfigurationService.getPriorities()
-                .stream()
-                .filter(p -> topicMatcher.matches(p.getTopicFilter(), t1.getTopic()))
-                .max(Comparator.comparingInt(c -> c.getTopicFilter().length()));
-
-        Optional<TopicPriority> p2 = topicPriorityConfigurationService.getPriorities()
-                .stream()
-                .filter(p -> topicMatcher.matches(p.getTopicFilter(), t2.getTopic()))
-                .max(Comparator.comparingInt(c -> c.getTopicFilter().length()));
-
-        if(p1.isEmpty() && p2.isPresent()) return 1; // t1 Does not have a priority, while t2 does
-        if(p1.isPresent() && p2.isEmpty()) return -1; // t1 Does have a priority, while t2 does not
-        if(p1.isEmpty() && p2.isEmpty()) return 0; // They both do not have priorities
-
-
-        // If they are not the same priority class use it to compare
-        int priorityClassComparison = p1.get().getPriorityClass().compareTo(p2.get().getPriorityClass());
-        if( priorityClassComparison != 0) return priorityClassComparison;
-
-        return p2.get().getPriority() - p1.get().getPriority();
-    }
-}
diff --git a/broker/src/main/resources/config.xml b/broker/src/main/resources/config.xml
index 9c79094..f03ea38 100644
--- a/broker/src/main/resources/config.xml
+++ b/broker/src/main/resources/config.xml
@@ -23,18 +23,6 @@
             <port>1883</port>
             <bind-address>0.0.0.0</bind-address>
         </tcp-listener>
-
-        <websocket-listener>
-            <port>8000</port>
-            <bind-address>0.0.0.0</bind-address>
-            <path>/mqtt</path>
-            <name>my-websocket-listener</name>
-            <subprotocols>
-                <subprotocol>mqttv3.1</subprotocol>
-                <subprotocol>mqtt</subprotocol>
-            </subprotocols>
-            <allow-extensions>true</allow-extensions>
-        </websocket-listener>
     </listeners>
 
     <anonymous-usage-statistics>
diff --git a/broker/src/packaging/conf/config.xml b/broker/src/packaging/conf/config.xml
deleted file mode 100644
index b6990ac..0000000
--- a/broker/src/packaging/conf/config.xml
+++ /dev/null
@@ -1,24 +0,0 @@
-<hivemq>
-    <listeners>
-        <tcp-listener>
-            <port>1883</port>
-            <bind-address>0.0.0.0</bind-address>
-        </tcp-listener>
-    </listeners>
-    <persistence>
-        <mode>in-memory</mode>
-    </persistence>
-
-    <priorities>
-        <priority>
-            <filter>flash/#</filter>
-            <priority>100</priority>
-            <priority-class>FLASH</priority-class>
-        </priority>
-        <priority>
-            <filter>immediate/#</filter>
-            <priority>100</priority>
-            <priority-class>IMMEDIATE</priority-class>
-        </priority>
-    </priorities>
-</hivemq>
\ No newline at end of file
diff --git a/broker/src/test/java/com/hivemq/bootstrap/netty/ChannelDependenciesTest.java b/broker/src/test/java/com/hivemq/bootstrap/netty/ChannelDependenciesTest.java
index f126cc3..19f7ce7 100644
--- a/broker/src/test/java/com/hivemq/bootstrap/netty/ChannelDependenciesTest.java
+++ b/broker/src/test/java/com/hivemq/bootstrap/netty/ChannelDependenciesTest.java
@@ -36,7 +36,6 @@ import com.hivemq.mqtt.handler.ping.PingRequestHandler;
 import com.hivemq.mqtt.handler.publish.MessageExpiryHandler;
 import com.hivemq.mqtt.handler.subscribe.SubscribeHandler;
 import com.hivemq.mqtt.handler.unsubscribe.UnsubscribeHandler;
-import com.hivemq.mqtt.topic.TopicMatcher;
 import com.hivemq.security.ssl.SslParameterHandler;
 import io.netty.channel.group.ChannelGroup;
 import io.netty.handler.traffic.GlobalTrafficShapingHandler;
@@ -140,9 +139,6 @@ public class ChannelDependenciesTest {
     @Mock
     private GlobalMQTTMessageCounter globalMQTTMessageCounter;
 
-    @Mock
-    private TopicMatcher topicMatcher;
-
     @Before
     public void setUp() throws Exception {
 
@@ -176,8 +172,7 @@ public class ChannelDependenciesTest {
                 () -> messageExpiryHandler,
                 mqttServerDisconnector,
                 interceptorHandler,
-                globalMQTTMessageCounter,
-                topicMatcher);
+                globalMQTTMessageCounter);
 
     }
 
diff --git a/broker/src/test/java/com/hivemq/codec/decoder/mqtt5/Mqtt5DisconnectDecoderTest.java b/broker/src/test/java/com/hivemq/codec/decoder/mqtt5/Mqtt5DisconnectDecoderTest.java
index 5bb2ce1..b2532ed 100644
--- a/broker/src/test/java/com/hivemq/codec/decoder/mqtt5/Mqtt5DisconnectDecoderTest.java
+++ b/broker/src/test/java/com/hivemq/codec/decoder/mqtt5/Mqtt5DisconnectDecoderTest.java
@@ -17,7 +17,6 @@ package com.hivemq.codec.decoder.mqtt5;
 
 import com.google.common.collect.ImmutableList;
 import com.hivemq.configuration.service.FullConfigurationService;
-import com.hivemq.configuration.service.TopicPriorityConfigurationService;
 import com.hivemq.configuration.service.SecurityConfigurationService;
 import com.hivemq.extension.sdk.api.annotations.NotNull;
 import com.hivemq.mqtt.message.ProtocolVersion;
@@ -25,7 +24,6 @@ import com.hivemq.mqtt.message.disconnect.DISCONNECT;
 import com.hivemq.mqtt.message.dropping.MessageDroppedService;
 import com.hivemq.mqtt.message.mqtt5.MqttUserProperty;
 import com.hivemq.mqtt.message.reason.Mqtt5DisconnectReasonCode;
-import com.hivemq.mqtt.topic.TopicMatcher;
 import com.hivemq.util.ChannelAttributes;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.UnpooledByteBufAllocator;
@@ -52,12 +50,6 @@ public class Mqtt5DisconnectDecoderTest extends AbstractMqtt5DecoderTest {
     @Mock
     private SecurityConfigurationService securityConfigurationService;
 
-    @Mock
-    private TopicPriorityConfigurationService topicPriorityConfigurationService;
-
-    @Mock
-    private TopicMatcher topicMatcher;
-
     @Before
     public void before() {
         MockitoAnnotations.initMocks(this);
@@ -162,11 +154,7 @@ public class Mqtt5DisconnectDecoderTest extends AbstractMqtt5DecoderTest {
 
         //Now Encode
 
-        channel = new EmbeddedChannel(new TestMessageEncoder(
-                messageDroppedService,
-                securityConfigurationService,
-                topicPriorityConfigurationService,
-                topicMatcher));
+        channel = new EmbeddedChannel(new TestMessageEncoder(messageDroppedService, securityConfigurationService));
         channel.config().setAllocator(new UnpooledByteBufAllocator(false));
         channel.attr(ChannelAttributes.MQTT_VERSION).set(ProtocolVersion.MQTTv5);
 
diff --git a/broker/src/test/java/com/hivemq/codec/encoder/MQTTMessageEncoderTest.java b/broker/src/test/java/com/hivemq/codec/encoder/MQTTMessageEncoderTest.java
index ce080ef..5537bc2 100644
--- a/broker/src/test/java/com/hivemq/codec/encoder/MQTTMessageEncoderTest.java
+++ b/broker/src/test/java/com/hivemq/codec/encoder/MQTTMessageEncoderTest.java
@@ -15,7 +15,6 @@
  */
 package com.hivemq.codec.encoder;
 
-import com.hivemq.configuration.service.TopicPriorityConfigurationService;
 import com.hivemq.configuration.service.SecurityConfigurationService;
 import com.hivemq.mqtt.message.PINGRESP;
 import com.hivemq.mqtt.message.ProtocolVersion;
@@ -31,14 +30,12 @@ import com.hivemq.mqtt.message.pubrel.PUBREL;
 import com.hivemq.mqtt.message.reason.Mqtt5SubAckReasonCode;
 import com.hivemq.mqtt.message.suback.SUBACK;
 import com.hivemq.mqtt.message.unsuback.UNSUBACK;
-import com.hivemq.mqtt.topic.TopicMatcher;
 import com.hivemq.util.ChannelAttributes;
 import io.netty.buffer.ByteBuf;
 import io.netty.channel.embedded.EmbeddedChannel;
 import org.junit.Before;
 import org.junit.Test;
 import org.mockito.Mock;
-import org.mockito.MockitoAnnotations;
 import util.TestMessageEncoder;
 import util.TestMessageUtil;
 
@@ -56,20 +53,9 @@ public class MQTTMessageEncoderTest {
     @Mock
     private SecurityConfigurationService securityConfigurationService;
 
-    @Mock
-    private TopicPriorityConfigurationService topicPriorityConfigurationService;
-
-    @Mock
-    private TopicMatcher topicMatcher;
-
     @Before
     public void setUp() throws Exception {
-        MockitoAnnotations.initMocks(this);
-        channel = new EmbeddedChannel(new TestMessageEncoder(
-                messageDroppedService,
-                securityConfigurationService,
-                topicPriorityConfigurationService,
-                topicMatcher));
+        channel = new EmbeddedChannel(new TestMessageEncoder(messageDroppedService, securityConfigurationService));
         channel.attr(ChannelAttributes.MQTT_VERSION).set(ProtocolVersion.MQTTv3_1);
     }
 
diff --git a/broker/src/test/java/com/hivemq/configuration/ioc/ConfigurationModuleTest.java b/broker/src/test/java/com/hivemq/configuration/ioc/ConfigurationModuleTest.java
index 5dd17e8..220e3b7 100644
--- a/broker/src/test/java/com/hivemq/configuration/ioc/ConfigurationModuleTest.java
+++ b/broker/src/test/java/com/hivemq/configuration/ioc/ConfigurationModuleTest.java
@@ -21,7 +21,10 @@ import com.google.inject.Injector;
 import com.hivemq.bootstrap.ioc.SystemInformationModule;
 import com.hivemq.configuration.HivemqId;
 import com.hivemq.configuration.info.SystemInformationImpl;
-import com.hivemq.configuration.service.*;
+import com.hivemq.configuration.service.ConfigurationService;
+import com.hivemq.configuration.service.FullConfigurationService;
+import com.hivemq.configuration.service.MqttConfigurationService;
+import com.hivemq.configuration.service.RestrictionsConfigurationService;
 import com.hivemq.configuration.service.impl.listener.ListenerConfigurationService;
 import com.hivemq.persistence.clientsession.SharedSubscriptionService;
 import org.junit.Before;
@@ -118,14 +121,4 @@ public class ConfigurationModuleTest {
         assertSame(configurationService.mqttConfiguration(), injector.getInstance(MqttConfigurationService.class));
         assertSame(configurationService.restrictionsConfiguration(), injector.getInstance(RestrictionsConfigurationService.class));
     }
-
-    @Test
-    public void test_topic_configuration_service_singleton() throws Exception {
-
-        final TopicPriorityConfigurationService instance = injector.getInstance(TopicPriorityConfigurationService.class);
-        final TopicPriorityConfigurationService instance2 = injector.getInstance(TopicPriorityConfigurationService.class);
-
-        assertSame(instance, instance2);
-        assertSame(testConfigurationBootstrap.getTopicConfigurationService(), instance);
-    }
 }
\ No newline at end of file
diff --git a/broker/src/test/java/com/hivemq/configuration/reader/AbstractConfigurationTest.java b/broker/src/test/java/com/hivemq/configuration/reader/AbstractConfigurationTest.java
index 98772c8..9b74a42 100644
--- a/broker/src/test/java/com/hivemq/configuration/reader/AbstractConfigurationTest.java
+++ b/broker/src/test/java/com/hivemq/configuration/reader/AbstractConfigurationTest.java
@@ -17,8 +17,14 @@ package com.hivemq.configuration.reader;
 
 import com.hivemq.configuration.info.SystemInformation;
 import com.hivemq.configuration.info.SystemInformationImpl;
-import com.hivemq.configuration.service.*;
-import com.hivemq.configuration.service.impl.*;
+import com.hivemq.configuration.service.MqttConfigurationService;
+import com.hivemq.configuration.service.PersistenceConfigurationService;
+import com.hivemq.configuration.service.RestrictionsConfigurationService;
+import com.hivemq.configuration.service.SecurityConfigurationService;
+import com.hivemq.configuration.service.impl.MqttConfigurationServiceImpl;
+import com.hivemq.configuration.service.impl.PersistenceConfigurationServiceImpl;
+import com.hivemq.configuration.service.impl.RestrictionsConfigurationServiceImpl;
+import com.hivemq.configuration.service.impl.SecurityConfigurationServiceImpl;
 import com.hivemq.configuration.service.impl.listener.ListenerConfigurationService;
 import com.hivemq.configuration.service.impl.listener.ListenerConfigurationServiceImpl;
 import com.hivemq.statistics.UsageStatisticsConfig;
@@ -52,7 +58,6 @@ public class AbstractConfigurationTest {
     UsageStatisticsConfig usageStatisticsConfig;
     SystemInformation systemInformation;
     PersistenceConfigurationService persistenceConfigurationService;
-    TopicPriorityConfigurationService topicPriorityConfigurationService;
 
     @Before
     public void setUp() throws Exception {
@@ -66,11 +71,9 @@ public class AbstractConfigurationTest {
         usageStatisticsConfig = new UsageStatisticsConfigImpl();
         systemInformation = new SystemInformationImpl(false);
         persistenceConfigurationService = new PersistenceConfigurationServiceImpl();
-        topicPriorityConfigurationService = new TopicPriorityConfigurationServiceImpl();
 
         when(envVarUtil.replaceEnvironmentVariablePlaceholders(anyString())).thenCallRealMethod();
         final ConfigurationFile configurationFile = new ConfigurationFile(xmlFile);
-
         reader = new ConfigFileReader(
                 configurationFile,
                 new RestrictionConfigurator(restrictionsConfigurationService),
@@ -79,8 +82,7 @@ public class AbstractConfigurationTest {
                 new UsageStatisticsConfigurator(usageStatisticsConfig),
                 new MqttConfigurator(mqttConfigurationService),
                 new ListenerConfigurator(listenerConfigurationService, systemInformation),
-                new PersistenceConfigurator(persistenceConfigurationService),
-                new TopicPriorirtyConfigurator(topicPriorityConfigurationService));
+                new PersistenceConfigurator(persistenceConfigurationService));
     }
 
 }
diff --git a/broker/src/test/java/com/hivemq/configuration/reader/ConfigFileReaderTest.java b/broker/src/test/java/com/hivemq/configuration/reader/ConfigFileReaderTest.java
index d9befef..2cc7720 100644
--- a/broker/src/test/java/com/hivemq/configuration/reader/ConfigFileReaderTest.java
+++ b/broker/src/test/java/com/hivemq/configuration/reader/ConfigFileReaderTest.java
@@ -20,7 +20,10 @@ import com.hivemq.configuration.entity.PersistenceEntity;
 import com.hivemq.configuration.entity.RestrictionsEntity;
 import com.hivemq.configuration.entity.SecurityConfigEntity;
 import com.hivemq.configuration.info.SystemInformation;
-import com.hivemq.configuration.service.*;
+import com.hivemq.configuration.service.MqttConfigurationService;
+import com.hivemq.configuration.service.PersistenceConfigurationService;
+import com.hivemq.configuration.service.RestrictionsConfigurationService;
+import com.hivemq.configuration.service.SecurityConfigurationService;
 import com.hivemq.configuration.service.impl.listener.ListenerConfigurationService;
 import com.hivemq.configuration.service.impl.listener.ListenerConfigurationServiceImpl;
 import com.hivemq.mqtt.message.QoS;
@@ -59,12 +62,6 @@ public class ConfigFileReaderTest {
 
     private ListenerConfigurationService listenerConfigurationService;
 
-    /**
-     * Added by Christoffer Stensrud
-     */
-    @Mock
-    private TopicPriorityConfigurationService topicPriorityConfigurationService;
-
     ConfigFileReader reader;
 
     @Before
@@ -81,12 +78,7 @@ public class ConfigFileReaderTest {
                 new UsageStatisticsConfigurator(usageStatisticsConfig),
                 new MqttConfigurator(mqttConfigurationService),
                 new ListenerConfigurator(listenerConfigurationService, systemInformation),
-                new PersistenceConfigurator(persistenceConfigurationService),
-
-                /**
-                 * Added by Christoffer Stensrud
-                 */
-                new TopicPriorirtyConfigurator(topicPriorityConfigurationService));
+                new PersistenceConfigurator(persistenceConfigurationService));
     }
 
     @Test
diff --git a/broker/src/test/java/com/hivemq/configuration/reader/TopicConfiguratorTest.java b/broker/src/test/java/com/hivemq/configuration/reader/TopicConfiguratorTest.java
deleted file mode 100644
index 93519b1..0000000
--- a/broker/src/test/java/com/hivemq/configuration/reader/TopicConfiguratorTest.java
+++ /dev/null
@@ -1,87 +0,0 @@
-/*
- * Copyright 2019-present HiveMQ GmbH
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.hivemq.configuration.reader;
-
-import com.google.common.io.Files;
-import org.junit.Test;
-
-import static java.nio.charset.StandardCharsets.UTF_8;
-import static org.junit.Assert.assertEquals;
-
-/**
- * Currently UNUSED
- */
-public class TopicConfiguratorTest extends AbstractConfigurationTest {
-
-/*
-    @Test
-    public void test_topics_xml() throws Exception {
-
-        final String name = "topic";
-        final int qos = 0;
-        final int priority = 1;
-        final boolean nolocal = false;
-        final boolean retainaspublished = true;
-
-        final String contents =
-                "<hivemq>" +
-                        "<topics>" +
-                        "<topic>" +
-                        "<name>"+name+"</name>"
-                        "<qos-as-int>"+qos+"</qos-as-int>"
-                        "<priority>"+priority+"</priority>"
-                        "<no-local>"+nolocal+"</no-local>"
-                        "<retain-as-published>"+retainaspublished+"</retain-as-published>"
-                        "</topic> " +
-                        "</topics>" +
-                        "</hivemq>";
-        Files.write(contents.getBytes(UTF_8), xmlFile);
-
-        reader.applyConfig();
-
-        assertEquals(maxTopics, topicConfigurationService.getTopics());
-    }
-
-    @Test
-    public void test_topics_defaults() throws Exception {
-        final String contents =
-                "<hivemq>" +
-                "</hivemq>";
-
-        Files.write(contents.getBytes(UTF_8), xmlFile);
-
-        reader.applyConfig();
-
-        assertEquals(8, topicConfigurationService.maxTopics());
-    }
-
-    @Test
-    public void test_topics_receive_max_negative_xml() throws Exception {
-        final String contents =
-                "<hivemq>" +
-                        "<topic>" +
-                        "<max-topics>-1</max-topics> " +
-                        "</topic>" +
-                        "</hivemq>";
-
-        Files.write(contents.getBytes(UTF_8), xmlFile);
-
-        reader.applyConfig();
-
-        // default is 8
-        assertEquals(8, topicConfigurationService.maxTopics());
-    }*/
-}
diff --git a/broker/src/test/java/com/hivemq/extensions/ioc/ExtensionModuleTest.java b/broker/src/test/java/com/hivemq/extensions/ioc/ExtensionModuleTest.java
index 50b9fdc..957eed5 100644
--- a/broker/src/test/java/com/hivemq/extensions/ioc/ExtensionModuleTest.java
+++ b/broker/src/test/java/com/hivemq/extensions/ioc/ExtensionModuleTest.java
@@ -51,7 +51,6 @@ import com.hivemq.mqtt.message.dropping.MessageDroppedService;
 import com.hivemq.mqtt.services.InternalPublishService;
 import com.hivemq.mqtt.services.PublishDistributor;
 import com.hivemq.mqtt.services.PublishPollService;
-import com.hivemq.mqtt.topic.TopicMatcher;
 import com.hivemq.mqtt.topic.tree.LocalTopicTree;
 import com.hivemq.mqtt.topic.tree.TopicTreeImpl;
 import com.hivemq.persistence.ChannelPersistence;
@@ -125,7 +124,6 @@ public class ExtensionModuleTest {
                 bindScope(LazySingleton.class, LazySingletonScope.get());
                 bind(MqttServerDisconnector.class).toInstance(mock(MqttServerDisconnector.class));
                 bind(MqttConnacker.class).toInstance(mock(MqttConnacker.class));
-                bind(TopicMatcher.class).toInstance(mock(TopicMatcher.class));
             }
         });
     }
diff --git a/broker/src/test/java/com/hivemq/persistence/clientqueue/ClientQueueXodusLocalPersistenceTest.java b/broker/src/test/java/com/hivemq/persistence/clientqueue/ClientQueueXodusLocalPersistenceTest.java
index f245d6f..bddb53a 100644
--- a/broker/src/test/java/com/hivemq/persistence/clientqueue/ClientQueueXodusLocalPersistenceTest.java
+++ b/broker/src/test/java/com/hivemq/persistence/clientqueue/ClientQueueXodusLocalPersistenceTest.java
@@ -293,6 +293,38 @@ public class ClientQueueXodusLocalPersistenceTest {
         assertEquals(4, messages2.size());
     }
 
+    @Test
+    public void test_read_inflight_pubrel_and_publish() {
+        final PUBREL[] pubrels = new PUBREL[4];
+        for (int i = 0; i < pubrels.length; i++) {
+            pubrels[i] = new PUBREL(i + 1);
+        }
+        for (final PUBREL pubrel : pubrels) {
+            persistence.replace("client1", pubrel, 0);
+        }
+        final PUBLISH[] publishes = new PUBLISH[4];
+        for (int i = 0; i < publishes.length; i++) {
+            publishes[i] = createPublish(10 + i, (i % 2 == 0) ? QoS.EXACTLY_ONCE : QoS.AT_LEAST_ONCE, "topic" + i);
+        }
+        for (final PUBLISH publish : publishes) {
+            persistence.add("client1", false, publish, 100L, DISCARD, false, 0);
+        }
+
+        // Assign packet ID's
+        persistence.readNew("client1", false, ImmutableIntArray.of(1, 2, 3, 4), 256000, 0);
+
+        final ImmutableList<MessageWithID> messages = persistence.readInflight("client1", false, 10, 256000, 0);
+        assertEquals(8, messages.size());
+        assertTrue(messages.get(0) instanceof PUBREL);
+        assertTrue(messages.get(1) instanceof PUBREL);
+        assertTrue(messages.get(2) instanceof PUBREL);
+        assertTrue(messages.get(3) instanceof PUBREL);
+        assertTrue(messages.get(4) instanceof PUBLISH);
+        assertTrue(messages.get(5) instanceof PUBLISH);
+        assertTrue(messages.get(6) instanceof PUBLISH);
+        assertTrue(messages.get(7) instanceof PUBLISH);
+    }
+
     @Test
     public void test_add_discard() {
         for (int i = 1; i <= 6; i++) {
diff --git a/broker/src/test/java/com/hivemq/persistence/ioc/LocalPersistenceModuleTest.java b/broker/src/test/java/com/hivemq/persistence/ioc/LocalPersistenceModuleTest.java
index e925fcd..d666b06 100644
--- a/broker/src/test/java/com/hivemq/persistence/ioc/LocalPersistenceModuleTest.java
+++ b/broker/src/test/java/com/hivemq/persistence/ioc/LocalPersistenceModuleTest.java
@@ -101,9 +101,6 @@ public class LocalPersistenceModuleTest {
     @Mock
     private PersistenceConfigurationService persistenceConfigurationService;
 
-    @Mock
-    private TopicPriorityConfigurationService topicPriorityConfigurationService;
-
     @Mock
     private Injector persistenceInjector;
 
@@ -231,7 +228,6 @@ public class LocalPersistenceModuleTest {
                         bind(RestrictionsConfigurationService.class).toInstance(new RestrictionsConfigurationServiceImpl());
                         bind(MqttConfigurationService.class).toInstance(mqttConfigurationService);
                         bind(MqttServerDisconnector.class).toInstance(mock(MqttServerDisconnector.class));
-                        bind(TopicPriorityConfigurationService.class).toInstance(topicPriorityConfigurationService);
                     }
                 });
     }
diff --git a/broker/src/test/java/com/hivemq/persistence/ioc/PersistenceMigrationModuleTest.java b/broker/src/test/java/com/hivemq/persistence/ioc/PersistenceMigrationModuleTest.java
index 11753e7..f99a7e8 100644
--- a/broker/src/test/java/com/hivemq/persistence/ioc/PersistenceMigrationModuleTest.java
+++ b/broker/src/test/java/com/hivemq/persistence/ioc/PersistenceMigrationModuleTest.java
@@ -24,8 +24,6 @@ import com.hivemq.bootstrap.ioc.lazysingleton.LazySingletonScope;
 import com.hivemq.configuration.info.SystemInformation;
 import com.hivemq.configuration.service.MqttConfigurationService;
 import com.hivemq.configuration.service.PersistenceConfigurationService;
-import com.hivemq.configuration.service.TopicPriorityConfigurationService;
-import com.hivemq.mqtt.message.subscribe.Topic;
 import com.hivemq.persistence.PersistenceStartup;
 import com.hivemq.persistence.local.memory.RetainedMessageMemoryLocalPersistence;
 import com.hivemq.persistence.payload.PublishPayloadNoopPersistenceImpl;
@@ -55,9 +53,6 @@ public class PersistenceMigrationModuleTest {
     @Mock
     private PersistenceConfigurationService persistenceConfigurationService;
 
-    @Mock
-    private TopicPriorityConfigurationService topicPriorityConfigurationService;
-
     @Before
     public void setUp() throws Exception {
         MockitoAnnotations.initMocks(this);
@@ -74,7 +69,6 @@ public class PersistenceMigrationModuleTest {
                         bind(SystemInformation.class).toInstance(systemInformation);
                         bindScope(LazySingleton.class, LazySingletonScope.get());
                         bind(MqttConfigurationService.class).toInstance(mqttConfigurationService);
-                        bind(TopicPriorityConfigurationService.class).toInstance(topicPriorityConfigurationService);
                     }
                 });
 
@@ -96,7 +90,6 @@ public class PersistenceMigrationModuleTest {
                         bind(SystemInformation.class).toInstance(systemInformation);
                         bindScope(LazySingleton.class, LazySingletonScope.get());
                         bind(MqttConfigurationService.class).toInstance(mqttConfigurationService);
-                        bind(TopicPriorityConfigurationService.class).toInstance(topicPriorityConfigurationService);
                     }
                 });
         assertTrue(injector.getInstance(PublishPayloadPersistence.class) instanceof PublishPayloadNoopPersistenceImpl);
diff --git a/broker/src/test/java/com/hivemq/persistence/local/memory/ClientQueueMemoryLocalPersistenceTest.java b/broker/src/test/java/com/hivemq/persistence/local/memory/ClientQueueMemoryLocalPersistenceTest.java
index d16933d..0c187e5 100644
--- a/broker/src/test/java/com/hivemq/persistence/local/memory/ClientQueueMemoryLocalPersistenceTest.java
+++ b/broker/src/test/java/com/hivemq/persistence/local/memory/ClientQueueMemoryLocalPersistenceTest.java
@@ -32,7 +32,6 @@ import com.hivemq.persistence.local.memory.ClientQueueMemoryLocalPersistence.Pub
 import com.hivemq.persistence.local.xodus.bucket.BucketUtils;
 import com.hivemq.persistence.payload.PublishPayloadPersistence;
 import com.hivemq.util.ObjectMemoryEstimation;
-import com.hivemq.util.PublishComparator;
 import org.apache.commons.lang3.RandomStringUtils;
 import org.junit.After;
 import org.junit.Before;
@@ -42,7 +41,6 @@ import org.junit.rules.TemporaryFolder;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
 
-import java.util.Arrays;
 import java.util.Set;
 import java.util.stream.Collectors;
 
@@ -68,10 +66,6 @@ public class ClientQueueMemoryLocalPersistenceTest {
     @Mock
     private MessageDroppedService messageDroppedService;
 
-    @Mock
-    private PublishComparator publishComparator;
-
-
     private ClientQueueMemoryLocalPersistence persistence;
 
     private final int bucketCount = 4;
@@ -91,7 +85,7 @@ public class ClientQueueMemoryLocalPersistenceTest {
         metricRegistry = new MetricRegistry();
         persistence = new ClientQueueMemoryLocalPersistence(
                 payloadPersistence,
-                messageDroppedService, metricRegistry, publishComparator);
+                messageDroppedService, metricRegistry);
     }
 
     @After
@@ -114,6 +108,62 @@ public class ClientQueueMemoryLocalPersistenceTest {
         assertEquals(publish.getTopic(), publishes.get(0).getTopic());
     }
 
+    @Test
+    public void test_readNew_moreAvailable() {
+        final PUBLISH[] publishes = new PUBLISH[4];
+        for (int i = 0; i < publishes.length; i++) {
+            publishes[i] = createPublish(10 + i, (i % 2 == 0) ? QoS.EXACTLY_ONCE : QoS.AT_LEAST_ONCE, "topic" + i);
+        }
+        final PUBLISH otherPublish = createPublish(14, QoS.EXACTLY_ONCE, "topic5");
+
+        persistence.add("client10", false, otherPublish, 100L, DISCARD, false, 0);
+        for (final PUBLISH publish : publishes) {
+            persistence.add("client1", false, publish, 100L, DISCARD, false, 0);
+        }
+        persistence.add("client01", false, otherPublish, 100L, DISCARD, false, 0);
+
+        final ImmutableIntArray packetIds = ImmutableIntArray.of(2, 3, 5);
+        final ImmutableList<PUBLISH> readPublishes = persistence.readNew("client1", false, packetIds, 256000, 0);
+
+        assertEquals(3, readPublishes.size());
+        for (int i = 0; i < packetIds.length(); i++) {
+            assertEquals(packetIds.get(i), readPublishes.get(i).getPacketIdentifier());
+            assertEquals(publishes[i].getQoS(), readPublishes.get(i).getQoS());
+            assertEquals(publishes[i].getTopic(), readPublishes.get(i).getTopic());
+        }
+    }
+
+    @Test
+    public void test_readNew_twice() {
+        final PUBLISH[] publishes = new PUBLISH[4];
+        for (int i = 0; i < publishes.length; i++) {
+            publishes[i] = createPublish(10 + i, (i % 2 == 0) ? QoS.EXACTLY_ONCE : QoS.AT_LEAST_ONCE, "topic" + i);
+        }
+        final PUBLISH otherPublish = createPublish(14, QoS.EXACTLY_ONCE, "topic5");
+
+        persistence.add("client10", false, otherPublish, 100L, DISCARD, false, 0);
+        for (final PUBLISH publish : publishes) {
+            persistence.add("client1", false, publish, 100L, DISCARD, false, 0);
+        }
+        persistence.add("client01", false, otherPublish, 100L, DISCARD, false, 0);
+
+        final ImmutableList<PUBLISH> messages1 =
+                persistence.readNew("client1", false, ImmutableIntArray.of(5), 256000, 0);
+
+        assertEquals(1, messages1.size());
+        assertEquals(5, messages1.get(0).getPacketIdentifier());
+        assertEquals("topic0", messages1.get(0).getTopic());
+
+        final ImmutableIntArray packetIds = ImmutableIntArray.of(2, 3, 4);
+        final ImmutableList<PUBLISH> messages2 = persistence.readNew("client1", false, packetIds, 256000, 0);
+
+        assertEquals(3, messages2.size());
+        for (int i = 0; i < packetIds.length(); i++) {
+            assertEquals(packetIds.get(i), messages2.get(i).getPacketIdentifier());
+            assertEquals(publishes[1 + i].getTopic(), messages2.get(i).getTopic());
+        }
+    }
+
     @Test
     public void test_readNew_qos0() {
         final PUBLISH[] publishes = new PUBLISH[4];
@@ -129,8 +179,7 @@ public class ClientQueueMemoryLocalPersistenceTest {
         assertEquals(1, persistence.size("client", false, 0));
         assertEquals(3, messages.size());
         for (int i = 0; i < 3; i++) {
-            int finalI = i;
-            assertTrue(Arrays.stream(publishes).anyMatch(x -> x.getTopic() == messages.get(finalI).getTopic()));
+            assertEquals(publishes[i].getTopic(), messages.get(i).getTopic());
         }
     }
 
@@ -156,6 +205,19 @@ public class ClientQueueMemoryLocalPersistenceTest {
         assertEquals(3, persistence.size("client", false, 0));
         assertEquals(6, messages.size());
 
+        assertEquals(0, messages.get(1).getPacketIdentifier());
+        assertEquals(QoS.AT_MOST_ONCE, messages.get(1).getQoS());
+        assertEquals(0, messages.get(3).getPacketIdentifier());
+        assertEquals(QoS.AT_MOST_ONCE, messages.get(3).getQoS());
+        assertEquals(0, messages.get(5).getPacketIdentifier());
+        assertEquals(QoS.AT_MOST_ONCE, messages.get(5).getQoS());
+
+        assertEquals(1, messages.get(0).getPacketIdentifier());
+        assertEquals(QoS.AT_LEAST_ONCE, messages.get(0).getQoS());
+        assertEquals(2, messages.get(2).getPacketIdentifier());
+        assertEquals(QoS.AT_LEAST_ONCE, messages.get(2).getQoS());
+        assertEquals(3, messages.get(4).getPacketIdentifier());
+        assertEquals(QoS.AT_LEAST_ONCE, messages.get(4).getQoS());
     }
 
     @Test
@@ -177,6 +239,54 @@ public class ClientQueueMemoryLocalPersistenceTest {
         assertEquals(7, messages1.get(2).getPacketIdentifier());
     }
 
+    @Test
+    public void test_read_inflight_pubrel() {
+        final PUBREL[] pubrels = new PUBREL[4];
+        for (int i = 0; i < pubrels.length; i++) {
+            pubrels[i] = new PUBREL(i + 1);
+        }
+        for (final PUBREL pubrel : pubrels) {
+            persistence.add("client1", false, createPublish(pubrel.getPacketIdentifier(), QoS.EXACTLY_ONCE, "topic"), 100L, DISCARD, false, 0);
+            persistence.replace("client1", pubrel, 0);
+        }
+
+        final ImmutableList<MessageWithID> messages2 = persistence.readInflight("client1", false, 10, 256000, 0);
+        assertEquals(4, messages2.size());
+    }
+
+    @Test
+    public void test_read_inflight_pubrel_and_publish() {
+        final PUBREL[] pubrels = new PUBREL[4];
+        for (int i = 0; i < pubrels.length; i++) {
+            pubrels[i] = new PUBREL(i + 1);
+        }
+        for (final PUBREL pubrel : pubrels) {
+            persistence.add("client1", false, createPublish(pubrel.getPacketIdentifier(), QoS.EXACTLY_ONCE, "topic"), 100L, DISCARD, false, 0);
+            persistence.replace("client1", pubrel, 0);
+        }
+        final PUBLISH[] publishes = new PUBLISH[4];
+        for (int i = 0; i < publishes.length; i++) {
+            publishes[i] = createPublish(10 + i, (i % 2 == 0) ? QoS.EXACTLY_ONCE : QoS.AT_LEAST_ONCE, "topic" + i);
+        }
+        for (final PUBLISH publish : publishes) {
+            persistence.add("client1", false, publish, 100L, DISCARD, false, 0);
+        }
+
+        // Assign packet ID's
+        persistence.readNew("client1", false, ImmutableIntArray.of(1, 2, 3, 4), 256000, 0);
+
+        final ImmutableList<MessageWithID> messages = persistence.readInflight("client1", false, 10, 256000, 0);
+        assertEquals(8, messages.size());
+        assertTrue(messages.get(0) instanceof PUBREL);
+        assertTrue(messages.get(1) instanceof PUBREL);
+        assertTrue(messages.get(2) instanceof PUBREL);
+        assertTrue(messages.get(3) instanceof PUBREL);
+        assertTrue(messages.get(4) instanceof PUBLISH);
+        assertTrue(messages.get(5) instanceof PUBLISH);
+        assertTrue(messages.get(6) instanceof PUBLISH);
+        assertTrue(messages.get(7) instanceof PUBLISH);
+    }
+
     @Test
     public void test_add_discard() {
         for (int i = 1; i <= 6; i++) {
@@ -195,6 +305,21 @@ public class ClientQueueMemoryLocalPersistenceTest {
         verify(messageDroppedService, times(3)).queueFull(eq("client"), anyString(), anyInt());
     }
 
+    @Test
+    public void test_add_discard_oldest() {
+        for (int i = 1; i <= 6; i++) {
+            persistence.add(
+                    "client", false, createPublish(i, QoS.AT_LEAST_ONCE, "topic" + i), 3L, DISCARD_OLDEST, false, 0);
+        }
+        assertEquals(3, persistence.size("client", false, 0));
+        final ImmutableList<PUBLISH> publishes =
+                persistence.readNew("client", false, ImmutableIntArray.of(1, 2, 3, 4, 5, 6), byteLimit, 0);
+        assertEquals(3, publishes.size());
+        assertEquals("topic4", publishes.get(0).getTopic());
+        assertEquals("topic5", publishes.get(1).getTopic());
+        assertEquals("topic6", publishes.get(2).getTopic());
+        verify(messageDroppedService, times(3)).queueFull(eq("client"), anyString(), anyInt());
+    }
 
     @Test
     public void test_clear() {
@@ -215,6 +340,32 @@ public class ClientQueueMemoryLocalPersistenceTest {
         assertEquals(1, publishes2.size());
     }
 
+    @Test
+    public void test_replace() {
+        for (int i = 0; i < 3; i++) {
+            persistence.add("client", false, createPublish(1, QoS.AT_LEAST_ONCE, "topic", i), 100L, DISCARD, false, 0);
+        }
+        persistence.readNew("client", false, ImmutableIntArray.of(2, 3, 4), 256000, 0);
+        final String uniqueId = persistence.replace("client", new PUBREL(4), 0);
+        assertEquals("hivemqId_pub_2", uniqueId);
+        final ImmutableList<MessageWithID> messages = persistence.readInflight("client", false, 10, byteLimit, 0);
+        assertTrue(messages.get(2) instanceof PUBREL);
+    }
+
+    @Test
+    public void test_replace_pubrel() {
+        for (int i = 0; i < 3; i++) {
+            persistence.add("client", false, createPublish(1, QoS.AT_LEAST_ONCE, "topic", i), 100L, DISCARD, false, 0);
+        }
+        persistence.readNew("client", false, ImmutableIntArray.of(2, 3, 4), 256000, 0);
+        String uniqueId = persistence.replace("client", new PUBREL(4), 0);
+        assertEquals("hivemqId_pub_2", uniqueId);
+        uniqueId = persistence.replace("client", new PUBREL(4), 0);
+        assertNull(uniqueId);
+        final ImmutableList<MessageWithID> messages = persistence.readInflight("client", false, 10, byteLimit, 0);
+        assertTrue(messages.get(2) instanceof PUBREL);
+    }
+
     @Test
     public void test_replca_false_id() {
         persistence.add("client", false, createPublish(1, QoS.AT_LEAST_ONCE, "topic", 1), 100L, DISCARD, false, 0);
@@ -226,6 +377,34 @@ public class ClientQueueMemoryLocalPersistenceTest {
         assertEquals(1, messages.get(0).getPacketIdentifier());
     }
 
+    @Test
+    public void test_replace_not_found() {
+        for (int i = 0; i < 3; i++) {
+            persistence.add("client", false, createPublish(1, QoS.AT_LEAST_ONCE, "topic", i), 100L, DISCARD, false, 0);
+        }
+        final String uniqueId = persistence.replace("client", new PUBREL(4), 0);
+        assertEquals(4, persistence.size("client", false, 0));
+        assertNull(uniqueId);
+    }
+
+    @Test
+    public void test_remove() {
+        for (int i = 0; i < 3; i++) {
+            persistence.add("client", false, createPublish(1, QoS.AT_LEAST_ONCE, "topic", i), 100L, DISCARD, false, 0);
+        }
+        persistence.readNew("client", false, ImmutableIntArray.of(2, 3, 4), 256000, 0);
+        final String uniqueId = persistence.remove("client", 4, 0);
+        assertEquals("hivemqId_pub_2", uniqueId);
+        final ImmutableList<MessageWithID> messages = persistence.readInflight("client", false, 10, byteLimit, 0);
+        assertEquals(2, messages.size());
+        assertEquals(2, messages.get(0).getPacketIdentifier());
+        assertEquals(3, messages.get(1).getPacketIdentifier());
+
+        assertEquals(2, persistence.size("client", false, 0));
+
+        verify(payloadPersistence, times(1)).decrementReferenceCounter(anyLong());
+    }
+
     @Test
     public void test_remove_not_found() {
         for (int i = 0; i < 3; i++) {
@@ -428,6 +607,37 @@ public class ClientQueueMemoryLocalPersistenceTest {
         assertEquals(2, messages3.size());
     }
 
+    @Test
+    public void test_clean_up() {
+        persistence.add("removed", false, createPublish(0, QoS.AT_LEAST_ONCE), 10, DISCARD, false, 0);
+        persistence.clear("removed", false, 0);
+
+        persistence.readNew("empty", false, ImmutableIntArray.of(1), 100000L, 0);
+
+        persistence.add(
+                "client1", false, createPublish(0, QoS.AT_LEAST_ONCE, 10, System.currentTimeMillis() - 10000), 10,
+                DISCARD, false, 0);
+        persistence.add(
+                "client1", false, createPublish(0, QoS.AT_LEAST_ONCE, 10, System.currentTimeMillis() - 10000), 10,
+                DISCARD, false, 0);
+        persistence.add("client1", false, createPublish(0, QoS.AT_LEAST_ONCE, "topic2"), 10, DISCARD, false, 0);
+        persistence.add(
+                "client1", false, createPublish(0, QoS.AT_MOST_ONCE, 10, System.currentTimeMillis() - 10000), 10,
+                DISCARD, false, 0);
+        persistence.add("client1", false, createPublish(0, QoS.AT_MOST_ONCE, "topic2"), 10, DISCARD, false, 0);
+
+        final ImmutableList<PUBLISH> newMessages =
+                persistence.readNew("client1", false, ImmutableIntArray.of(1), 10000L, 0);
+        assertEquals(1, newMessages.size());
+        assertEquals("topic2", newMessages.get(0).getTopic());
+
+        final ImmutableSet<String> sharedQueues = persistence.cleanUp(0);
+
+        assertTrue(sharedQueues.isEmpty());
+        verify(payloadPersistence, times(5)).decrementReferenceCounter(
+                anyLong()); // 3 expired + 1 clear + 1 poll(readNew)
+        assertEquals(1, persistence.size("client1", false, 0));
+    }
 
     @Test
     public void test_clean_up_expired_qos0() {
@@ -465,6 +675,65 @@ public class ClientQueueMemoryLocalPersistenceTest {
         assertEquals(0, persistence.size("client1", false, 0));
     }
 
+    @Test
+    public void test_clean_up_expired_pubrels_not_configured() throws InterruptedException {
+
+        persistence.add(
+                "client1", false, createPublish(1, QoS.EXACTLY_ONCE, 2, System.currentTimeMillis()), 10,
+                DISCARD, false, 0);
+        persistence.add(
+                "client1", false, createPublish(2, QoS.EXACTLY_ONCE, 2, System.currentTimeMillis()), 10,
+                DISCARD, false, 0);
+
+        persistence.readNew("client1", false, createPacketIds(1, 2), byteLimit, 0);
+
+        //let them expire
+        Thread.sleep(3000);
+
+        persistence.replace("client1", new PUBREL(1), 0);
+        persistence.replace("client1", new PUBREL(2), 0);
+
+        final ImmutableSet<String> sharedQueues = persistence.cleanUp(0);
+
+        assertTrue(sharedQueues.isEmpty());
+        verify(payloadPersistence, times(2)).decrementReferenceCounter(
+                anyLong()); // 2 replaces
+        assertEquals(2, persistence.size("client1", false, 0));
+    }
+
+    @Test
+    public void test_clean_up_expired_pubrels_configured() throws InterruptedException {
+
+        InternalConfigurations.EXPIRE_INFLIGHT_PUBRELS = true;
+
+        metricRegistry = new MetricRegistry();
+        persistence = new ClientQueueMemoryLocalPersistence(
+                payloadPersistence,
+                messageDroppedService, metricRegistry);
+
+        persistence.add(
+                "client1", false, createPublish(1, QoS.EXACTLY_ONCE, 2, System.currentTimeMillis()), 10,
+                DISCARD, false, 0);
+        persistence.add(
+                "client1", false, createPublish(2, QoS.EXACTLY_ONCE, 2, System.currentTimeMillis()), 10,
+                DISCARD, false, 0);
+
+        persistence.readNew("client1", false, createPacketIds(1, 2), byteLimit, 0);
+
+        //let them expire
+        Thread.sleep(3000);
+
+        persistence.replace("client1", new PUBREL(1), 0);
+        persistence.replace("client1", new PUBREL(2), 0);
+
+        final ImmutableSet<String> sharedQueues = persistence.cleanUp(0);
+
+        assertTrue(sharedQueues.isEmpty());
+        verify(payloadPersistence, times(2)).decrementReferenceCounter(
+                anyLong()); // 2 replaces
+        assertEquals(0, persistence.size("client1", false, 0));
+    }
+
     @Test
     public void test_clean_up_shared() {
         persistence.add(
@@ -577,6 +846,83 @@ public class ClientQueueMemoryLocalPersistenceTest {
         assertEquals(new PublishWithRetained(messages.get(0), false).getEstimatedSize() + ObjectMemoryEstimation.linkedListNodeOverhead(), gauge.getValue().longValue());
     }
 
+    @Test
+    public void test_batched_add() {
+        final ImmutableList.Builder<PUBLISH> publishes = ImmutableList.builder();
+        for (int i = 0; i < 10; i++) {
+            publishes.add(createPublish(1, QoS.AT_LEAST_ONCE, "topic" + i));
+        }
+        persistence.add("client", false, publishes.build(), 100, DISCARD, false, 0);
+
+        assertEquals(10, persistence.size("client", false, 0));
+
+        final ImmutableList<PUBLISH> all =
+                persistence.readNew("client", false, ImmutableIntArray.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 10000L, 0);
+
+        assertEquals(10, all.size());
+        assertEquals("topic0", all.get(0).getTopic());
+        assertEquals("topic1", all.get(1).getTopic());
+    }
+
+    @Test
+    public void test_batched_add_discard() {
+        final ImmutableList.Builder<PUBLISH> publishes = ImmutableList.builder();
+        for (int i = 0; i < 10; i++) {
+            publishes.add(createPublish(1, QoS.AT_LEAST_ONCE, "topic" + i));
+        }
+        persistence.add("client", false, publishes.build(), 5, DISCARD, false, 0);
+
+        assertEquals(5, persistence.size("client", false, 0));
+
+        final ImmutableList<PUBLISH> all =
+                persistence.readNew("client", false, ImmutableIntArray.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 10000L, 0);
+        assertEquals(5, all.size());
+        assertEquals("topic0", all.get(0).getTopic());
+        assertEquals("topic1", all.get(1).getTopic());
+    }
+
+    @Test
+    public void test_batched_add_discard_oldest() {
+        final ImmutableList.Builder<PUBLISH> publishes = ImmutableList.builder();
+
+        persistence.add("client", false, createPublish(1, QoS.AT_LEAST_ONCE, "topicA"), 3, DISCARD_OLDEST, false, 0);
+        persistence.add("client", false, createPublish(1, QoS.AT_LEAST_ONCE, "topicB"), 3, DISCARD_OLDEST, false, 0);
+        persistence.add("client", false, createPublish(1, QoS.AT_LEAST_ONCE, "topicC"), 3, DISCARD_OLDEST, false, 0);
+
+        for (int i = 0; i < 3; i++) {
+            publishes.add(createPublish(1, QoS.AT_LEAST_ONCE, "topic" + i));
+        }
+        persistence.add("client", false, publishes.build(), 3, DISCARD_OLDEST, false, 0);
+
+        assertEquals(3, persistence.size("client", false, 0));
+
+        final ImmutableList<PUBLISH> all =
+                persistence.readNew("client", false, ImmutableIntArray.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 10000L, 0);
+        assertEquals(3, all.size());
+        assertEquals("topic0", all.get(0).getTopic());
+        assertEquals("topic1", all.get(1).getTopic());
+        assertEquals("topic2", all.get(2).getTopic());
+    }
+
+    @Test
+    public void test_batched_add_larger_than_queue_discard_oldest() {
+        final ImmutableList.Builder<PUBLISH> publishes = ImmutableList.builder();
+
+        for (int i = 0; i < 6; i++) {
+            publishes.add(createPublish(1, QoS.AT_LEAST_ONCE, "topic" + i));
+        }
+        persistence.add("client", false, publishes.build(), 3, DISCARD_OLDEST, false, 0);
+
+        assertEquals(3, persistence.size("client", false, 0));
+
+        final ImmutableList<PUBLISH> all =
+                persistence.readNew("client", false, ImmutableIntArray.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 10000L, 0);
+        assertEquals(3, all.size());
+        assertEquals("topic3", all.get(0).getTopic());
+        assertEquals("topic4", all.get(1).getTopic());
+        assertEquals("topic5", all.get(2).getTopic());
+    }
+
     @Test
     public void test_batched_drop_qos_0_memory_exceeded() {
 
@@ -595,6 +941,54 @@ public class ClientQueueMemoryLocalPersistenceTest {
         assertEquals(1, all.size());
     }
 
+    @Test
+    public void test_batched_add_retained_dont_discard() {
+        final ImmutableList.Builder<PUBLISH> publishes = ImmutableList.builder();
+        for (int i = 0; i < 5; i++) {
+            publishes.add(createPublish(1, QoS.AT_LEAST_ONCE, "topic" + i));
+        }
+        persistence.add("client", false, publishes.build(), 2, DISCARD, true, 0);
+
+        assertEquals(5, persistence.size("client", false, 0));
+
+        final ImmutableList<PUBLISH> all =
+                persistence.readNew("client", false, ImmutableIntArray.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 10000L, 0);
+        assertEquals(5, all.size());
+        assertEquals("topic0", all.get(0).getTopic());
+        assertEquals("topic1", all.get(1).getTopic());
+    }
+
+    @Test
+    public void test_batched_add_retained_discard_over_retained_limit() {
+        final ImmutableList.Builder<PUBLISH> publishes1 = ImmutableList.builder();
+        final ImmutableList.Builder<PUBLISH> publishes2 = ImmutableList.builder();
+        for (int i = 0; i < 10; i++) {
+            if (i < 5) {
+                publishes1.add(createPublish(1, QoS.AT_LEAST_ONCE, "topic" + i));
+            } else {
+                publishes2.add(createPublish(1, QoS.AT_LEAST_ONCE, "topic" + i));
+            }
+        }
+        persistence.add("client", false, publishes1.build(), 2, DISCARD, true, 0);
+
+        final Gauge<Long> gauge = metricRegistry.getGauges().get(HiveMQMetrics.QUEUED_MESSAGES_MEMORY_PERSISTENCE_TOTAL_SIZE.name());
+        final Long value = gauge.getValue();
+        assertTrue(value > 0);
+
+        assertEquals(5, persistence.size("client", false, 0));
+
+        persistence.add("client", false, publishes2.build(), 2, DISCARD, true, 0);
+
+        assertEquals(5, persistence.size("client", false, 0));
+        assertEquals(value, gauge.getValue());
+
+        final ImmutableList<PUBLISH> all =
+                persistence.readNew("client", false, ImmutableIntArray.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 10000L, 0);
+        assertEquals(5, all.size());
+        assertEquals("topic0", all.get(0).getTopic());
+        assertEquals("topic1", all.get(1).getTopic());
+    }
+
     @Test
     public void add_and_poll_mixture_retained() {
         for (int i = 0; i < 12; i++) {
@@ -665,6 +1059,127 @@ public class ClientQueueMemoryLocalPersistenceTest {
 
     }
 
+    @Test
+    public void test_read_byte_limit_respected_qos0() {
+
+        InternalConfigurations.QOS_0_MEMORY_LIMIT_PER_CLIENT.set(1024 * 100);
+
+        metricRegistry = new MetricRegistry();
+        persistence = new ClientQueueMemoryLocalPersistence(
+                payloadPersistence,
+                messageDroppedService, metricRegistry);
+
+        final ImmutableList.Builder<PUBLISH> publishes = ImmutableList.builder();
+        int totalPublishBytes = 0;
+        for (int i = 0; i < 100; i++) {
+            final PUBLISH publish = createPublish(i + 1, QoS.AT_MOST_ONCE, "topic" + i);
+            totalPublishBytes += publish.getEstimatedSizeInMemory();
+            publishes.add(publish);
+        }
+        persistence.add("client", false, publishes.build(), 2, DISCARD, false, 0);
+
+        final Gauge<Long> gauge = metricRegistry.getGauges().get(HiveMQMetrics.QUEUED_MESSAGES_MEMORY_PERSISTENCE_TOTAL_SIZE.name());
+        assertTrue(gauge.getValue() > 0);
+
+        int byteLimit = totalPublishBytes / 2;
+        final ImmutableList<PUBLISH> allReadPublishes = persistence.readNew("client", false, createPacketIds(1, 100), byteLimit, 0);
+        assertEquals(51, allReadPublishes.size());
+
+        final ImmutableList<PUBLISH> allReadPublishes2 = persistence.readNew("client", false, createPacketIds(52, 100), byteLimit, 0);
+        assertEquals(49, allReadPublishes2.size());
+
+        assertEquals(0, gauge.getValue().longValue());
+
+    }
+
+    @Test
+    public void test_read_byte_limit_respected_qos1() {
+
+        InternalConfigurations.QOS_0_MEMORY_LIMIT_PER_CLIENT.set(1024 * 100);
+
+        metricRegistry = new MetricRegistry();
+        persistence = new ClientQueueMemoryLocalPersistence(
+                payloadPersistence,
+                messageDroppedService, metricRegistry);
+
+        final ImmutableList.Builder<PUBLISH> publishes = ImmutableList.builder();
+        int totalPublishBytes = 0;
+        for (int i = 0; i < 100; i++) {
+            final PUBLISH publish = createPublish(i + 1, QoS.AT_LEAST_ONCE, "topic" + i);
+            totalPublishBytes += publish.getEstimatedSizeInMemory();
+            publishes.add(publish);
+        }
+        persistence.add("client", false, publishes.build(), 100, DISCARD, false, 0);
+
+        final Gauge<Long> gauge = metricRegistry.getGauges().get(HiveMQMetrics.QUEUED_MESSAGES_MEMORY_PERSISTENCE_TOTAL_SIZE.name());
+        assertTrue(gauge.getValue() > 0);
+
+        int byteLimit = totalPublishBytes / 2;
+        System.out.println(byteLimit);
+        final ImmutableList<PUBLISH> allReadPublishes = persistence.readNew("client", false, createPacketIds(1, 100), byteLimit, 0);
+        assertEquals(51, allReadPublishes.size());
+
+        final ImmutableList<PUBLISH> allReadPublishes2 = persistence.readNew("client", false, createPacketIds(52, 100), byteLimit, 0);
+        assertEquals(49, allReadPublishes2.size());
+
+        assertTrue(gauge.getValue() > 0);
+
+        for (final PUBLISH pub : allReadPublishes) {
+            persistence.remove("client", pub.getPacketIdentifier(), pub.getUniqueId(), 0);
+        }
+        for (final PUBLISH pub : allReadPublishes2) {
+            persistence.remove("client", pub.getPacketIdentifier(), pub.getUniqueId(), 0);
+        }
+
+        assertEquals(0, gauge.getValue().longValue());
+
+    }
+
+    @Test
+    public void test_read_byte_limit_respected_qos0_and_qos1() {
+
+        InternalConfigurations.QOS_0_MEMORY_LIMIT_PER_CLIENT.set(1024 * 100);
+
+        metricRegistry = new MetricRegistry();
+        persistence = new ClientQueueMemoryLocalPersistence(
+                payloadPersistence,
+                messageDroppedService, metricRegistry);
+
+        final ImmutableList.Builder<PUBLISH> publishes = ImmutableList.builder();
+        int totalPublishBytes = 0;
+        for (int i = 0; i < 100; i++) {
+            final PUBLISH publish = createPublish(i + 1, QoS.valueOf(i % 2), "topic" + i);
+            totalPublishBytes += publish.getEstimatedSizeInMemory();
+            publishes.add(publish);
+        }
+        persistence.add("client", false, publishes.build(), 100, DISCARD, false, 0);
+
+        final Gauge<Long> gauge = metricRegistry.getGauges().get(HiveMQMetrics.QUEUED_MESSAGES_MEMORY_PERSISTENCE_TOTAL_SIZE.name());
+        assertTrue(gauge.getValue() > 0);
+
+        int byteLimit = totalPublishBytes / 2;
+        final ImmutableList<PUBLISH> allReadPublishes = persistence.readNew("client", false, createPacketIds(1, 100), byteLimit, 0);
+        assertEquals(51, allReadPublishes.size());
+
+        for (final PUBLISH pub : allReadPublishes) {
+            persistence.remove("client", pub.getPacketIdentifier(), pub.getUniqueId(), 0);
+        }
+
+        final ImmutableList<PUBLISH> allReadPublishes2 = persistence.readNew("client", false, createPacketIds(52, 100), byteLimit, 0);
+        assertEquals(48, allReadPublishes2.size());
+        assertTrue(gauge.getValue() > 0);
+
+        for (final PUBLISH pub : allReadPublishes2) {
+            persistence.remove("client", pub.getPacketIdentifier(), pub.getUniqueId(), 0);
+        }
+
+        //last qos0 message
+        final ImmutableList<PUBLISH> allReadPublishes3 = persistence.readNew("client", false, createPacketIds(100, 100), byteLimit, 0);
+        assertEquals(1, allReadPublishes3.size());
+        assertEquals(0, gauge.getValue().longValue());
+
+    }
+
     private ImmutableIntArray createPacketIds(final int start, final int size) {
         final ImmutableIntArray.Builder builder = ImmutableIntArray.builder();
         for (int i = start; i < (size + start); i++) {
diff --git a/broker/src/test/java/util/TestConfigurationBootstrap.java b/broker/src/test/java/util/TestConfigurationBootstrap.java
index 0031051..9f11e0a 100644
--- a/broker/src/test/java/util/TestConfigurationBootstrap.java
+++ b/broker/src/test/java/util/TestConfigurationBootstrap.java
@@ -15,7 +15,10 @@
  */
 package util;
 
-import com.hivemq.configuration.service.*;
+import com.hivemq.configuration.service.ConfigurationService;
+import com.hivemq.configuration.service.FullConfigurationService;
+import com.hivemq.configuration.service.PersistenceConfigurationService;
+import com.hivemq.configuration.service.SecurityConfigurationService;
 import com.hivemq.configuration.service.impl.*;
 import com.hivemq.configuration.service.impl.listener.ListenerConfigurationServiceImpl;
 import com.hivemq.statistics.UsageStatisticsConfig;
@@ -34,8 +37,6 @@ public class TestConfigurationBootstrap {
     private final UsageStatisticsConfig usageStatisticsConfig;
     private final PersistenceConfigurationService persistenceConfigurationService;
 
-    private final TopicPriorityConfigurationServiceImpl topicConfigurationService;
-
     public TestConfigurationBootstrap() {
         listenerConfigurationService = new ListenerConfigurationServiceImpl();
         mqttConfigurationService = new MqttConfigurationServiceImpl();
@@ -44,17 +45,13 @@ public class TestConfigurationBootstrap {
         usageStatisticsConfig = new UsageStatisticsConfigImpl();
         persistenceConfigurationService = new PersistenceConfigurationServiceImpl();
 
-        topicConfigurationService = new TopicPriorityConfigurationServiceImpl();
-
         configurationService = new ConfigurationServiceImpl(
                 listenerConfigurationService,
                 mqttConfigurationService,
                 restrictionsConfigurationService,
                 securityConfigurationService,
                 usageStatisticsConfig,
-                persistenceConfigurationService,
-
-                topicConfigurationService);
+                persistenceConfigurationService);
     }
 
     public SecurityConfigurationService getSecurityConfigurationService() {
@@ -100,8 +97,4 @@ public class TestConfigurationBootstrap {
     public PersistenceConfigurationService getPersistenceConfigurationService() {
         return persistenceConfigurationService;
     }
-
-    public TopicPriorityConfigurationServiceImpl getTopicConfigurationService() {
-        return topicConfigurationService;
-    }
 }
diff --git a/broker/src/test/java/util/TestMessageEncoder.java b/broker/src/test/java/util/TestMessageEncoder.java
index a4644e6..274a9b5 100644
--- a/broker/src/test/java/util/TestMessageEncoder.java
+++ b/broker/src/test/java/util/TestMessageEncoder.java
@@ -21,7 +21,6 @@ import com.hivemq.codec.encoder.EncoderFactory;
 import com.hivemq.codec.encoder.FixedSizeMessageEncoder;
 import com.hivemq.codec.encoder.MQTTMessageEncoder;
 import com.hivemq.configuration.HivemqId;
-import com.hivemq.configuration.service.TopicPriorityConfigurationService;
 import com.hivemq.configuration.service.SecurityConfigurationService;
 import com.hivemq.extension.sdk.api.annotations.NotNull;
 import com.hivemq.logging.EventLog;
@@ -31,7 +30,6 @@ import com.hivemq.mqtt.handler.disconnect.MqttServerDisconnectorImpl;
 import com.hivemq.mqtt.message.Message;
 import com.hivemq.mqtt.message.PINGREQ;
 import com.hivemq.mqtt.message.dropping.MessageDroppedService;
-import com.hivemq.mqtt.topic.TopicMatcher;
 import io.netty.buffer.ByteBuf;
 import io.netty.channel.ChannelHandler;
 import io.netty.channel.ChannelHandlerContext;
@@ -48,16 +46,13 @@ public class TestMessageEncoder extends MQTTMessageEncoder {
 
     public TestMessageEncoder(
             final MessageDroppedService messageDroppedService,
-            final SecurityConfigurationService securityConfigurationService,
-            final TopicPriorityConfigurationService topicPriorityConfigurationService,
-            final TopicMatcher topicMatcher) {
+            final SecurityConfigurationService securityConfigurationService) {
         super(
                 new EncoderFactory(
                         messageDroppedService,
                         securityConfigurationService,
                         new MqttServerDisconnectorImpl(new EventLog(), new HivemqId())),
-                new GlobalMQTTMessageCounter(new MetricsHolder(new MetricRegistry())),
-                topicPriorityConfigurationService, topicMatcher);
+                new GlobalMQTTMessageCounter(new MetricsHolder(new MetricRegistry())));
         pingreqEncoder = new PingreqEncoder();
     }
 
diff --git a/client/.idea/codeStyles/Project.xml b/client/.idea/codeStyles/Project.xml
new file mode 100644
index 0000000..6055d96
--- /dev/null
+++ b/client/.idea/codeStyles/Project.xml
@@ -0,0 +1,47 @@
+<component name="ProjectCodeStyleConfiguration">
+  <code_scheme name="Project" version="173">
+    <option name="LINE_SEPARATOR" value="&#10;" />
+    <option name="FORMATTER_TAGS_ENABLED" value="true" />
+    <JavaCodeStyleSettings>
+      <option name="ANNOTATION_PARAMETER_WRAP" value="1" />
+      <option name="JD_INDENT_ON_CONTINUATION" value="true" />
+    </JavaCodeStyleSettings>
+    <codeStyleSettings language="JAVA">
+      <option name="RIGHT_MARGIN" value="120" />
+      <option name="KEEP_LINE_BREAKS" value="false" />
+      <option name="KEEP_BLANK_LINES_IN_DECLARATIONS" value="1" />
+      <option name="KEEP_BLANK_LINES_BETWEEN_PACKAGE_DECLARATION_AND_HEADER" value="1" />
+      <option name="KEEP_BLANK_LINES_BEFORE_RBRACE" value="1" />
+      <option name="BLANK_LINES_BEFORE_PACKAGE" value="1" />
+      <option name="BLANK_LINES_AFTER_CLASS_HEADER" value="1" />
+      <option name="ALIGN_MULTILINE_PARAMETERS" value="false" />
+      <option name="CALL_PARAMETERS_WRAP" value="1" />
+      <option name="CALL_PARAMETERS_LPAREN_ON_NEXT_LINE" value="true" />
+      <option name="METHOD_PARAMETERS_WRAP" value="5" />
+      <option name="METHOD_PARAMETERS_LPAREN_ON_NEXT_LINE" value="true" />
+      <option name="RESOURCE_LIST_WRAP" value="1" />
+      <option name="EXTENDS_LIST_WRAP" value="1" />
+      <option name="THROWS_LIST_WRAP" value="1" />
+      <option name="EXTENDS_KEYWORD_WRAP" value="1" />
+      <option name="THROWS_KEYWORD_WRAP" value="1" />
+      <option name="METHOD_CALL_CHAIN_WRAP" value="5" />
+      <option name="BINARY_OPERATION_WRAP" value="1" />
+      <option name="TERNARY_OPERATION_WRAP" value="1" />
+      <option name="KEEP_SIMPLE_METHODS_IN_ONE_LINE" value="true" />
+      <option name="KEEP_SIMPLE_LAMBDAS_IN_ONE_LINE" value="true" />
+      <option name="KEEP_SIMPLE_CLASSES_IN_ONE_LINE" value="true" />
+      <option name="FOR_STATEMENT_WRAP" value="1" />
+      <option name="ARRAY_INITIALIZER_WRAP" value="1" />
+      <option name="ARRAY_INITIALIZER_LBRACE_ON_NEXT_LINE" value="true" />
+      <option name="ARRAY_INITIALIZER_RBRACE_ON_NEXT_LINE" value="true" />
+      <option name="ASSIGNMENT_WRAP" value="1" />
+      <option name="WRAP_COMMENTS" value="true" />
+      <option name="ASSERT_STATEMENT_WRAP" value="1" />
+      <option name="IF_BRACE_FORCE" value="3" />
+      <option name="DOWHILE_BRACE_FORCE" value="3" />
+      <option name="WHILE_BRACE_FORCE" value="3" />
+      <option name="FOR_BRACE_FORCE" value="3" />
+      <option name="ENUM_CONSTANTS_WRAP" value="2" />
+    </codeStyleSettings>
+  </code_scheme>
+</component>
\ No newline at end of file
diff --git a/client/.travis.yml b/client/.travis.yml
new file mode 100644
index 0000000..11035a0
--- /dev/null
+++ b/client/.travis.yml
@@ -0,0 +1,35 @@
+dist: trusty
+
+language: java
+
+jdk:
+  - oraclejdk8
+  - oraclejdk9
+
+stages:
+  - test
+  - name: release
+    if: branch = master && type != pull_request
+
+install: skip
+script: ./gradlew check javadoc
+
+jobs:
+  include:
+    - stage: release
+      install: skip
+      script: ./gradlew bintrayUpload githubRelease
+      jdk: oraclejdk8
+
+addons:
+  apt:
+    packages:
+      - perl
+
+before_cache:
+  - rm -f  $HOME/.gradle/caches/modules-2/modules-2.lock
+  - rm -fr $HOME/.gradle/caches/*/plugin-resolution/
+cache:
+  directories:
+    - $HOME/.gradle/caches/
+    - $HOME/.gradle/wrapper/
\ No newline at end of file
diff --git a/client/CODE_OF_CONDUCT.md b/client/CODE_OF_CONDUCT.md
new file mode 100644
index 0000000..0c00ec2
--- /dev/null
+++ b/client/CODE_OF_CONDUCT.md
@@ -0,0 +1,3 @@
+# HiveMQ Code of Conduct
+
+Please refer to our [HiveMQ Code of Conduct](https://github.com/hivemq/hivemq-community/blob/master/code-of-conduct.md).
diff --git a/client/CONTRIBUTING.md b/client/CONTRIBUTING.md
new file mode 100644
index 0000000..2e9d266
--- /dev/null
+++ b/client/CONTRIBUTING.md
@@ -0,0 +1,61 @@
+# Contributing
+
+## Contributing to the HiveMQ Community Projects
+
+Welcome to the HiveMQ Community! Glad to see your interest in contributing to HiveMQ MQTT Client.
+Please checkout our [Contribution Guide](https://github.com/hivemq/hivemq-community/blob/master/CONTRIBUTING.adoc) to 
+make sure your contribution will be accepted by the HiveMQ team.
+
+For information on how the HiveMQ Community is organized and how contributions will be accepted please have a look at 
+our [HiveMQ Community Repo](https://github.com/hivemq/hivemq-community). 
+
+## Contributing to HiveMQ MQTT Client
+
+### External contributors
+
+If you would like to contribute code, do the following:
+- Fork the repository on GitHub
+- Open a pull request targeting the `develop` branch
+
+### License
+
+By contributing your code, you agree to license your contribution under the terms of the
+[Apache License, Version 2.0](https://github.com/hivemq/hivemq-mqtt-client/blob/develop/LICENSE).
+
+All files must contain the license header from the
+[HEADER](https://github.com/hivemq/hivemq-mqtt-client/blob/develop/HEADER) file.
+
+### Branching model
+
+- `master`: release branch, protected
+  - `develop` is merged into `master` by creating a merge commit if a new version is released
+  - The release is tagged with the version `vX.Y.Z`
+- `develop`: snapshot branch, protected
+  - Contains features for the next release
+  - Feature/bugfix/... branches are merged into `develop` by rebasing and merging
+- Every feature/bugfix/... will have its own branch
+  - Branched off from `develop`
+  - Pull request targeting the `develop` branch
+  - Mandatory code review of the pull request
+- `gh-pages`: documentation branch, protected
+
+### Branching guidelines
+
+- Branch types: feature, bugfix, improvement, cleanup (same as the label of a corresponding GitHub Issue)
+- Branch names:
+  - Starting with type: `feature/`, `bugfix/`, `improvement/`, `cleanup/`
+  - \+ task: lower case, spaces replaced with `-`
+
+### Commit guidelines
+
+- Commits should be as atomic as possible.
+- Commit messages should describe the changes clearly.
+- Commit messages should start with a capital letter for consistency.
+- Commit messages should avoid exceeding the line length limit. Instead use multiple lines, each describing one specific
+change.
+
+### Code style guidelines
+
+- The project uses Nullability annotations to avoid NullPointerExceptions: `@NotNull`, `@Nullable`.
+Every non-primitive parameter/return type/field should be annotated with one of them.
+- For IntelliJ IDEA the codeStyleConfig and the inspectionProfile are provided in the `.idea` folder.
diff --git a/client/build.gradle.kts b/client/build.gradle.kts
index f04b885..c56000c 100644
--- a/client/build.gradle.kts
+++ b/client/build.gradle.kts
@@ -4,6 +4,11 @@ plugins {
     id("java-library")
     id("com.github.johnrengelman.shadow")
     id("biz.aQute.bnd.builder")
+    id("maven-publish")
+    id("com.jfrog.bintray")
+    id("com.github.breadmoirai.github-release")
+    id("com.github.hierynomus.license")
+    id("pmd")
     id("com.github.sgtsilvio.gradle.utf8")
     id("com.github.sgtsilvio.gradle.metadata")
     id("com.github.sgtsilvio.gradle.javadoc-links")
@@ -193,7 +198,157 @@ tasks.shadowJar {
 
     minimize()
 }
+
+
+/* ******************** publishing ******************** */
+
+apply("${rootDir}/gradle/publishing.gradle.kts")
+
+allprojects {
+    plugins.withId("java-library") {
+
+        plugins.apply("maven-publish")
+
+        publishing.publications.register<MavenPublication>("base") {
+            from(components["java"])
+            suppressAllPomMetadataWarnings()
+        }
+    }
+
+    plugins.withId("java-platform") {
+
+        plugins.apply("maven-publish")
+
+        publishing.publications.register<MavenPublication>("base") {
+            from(components["javaPlatform"])
+            suppressAllPomMetadataWarnings()
+        }
+    }
+}
+
+publishing.publications.register<MavenPublication>("shaded") {
+    artifactId = "${project.name}-shaded"
+    artifact(tasks["shadowJar"])
+    artifact(tasks["javadocJar"])
+    artifact(tasks["sourcesJar"])
+    pom.withXml {
+        asNode().appendNode("dependencies").apply {
+            configurations["apiElements"].allDependencies.forEach {
+                appendNode("dependency").apply {
+                    appendNode("groupId", it.group)
+                    appendNode("artifactId", it.name)
+                    appendNode("version", it.version)
+                    appendNode("scope", "compile")
+                }
+            }
+        }
+    }
+}
+
+allprojects {
+    plugins.withId("maven-publish") {
+        afterEvaluate {
+            publishing.publications.withType<MavenPublication>().configureEach {
+                pom.withXml {
+                    (asNode()["dependencies"] as groovy.util.NodeList).forEach { dependencies ->
+                        (dependencies as groovy.util.Node).children().forEach { dependency ->
+                            val dep = dependency as groovy.util.Node
+                            val optional = dep["optional"] as groovy.util.NodeList
+                            val scope = dep["scope"] as groovy.util.NodeList
+                            if (!optional.isEmpty() && (optional[0] as groovy.util.Node).text() == "true") {
+                                (scope[0] as groovy.util.Node).setValue("runtime")
+                            }
+                        }
+                    }
+                }
+            }
+        }
+    }
+}
+
+allprojects {
+    plugins.withId("maven-publish") {
+
+        plugins.apply("com.jfrog.bintray")
+
+        bintray {
+            user = "${rootProject.extra["bintray_username"]}"
+            key = "${rootProject.extra["bintray_apiKey"]}"
+            publish = true
+            pkg.apply {
+                userOrg = "hivemq"
+                repo = "HiveMQ"
+                name = "hivemq-mqtt-client"
+                desc = project.description
+                websiteUrl = metadata.url
+                issueTrackerUrl = metadata.issueManagement.url
+                vcsUrl = metadata.scm.url
+                setLicenses(metadata.license.shortName)
+                setLabels("mqtt", "mqtt-client", "iot", "internet-of-things", "rxjava2", "reactive-streams", "backpressure")
+                version.apply {
+                    released = Date().toString()
+                    vcsTag = "v${project.version}"
+                    gpg.apply {
+                        sign = true
+                    }
+                }
+            }
+        }
+        afterEvaluate {
+            bintray.setPublications(*publishing.publications.withType<MavenPublication>().names.toTypedArray())
+        }
+
+        // workaround for publishing gradle module metadata https://github.com/bintray/gradle-bintray-plugin/issues/229
+        tasks.withType<com.jfrog.bintray.gradle.tasks.BintrayUploadTask> {
+            doFirst {
+                publishing.publications.withType<MavenPublication> {
+                    val moduleFile = buildDir.resolve("publications/$name/module.json")
+                    if (moduleFile.exists()) {
+                        artifact(moduleFile).extension = "module"
+                    }
+                }
+            }
+        }
+    }
+}
+
+githubRelease {
+    token("${rootProject.extra["github_token"]}")
+    owner.set(metadata.github.org)
+    repo.set(metadata.github.repo)
+    targetCommitish.set("master")
+    tagName.set("v${project.version}")
+    releaseName.set("${project.version}")
+}
+
+
+/* ******************** checks ******************** */
+
+allprojects {
+    plugins.apply("com.github.hierynomus.license")
+
+    license {
+        header = rootDir.resolve("HEADER")
+        mapping("java", "SLASHSTAR_STYLE")
+    }
+}
+
+allprojects {
+    plugins.withId("java") {
+
+        plugins.apply("pmd")
+
+        pmd {
+            toolVersion = "5.7.0"
+        }
+    }
+}
+
+apply("${rootDir}/gradle/japicc.gradle.kts")
+
+
 /* ******************** build cache ******************** */
+
 allprojects {
     normalization {
         runtimeClasspath {
diff --git a/client/epoll/build.gradle.kts b/client/epoll/build.gradle.kts
index d29901c..0b371fe 100644
--- a/client/epoll/build.gradle.kts
+++ b/client/epoll/build.gradle.kts
@@ -1,6 +1,5 @@
 plugins {
     id("java-platform")
-    id("com.github.sgtsilvio.gradle.metadata")
 }
 
 
diff --git a/client/examples/build.gradle.kts b/client/examples/build.gradle.kts
index a2a898d..f63776b 100644
--- a/client/examples/build.gradle.kts
+++ b/client/examples/build.gradle.kts
@@ -1,6 +1,5 @@
 plugins {
     id("java")
-    id(("com.github.sgtsilvio.gradle.metadata"))
 }
 
 
diff --git a/client/gradle.properties b/client/gradle.properties
index a4a101e..5a0556f 100644
--- a/client/gradle.properties
+++ b/client/gradle.properties
@@ -12,7 +12,6 @@ dagger.version=2.27
 slf4j.version=1.7.30
 reactor.version=3.3.4.RELEASE
 reactor-adapter.version=3.3.3.RELEASE
-
 #
 # test dependencies
 #
@@ -35,6 +34,5 @@ plugin.metadata.version=0.1.2
 plugin.javadoc-links.version=0.1.0
 #
 # options
-# compile "com.spencerwi:Either.java:2.7.0"
 #
 org.gradle.caching=true
diff --git a/client/gradle/wrapper/gradle-wrapper.jar b/client/gradle/wrapper/gradle-wrapper.jar
index e708b1c..490fda8 100644
Binary files a/client/gradle/wrapper/gradle-wrapper.jar and b/client/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/client/gradle/wrapper/gradle-wrapper.properties b/client/gradle/wrapper/gradle-wrapper.properties
index be52383..a4b4429 100644
--- a/client/gradle/wrapper/gradle-wrapper.properties
+++ b/client/gradle/wrapper/gradle-wrapper.properties
@@ -1,5 +1,5 @@
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-6.7-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-6.3-bin.zip
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
diff --git a/client/gradlew b/client/gradlew
index 4f906e0..2fe81a7 100755
--- a/client/gradlew
+++ b/client/gradlew
@@ -82,7 +82,6 @@ esac
 
 CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
 
-
 # Determine the Java command to use to start the JVM.
 if [ -n "$JAVA_HOME" ] ; then
     if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
@@ -130,7 +129,6 @@ fi
 if [ "$cygwin" = "true" -o "$msys" = "true" ] ; then
     APP_HOME=`cygpath --path --mixed "$APP_HOME"`
     CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
-
     JAVACMD=`cygpath --unix "$JAVACMD"`
 
     # We build the pattern for arguments to be converted via cygpath
diff --git a/client/gradlew.bat b/client/gradlew.bat
index ac1b06f..9109989 100644
--- a/client/gradlew.bat
+++ b/client/gradlew.bat
@@ -40,7 +40,7 @@ if defined JAVA_HOME goto findJavaFromJavaHome
 
 set JAVA_EXE=java.exe
 %JAVA_EXE% -version >NUL 2>&1
-if "%ERRORLEVEL%" == "0" goto execute
+if "%ERRORLEVEL%" == "0" goto init
 
 echo.
 echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
@@ -54,7 +54,7 @@ goto fail
 set JAVA_HOME=%JAVA_HOME:"=%
 set JAVA_EXE=%JAVA_HOME%/bin/java.exe
 
-if exist "%JAVA_EXE%" goto execute
+if exist "%JAVA_EXE%" goto init
 
 echo.
 echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
@@ -64,14 +64,28 @@ echo location of your Java installation.
 
 goto fail
 
+:init
+@rem Get command-line arguments, handling Windows variants
+
+if not "%OS%" == "Windows_NT" goto win9xME_args
+
+:win9xME_args
+@rem Slurp the command line arguments.
+set CMD_LINE_ARGS=
+set _SKIP=2
+
+:win9xME_args_slurp
+if "x%~1" == "x" goto execute
+
+set CMD_LINE_ARGS=%*
+
 :execute
 @rem Setup the command line
 
 set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
 
-
 @rem Execute Gradle
-"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %*
+"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
 
 :end
 @rem End local scope for the variables with windows NT shell
diff --git a/client/jitpack.yml b/client/jitpack.yml
new file mode 100644
index 0000000..2f933fa
--- /dev/null
+++ b/client/jitpack.yml
@@ -0,0 +1,2 @@
+install:
+  ./gradlew publishToMavenLocal
\ No newline at end of file
diff --git a/client/jrepl.sh b/client/jrepl.sh
deleted file mode 100755
index 79b4d0c..0000000
--- a/client/jrepl.sh
+++ /dev/null
@@ -1,3 +0,0 @@
-#!/bin/sh
-
-jshell --class-path `cat ./build/tmp/compileJava/source-classes-mapping.txt`:target/classes
diff --git a/settings.gradle.kts b/client/settings.gradle.kts
similarity index 61%
rename from settings.gradle.kts
rename to client/settings.gradle.kts
index 16c98fe..6658e91 100644
--- a/settings.gradle.kts
+++ b/client/settings.gradle.kts
@@ -7,11 +7,17 @@ pluginManagement {
         id("com.github.johnrengelman.shadow") version "${extra["plugin.shadow.version"]}"
         id("biz.aQute.bnd.builder") version "${extra["plugin.bnd.version"]}"
         id("com.github.hierynomus.license") version "${extra["plugin.license.version"]}"
+        id("com.jfrog.bintray") version "${extra["plugin.bintray.version"]}"
+        id("com.github.breadmoirai.github-release") version "${extra["plugin.github-release.version"]}"
         id("com.github.sgtsilvio.gradle.utf8") version "${extra["plugin.utf8.version"]}"
         id("com.github.sgtsilvio.gradle.metadata") version "${extra["plugin.metadata.version"]}"
         id("com.github.sgtsilvio.gradle.javadoc-links") version "${extra["plugin.javadoc-links.version"]}"
     }
 }
 
-rootProject.name = "ffi02"
-include("client", "test-app")
\ No newline at end of file
+rootProject.name = "hivemq-mqtt-client"
+
+listOf("websocket", "proxy", "epoll", "reactor", "examples").forEach { module ->
+    include("${rootProject.name}-$module")
+    project(":${rootProject.name}-$module").projectDir = file(module)
+}
diff --git a/client/src/main/java/com/hivemq/client/extensions/PriorityClass.java b/client/src/main/java/com/hivemq/client/extensions/PriorityClass.java
deleted file mode 100644
index ac881e7..0000000
--- a/client/src/main/java/com/hivemq/client/extensions/PriorityClass.java
+++ /dev/null
@@ -1,21 +0,0 @@
-/*
- * Copyright 2018-present HiveMQ and the HiveMQ Community
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.hivemq.client.extensions;
-
-public enum PriorityClass {
-    ROUTINE, PRIORITY, IMMEDIATE, FLASH
-}
diff --git a/client/src/main/java/com/hivemq/client/extensions/TopicPriority.java b/client/src/main/java/com/hivemq/client/extensions/TopicPriority.java
deleted file mode 100644
index cc87e9c..0000000
--- a/client/src/main/java/com/hivemq/client/extensions/TopicPriority.java
+++ /dev/null
@@ -1,39 +0,0 @@
-/*
- * Copyright 2018-present HiveMQ and the HiveMQ Community
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.hivemq.client.extensions;
-
-import com.hivemq.client.mqtt.datatypes.MqttTopicFilter;
-import org.jetbrains.annotations.NotNull;
-
-public class TopicPriority {
-
-    private final @NotNull MqttTopicFilter filter;
-    private final @NotNull PriorityClass priority;
-
-    public TopicPriority(@NotNull MqttTopicFilter filter, @NotNull PriorityClass priority) {
-        this.filter = filter;
-        this.priority = priority;
-    }
-
-    public MqttTopicFilter getTopicFilter(){
-        return filter;
-    }
-
-    public PriorityClass getPriorityClass(){
-        return priority;
-    }
-}
diff --git a/client/src/main/java/com/hivemq/client/internal/mqtt/MqttClientConfig.java b/client/src/main/java/com/hivemq/client/internal/mqtt/MqttClientConfig.java
index 453578a..63e6630 100644
--- a/client/src/main/java/com/hivemq/client/internal/mqtt/MqttClientConfig.java
+++ b/client/src/main/java/com/hivemq/client/internal/mqtt/MqttClientConfig.java
@@ -16,8 +16,6 @@
 
 package com.hivemq.client.internal.mqtt;
 
-import com.hivemq.client.extensions.PriorityClass;
-import com.hivemq.client.extensions.TopicPriority;
 import com.hivemq.client.internal.mqtt.advanced.MqttClientAdvancedConfig;
 import com.hivemq.client.internal.mqtt.datatypes.MqttClientIdentifierImpl;
 import com.hivemq.client.internal.mqtt.ioc.ClientComponent;
@@ -30,7 +28,6 @@ import com.hivemq.client.internal.util.collections.ImmutableList;
 import com.hivemq.client.mqtt.MqttClientState;
 import com.hivemq.client.mqtt.MqttVersion;
 import com.hivemq.client.mqtt.datatypes.MqttClientIdentifier;
-import com.hivemq.client.mqtt.datatypes.MqttTopicFilter;
 import com.hivemq.client.mqtt.lifecycle.MqttClientAutoReconnect;
 import com.hivemq.client.mqtt.lifecycle.MqttClientConnectedListener;
 import com.hivemq.client.mqtt.lifecycle.MqttClientDisconnectedListener;
@@ -60,13 +57,12 @@ public class MqttClientConfig implements Mqtt5ClientConfig {
     private final @NotNull ConnectDefaults connectDefaults;
     private final @NotNull ImmutableList<MqttClientConnectedListener> connectedListeners;
     private final @NotNull ImmutableList<MqttClientDisconnectedListener> disconnectedListeners;
-    private final @NotNull ImmutableList<TopicPriority> topicPriorities;
+
     private final @NotNull ClientComponent clientComponent;
 
     private volatile @Nullable EventLoop eventLoop;
     private int eventLoopAcquires;
     private long eventLoopAcquireCount;
-    private int trafficClass;
 
     private final @NotNull AtomicReference<@NotNull MqttClientState> state;
     private volatile @Nullable MqttClientConnectionConfig connectionConfig;
@@ -83,8 +79,7 @@ public class MqttClientConfig implements Mqtt5ClientConfig {
             final @NotNull MqttClientAdvancedConfig advancedConfig,
             final @NotNull ConnectDefaults connectDefaults,
             final @NotNull ImmutableList<MqttClientConnectedListener> connectedListeners,
-            final @NotNull ImmutableList<MqttClientDisconnectedListener> disconnectedListeners, 
-            @NotNull ImmutableList<TopicPriority> priorities) {
+            final @NotNull ImmutableList<MqttClientDisconnectedListener> disconnectedListeners) {
 
         this.mqttVersion = mqttVersion;
         this.clientIdentifier = clientIdentifier;
@@ -94,7 +89,6 @@ public class MqttClientConfig implements Mqtt5ClientConfig {
         this.connectDefaults = connectDefaults;
         this.connectedListeners = connectedListeners;
         this.disconnectedListeners = disconnectedListeners;
-        this.topicPriorities = priorities;
 
         clientComponent = SingletonComponent.INSTANCE.clientComponentBuilder().clientConfig(this).build();
 
@@ -102,11 +96,6 @@ public class MqttClientConfig implements Mqtt5ClientConfig {
         currentTransportConfig = transportConfig;
     }
 
-    @Override
-    public @NotNull ImmutableList<TopicPriority> getTopicPriorities() {
-        return topicPriorities;
-    }
-
     @Override
     public @NotNull MqttVersion getMqttVersion() {
         return mqttVersion;
diff --git a/client/src/main/java/com/hivemq/client/internal/mqtt/MqttRxClientBuilderBase.java b/client/src/main/java/com/hivemq/client/internal/mqtt/MqttRxClientBuilderBase.java
index 3460291..0fd42b9 100644
--- a/client/src/main/java/com/hivemq/client/internal/mqtt/MqttRxClientBuilderBase.java
+++ b/client/src/main/java/com/hivemq/client/internal/mqtt/MqttRxClientBuilderBase.java
@@ -16,7 +16,6 @@
 
 package com.hivemq.client.internal.mqtt;
 
-import com.hivemq.client.extensions.TopicPriority;
 import com.hivemq.client.internal.mqtt.advanced.MqttClientAdvancedConfig;
 import com.hivemq.client.internal.mqtt.datatypes.MqttClientIdentifierImpl;
 import com.hivemq.client.internal.mqtt.lifecycle.MqttClientAutoReconnectImpl;
@@ -49,7 +48,7 @@ public abstract class MqttRxClientBuilderBase<B extends MqttRxClientBuilderBase<
     private @Nullable MqttClientAutoReconnectImpl autoReconnect;
     private ImmutableList.@Nullable Builder<MqttClientConnectedListener> connectedListenersBuilder;
     private ImmutableList.@Nullable Builder<MqttClientDisconnectedListener> disconnectedListenersBuilder;
-    private ImmutableList.@Nullable Builder<TopicPriority> topicPriorityBuilder;
+
     protected MqttRxClientBuilderBase() {}
 
     protected MqttRxClientBuilderBase(final @NotNull MqttRxClientBuilderBase<?> clientBuilder) {
@@ -166,14 +165,6 @@ public abstract class MqttRxClientBuilderBase<B extends MqttRxClientBuilderBase<
         return self();
     }
 
-    public @NotNull B addTopicPriority(final @NotNull TopicPriority topicPriority){
-        if(topicPriorityBuilder == null){
-            topicPriorityBuilder = ImmutableList.builder();
-        }
-        topicPriorityBuilder.add(topicPriority);
-        return self();
-    }
-
     public @NotNull B addDisconnectedListener(final @Nullable MqttClientDisconnectedListener disconnectedListener) {
         Checks.notNull(disconnectedListener, "Disconnected listener");
         if (disconnectedListenersBuilder == null) {
@@ -213,20 +204,13 @@ public abstract class MqttRxClientBuilderBase<B extends MqttRxClientBuilderBase<
                 .build();
     }
 
-    private @NotNull ImmutableList<TopicPriority> buildTopicPriorities() {
-        if(topicPriorityBuilder == null){
-            return ImmutableList.of();
-        }
-        return ImmutableList.<TopicPriority>builder().addAll(topicPriorityBuilder.build()).build();
-    }
-
     protected @NotNull MqttClientConfig buildClientConfig(
             final @NotNull MqttVersion mqttVersion,
             final @NotNull MqttClientAdvancedConfig advancedConfig,
             final @NotNull MqttClientConfig.ConnectDefaults connectDefaults) {
 
         return new MqttClientConfig(mqttVersion, identifier, buildTransportConfig(), executorConfig, advancedConfig,
-                connectDefaults, buildConnectedListeners(), buildDisconnectedListeners(), buildTopicPriorities());
+                connectDefaults, buildConnectedListeners(), buildDisconnectedListeners());
     }
 
     public static class Choose extends MqttRxClientBuilderBase<Choose> implements MqttClientBuilder {
diff --git a/client/src/main/java/com/hivemq/client/internal/mqtt/codec/encoder/MqttEncoder.java b/client/src/main/java/com/hivemq/client/internal/mqtt/codec/encoder/MqttEncoder.java
index 359f9d7..3b99bb9 100644
--- a/client/src/main/java/com/hivemq/client/internal/mqtt/codec/encoder/MqttEncoder.java
+++ b/client/src/main/java/com/hivemq/client/internal/mqtt/codec/encoder/MqttEncoder.java
@@ -15,31 +15,17 @@
  */
 
 package com.hivemq.client.internal.mqtt.codec.encoder;
-import com.hivemq.client.internal.mqtt.MqttClientConfig;
+
 import com.hivemq.client.internal.mqtt.MqttClientConnectionConfig;
 import com.hivemq.client.internal.mqtt.ioc.ConnectionScope;
 import com.hivemq.client.internal.mqtt.message.MqttMessage;
-import com.hivemq.client.internal.mqtt.message.MqttStatefulMessage;
-import com.hivemq.client.internal.mqtt.message.publish.MqttPublish;
-import com.hivemq.client.internal.mqtt.message.publish.MqttStatefulPublish;
-import com.hivemq.client.mqtt.datatypes.MqttTopic;
-import com.hivemq.client.mqtt.datatypes.MqttTopicFilter;
-import com.hivemq.client.internal.util.collections.ImmutableList;
-import com.hivemq.client.extensions.PriorityClass;
-import com.hivemq.client.extensions.TopicPriority;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufAllocator;
 import io.netty.channel.ChannelDuplexHandler;
 import io.netty.channel.ChannelHandlerContext;
-import io.netty.channel.socket.SocketChannelConfig;
 import io.netty.channel.ChannelPromise;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.Optional;
-import java.util.Comparator;
-import java.util.stream.Collectors;
-import java.util.Collections;
-
 import javax.inject.Inject;
 
 /**
@@ -54,7 +40,7 @@ public class MqttEncoder extends ChannelDuplexHandler {
 
     private final @NotNull MqttMessageEncoders encoders;
     private final @NotNull MqttEncoderContext context;
-    private ImmutableList<TopicPriority> priorities = ImmutableList.of();
+
     private boolean inRead = false;
     private boolean pendingFlush = false;
 
@@ -64,49 +50,8 @@ public class MqttEncoder extends ChannelDuplexHandler {
         context = new MqttEncoderContext(ByteBufAllocator.DEFAULT);
     }
 
-    public void onConnected(final @NotNull MqttClientConnectionConfig connectionConfig,
-                            final @NotNull MqttClientConfig clientConfig) {
-      context.setMaximumPacketSize(connectionConfig.getSendMaximumPacketSize());
-      this.priorities = clientConfig.getTopicPriorities();
-    }
-
     public void onConnected(final @NotNull MqttClientConnectionConfig connectionConfig) {
-      context.setMaximumPacketSize(connectionConfig.getSendMaximumPacketSize());
-    }
-
-    public void setTOS(final @NotNull ChannelHandlerContext ctx,
-                       final @NotNull Object msg) {
-
-      MqttTopic topic = (msg instanceof MqttPublish) 
-                      ? ((MqttPublish) msg).getTopic()
-                      : (msg instanceof MqttStatefulPublish)
-                      ? ((MqttStatefulPublish) msg).stateless().getTopic()
-                      : null;
-
-      if (topic == null) return;
-
-      if (!(ctx.channel().config() instanceof SocketChannelConfig)) return;
-      SocketChannelConfig config = ((SocketChannelConfig) ctx.channel().config());
-
-      PriorityClass priority = 
-        priorities.stream()
-                  .filter(p -> p.getTopicFilter().matches(topic.filter()))
-                  .max(Comparator.comparingInt(a -> a.getTopicFilter().getLevels().size()))
-                  .map(a -> a.getPriorityClass())
-                  .orElseGet(() -> PriorityClass.ROUTINE);
-                  
-      int tosField = config.getTrafficClass() & 0b11100111;
-      
-      switch (priority) {
-        //Or with mask in order to preserve information in most significant bits
-        case ROUTINE   : tosField |= 0b00000000; break;
-        case PRIORITY  : tosField |= 0b00001000; break;
-        case IMMEDIATE : tosField |= 0b00010000; break;
-        case FLASH     : tosField |= 0b00011000; break;
-        default        : tosField |= 0b00000000; 
-      }
-       
-      config.setTrafficClass(tosField);
+        context.setMaximumPacketSize(connectionConfig.getSendMaximumPacketSize());
     }
 
     @Override
@@ -117,10 +62,7 @@ public class MqttEncoder extends ChannelDuplexHandler {
 
         if (msg instanceof MqttMessage) {
             final MqttMessage message = (MqttMessage) msg;
-            setTOS(ctx, message);
-            final MqttMessageEncoder<?> messageEncoder = 
-              encoders.get(message.getType().getCode());
-
+            final MqttMessageEncoder<?> messageEncoder = encoders.get(message.getType().getCode());
             if (messageEncoder == null) {
                 throw new UnsupportedOperationException();
             }
diff --git a/client/src/main/java/com/hivemq/client/internal/mqtt/handler/connect/MqttConnectHandler.java b/client/src/main/java/com/hivemq/client/internal/mqtt/handler/connect/MqttConnectHandler.java
index 5362443..ff5d470 100644
--- a/client/src/main/java/com/hivemq/client/internal/mqtt/handler/connect/MqttConnectHandler.java
+++ b/client/src/main/java/com/hivemq/client/internal/mqtt/handler/connect/MqttConnectHandler.java
@@ -164,7 +164,7 @@ public class MqttConnectHandler extends MqttTimeoutInboundHandler {
 
             channel.pipeline().remove(this);
 
-            ((MqttEncoder) channel.pipeline().get(MqttEncoder.NAME)).onConnected(connectionConfig, clientConfig);
+            ((MqttEncoder) channel.pipeline().get(MqttEncoder.NAME)).onConnected(connectionConfig);
 
             session.startOrResume(connAck, connectionConfig, channel.pipeline(), channel.eventLoop());
 
diff --git a/client/src/main/java/com/hivemq/client/internal/mqtt/handler/publish/outgoing/MqttOutgoingQosHandler.java b/client/src/main/java/com/hivemq/client/internal/mqtt/handler/publish/outgoing/MqttOutgoingQosHandler.java
index e63169c..7eb3e53 100644
--- a/client/src/main/java/com/hivemq/client/internal/mqtt/handler/publish/outgoing/MqttOutgoingQosHandler.java
+++ b/client/src/main/java/com/hivemq/client/internal/mqtt/handler/publish/outgoing/MqttOutgoingQosHandler.java
@@ -16,7 +16,6 @@
 
 package com.hivemq.client.internal.mqtt.handler.publish.outgoing;
 
-import com.hivemq.client.extensions.TopicPriority;
 import com.hivemq.client.internal.annotations.CallByThread;
 import com.hivemq.client.internal.logging.InternalLogger;
 import com.hivemq.client.internal.logging.InternalLoggerFactory;
@@ -50,7 +49,6 @@ import com.hivemq.client.internal.util.collections.IntIndex;
 import com.hivemq.client.internal.util.collections.NodeList;
 import com.hivemq.client.mqtt.MqttClientState;
 import com.hivemq.client.mqtt.datatypes.MqttQos;
-import com.hivemq.client.mqtt.datatypes.MqttTopic;
 import com.hivemq.client.mqtt.exceptions.ConnectionClosedException;
 import com.hivemq.client.mqtt.mqtt5.advanced.interceptor.qos1.Mqtt5OutgoingQos1Interceptor;
 import com.hivemq.client.mqtt.mqtt5.advanced.interceptor.qos2.Mqtt5OutgoingQos2Interceptor;
@@ -214,7 +212,6 @@ public class MqttOutgoingQosHandler extends MqttSessionAwareHandler
             if (publishWithFlow == null) {
                 break;
             }
-
             writePublish(ctx, publishWithFlow);
             written++;
             dequeued++;
diff --git a/client/src/main/java/com/hivemq/client/internal/mqtt/mqtt3/Mqtt3ClientConfigView.java b/client/src/main/java/com/hivemq/client/internal/mqtt/mqtt3/Mqtt3ClientConfigView.java
index b90c9f4..1002e15 100644
--- a/client/src/main/java/com/hivemq/client/internal/mqtt/mqtt3/Mqtt3ClientConfigView.java
+++ b/client/src/main/java/com/hivemq/client/internal/mqtt/mqtt3/Mqtt3ClientConfigView.java
@@ -17,13 +17,11 @@
 package com.hivemq.client.internal.mqtt.mqtt3;
 
 import com.hivemq.client.annotations.Immutable;
-import com.hivemq.client.extensions.TopicPriority;
 import com.hivemq.client.internal.mqtt.MqttClientConfig;
 import com.hivemq.client.internal.mqtt.message.auth.MqttSimpleAuth;
 import com.hivemq.client.internal.mqtt.message.auth.mqtt3.Mqtt3SimpleAuthView;
 import com.hivemq.client.internal.mqtt.message.publish.MqttWillPublish;
 import com.hivemq.client.internal.mqtt.message.publish.mqtt3.Mqtt3PublishView;
-import com.hivemq.client.internal.util.collections.ImmutableList;
 import com.hivemq.client.mqtt.MqttClientExecutorConfig;
 import com.hivemq.client.mqtt.MqttClientState;
 import com.hivemq.client.mqtt.MqttClientTransportConfig;
@@ -53,11 +51,6 @@ public class Mqtt3ClientConfigView implements Mqtt3ClientConfig {
         this.delegate = delegate;
     }
 
-    @Override
-    public @NotNull ImmutableList<TopicPriority> getTopicPriorities() {
-        return delegate.getTopicPriorities();
-    }
-
     @Override
     public @NotNull MqttVersion getMqttVersion() {
         return delegate.getMqttVersion();
@@ -122,5 +115,4 @@ public class Mqtt3ClientConfigView implements Mqtt3ClientConfig {
     public @NotNull Optional<Mqtt3ClientConnectionConfig> getConnectionConfig() {
         return Optional.ofNullable(delegate.getRawConnectionConfig());
     }
-
 }
diff --git a/client/src/main/java/com/hivemq/client/mqtt/MqttClientBuilderBase.java b/client/src/main/java/com/hivemq/client/mqtt/MqttClientBuilderBase.java
index c9fad1f..c954888 100644
--- a/client/src/main/java/com/hivemq/client/mqtt/MqttClientBuilderBase.java
+++ b/client/src/main/java/com/hivemq/client/mqtt/MqttClientBuilderBase.java
@@ -18,8 +18,6 @@ package com.hivemq.client.mqtt;
 
 import com.hivemq.client.annotations.CheckReturnValue;
 import com.hivemq.client.annotations.DoNotImplement;
-import com.hivemq.client.extensions.PriorityClass;
-import com.hivemq.client.extensions.TopicPriority;
 import com.hivemq.client.mqtt.datatypes.MqttClientIdentifier;
 import com.hivemq.client.mqtt.lifecycle.MqttClientAutoReconnect;
 import com.hivemq.client.mqtt.lifecycle.MqttClientAutoReconnectBuilder;
@@ -41,9 +39,6 @@ import java.net.InetSocketAddress;
 @DoNotImplement
 public interface MqttClientBuilderBase<B extends MqttClientBuilderBase<B>> {
 
-    @CheckReturnValue
-    @NotNull B addTopicPriority(@NotNull TopicPriority topicPriority);
-
     /**
      * Sets the {@link MqttClientConfig#getClientIdentifier() Client Identifier}.
      *
diff --git a/client/src/main/java/com/hivemq/client/mqtt/MqttClientConfig.java b/client/src/main/java/com/hivemq/client/mqtt/MqttClientConfig.java
index 75779c9..f7b8c58 100644
--- a/client/src/main/java/com/hivemq/client/mqtt/MqttClientConfig.java
+++ b/client/src/main/java/com/hivemq/client/mqtt/MqttClientConfig.java
@@ -18,8 +18,6 @@ package com.hivemq.client.mqtt;
 
 import com.hivemq.client.annotations.DoNotImplement;
 import com.hivemq.client.annotations.Immutable;
-import com.hivemq.client.extensions.TopicPriority;
-import com.hivemq.client.internal.util.collections.ImmutableList;
 import com.hivemq.client.mqtt.datatypes.MqttClientIdentifier;
 import com.hivemq.client.mqtt.lifecycle.MqttClientAutoReconnect;
 import com.hivemq.client.mqtt.lifecycle.MqttClientConnectedListener;
@@ -39,8 +37,6 @@ import java.util.Optional;
 @DoNotImplement
 public interface MqttClientConfig {
 
-    @NotNull ImmutableList<TopicPriority> getTopicPriorities();
-
     /**
      * @return the MQTT version of the client.
      */
@@ -54,7 +50,6 @@ public interface MqttClientConfig {
      */
     @NotNull Optional<MqttClientIdentifier> getClientIdentifier();
 
-
     /**
      * @return the server address the client connects to.
      * @since 1.1
diff --git a/client/src/test/java/com/hivemq/client/internal/mqtt/codec/decoder/AbstractMqttDecoderTest.java b/client/src/test/java/com/hivemq/client/internal/mqtt/codec/decoder/AbstractMqttDecoderTest.java
index 7f1161b..311c9fd 100644
--- a/client/src/test/java/com/hivemq/client/internal/mqtt/codec/decoder/AbstractMqttDecoderTest.java
+++ b/client/src/test/java/com/hivemq/client/internal/mqtt/codec/decoder/AbstractMqttDecoderTest.java
@@ -111,7 +111,7 @@ public abstract class AbstractMqttDecoderTest {
         final MqttClientConfig clientConfig =
                 new MqttClientConfig(MqttVersion.MQTT_5_0, MqttClientIdentifierImpl.of("test"),
                         MqttClientTransportConfigImpl.DEFAULT, MqttClientExecutorConfigImpl.DEFAULT, advancedConfig,
-                        MqttClientConfig.ConnectDefaults.of(null, null, null), ImmutableList.of(), ImmutableList.of(), ImmutableList.of());
+                        MqttClientConfig.ConnectDefaults.of(null, null, null), ImmutableList.of(), ImmutableList.of());
 
         channel = new EmbeddedChannel();
         channel.pipeline().addLast(new MqttDecoder(decoders, clientConfig, connect)).addLast(disconnectHandler);
diff --git a/gradle.properties b/gradle.properties
deleted file mode 100644
index 5a0556f..0000000
--- a/gradle.properties
+++ /dev/null
@@ -1,38 +0,0 @@
-version=1.2.1
-prevVersion=1.2.0
-#
-# main dependencies
-#
-rxjava.version=2.2.19
-reactive-streams.version=1.0.3
-netty.version=4.1.48.Final
-jctools.version=2.1.2
-annotations.version=16.0.3
-dagger.version=2.27
-slf4j.version=1.7.30
-reactor.version=3.3.4.RELEASE
-reactor-adapter.version=3.3.3.RELEASE
-#
-# test dependencies
-#
-junit-jupiter.version=5.5.1
-equalsverifier.version=3.1.7
-mockito.version=2.18.3
-guava.version=24.1-jre
-bouncycastle.version=1.59
-paho.version=1.2.0
-#
-# plugins
-#
-plugin.shadow.version=5.2.0
-plugin.bnd.version=5.0.1
-plugin.license.version=0.15.0
-plugin.bintray.version=1.8.5
-plugin.github-release.version=2.2.12
-plugin.utf8.version=0.1.0
-plugin.metadata.version=0.1.2
-plugin.javadoc-links.version=0.1.0
-#
-# options
-#
-org.gradle.caching=true
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
deleted file mode 100644
index e708b1c..0000000
Binary files a/gradle/wrapper/gradle-wrapper.jar and /dev/null differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
deleted file mode 100644
index be52383..0000000
--- a/gradle/wrapper/gradle-wrapper.properties
+++ /dev/null
@@ -1,5 +0,0 @@
-distributionBase=GRADLE_USER_HOME
-distributionPath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-6.7-bin.zip
-zipStoreBase=GRADLE_USER_HOME
-zipStorePath=wrapper/dists
diff --git a/gradlew b/gradlew
deleted file mode 100755
index 4f906e0..0000000
--- a/gradlew
+++ /dev/null
@@ -1,185 +0,0 @@
-#!/usr/bin/env sh
-
-#
-# Copyright 2015 the original author or authors.
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#      https://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-#
-
-##############################################################################
-##
-##  Gradle start up script for UN*X
-##
-##############################################################################
-
-# Attempt to set APP_HOME
-# Resolve links: $0 may be a link
-PRG="$0"
-# Need this for relative symlinks.
-while [ -h "$PRG" ] ; do
-    ls=`ls -ld "$PRG"`
-    link=`expr "$ls" : '.*-> \(.*\)$'`
-    if expr "$link" : '/.*' > /dev/null; then
-        PRG="$link"
-    else
-        PRG=`dirname "$PRG"`"/$link"
-    fi
-done
-SAVED="`pwd`"
-cd "`dirname \"$PRG\"`/" >/dev/null
-APP_HOME="`pwd -P`"
-cd "$SAVED" >/dev/null
-
-APP_NAME="Gradle"
-APP_BASE_NAME=`basename "$0"`
-
-# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
-DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'
-
-# Use the maximum available, or set MAX_FD != -1 to use that value.
-MAX_FD="maximum"
-
-warn () {
-    echo "$*"
-}
-
-die () {
-    echo
-    echo "$*"
-    echo
-    exit 1
-}
-
-# OS specific support (must be 'true' or 'false').
-cygwin=false
-msys=false
-darwin=false
-nonstop=false
-case "`uname`" in
-  CYGWIN* )
-    cygwin=true
-    ;;
-  Darwin* )
-    darwin=true
-    ;;
-  MINGW* )
-    msys=true
-    ;;
-  NONSTOP* )
-    nonstop=true
-    ;;
-esac
-
-CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
-
-
-# Determine the Java command to use to start the JVM.
-if [ -n "$JAVA_HOME" ] ; then
-    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
-        # IBM's JDK on AIX uses strange locations for the executables
-        JAVACMD="$JAVA_HOME/jre/sh/java"
-    else
-        JAVACMD="$JAVA_HOME/bin/java"
-    fi
-    if [ ! -x "$JAVACMD" ] ; then
-        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
-
-Please set the JAVA_HOME variable in your environment to match the
-location of your Java installation."
-    fi
-else
-    JAVACMD="java"
-    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
-
-Please set the JAVA_HOME variable in your environment to match the
-location of your Java installation."
-fi
-
-# Increase the maximum file descriptors if we can.
-if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then
-    MAX_FD_LIMIT=`ulimit -H -n`
-    if [ $? -eq 0 ] ; then
-        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
-            MAX_FD="$MAX_FD_LIMIT"
-        fi
-        ulimit -n $MAX_FD
-        if [ $? -ne 0 ] ; then
-            warn "Could not set maximum file descriptor limit: $MAX_FD"
-        fi
-    else
-        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
-    fi
-fi
-
-# For Darwin, add options to specify how the application appears in the dock
-if $darwin; then
-    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
-fi
-
-# For Cygwin or MSYS, switch paths to Windows format before running java
-if [ "$cygwin" = "true" -o "$msys" = "true" ] ; then
-    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
-    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
-
-    JAVACMD=`cygpath --unix "$JAVACMD"`
-
-    # We build the pattern for arguments to be converted via cygpath
-    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
-    SEP=""
-    for dir in $ROOTDIRSRAW ; do
-        ROOTDIRS="$ROOTDIRS$SEP$dir"
-        SEP="|"
-    done
-    OURCYGPATTERN="(^($ROOTDIRS))"
-    # Add a user-defined pattern to the cygpath arguments
-    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
-        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
-    fi
-    # Now convert the arguments - kludge to limit ourselves to /bin/sh
-    i=0
-    for arg in "$@" ; do
-        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
-        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option
-
-        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
-            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
-        else
-            eval `echo args$i`="\"$arg\""
-        fi
-        i=`expr $i + 1`
-    done
-    case $i in
-        0) set -- ;;
-        1) set -- "$args0" ;;
-        2) set -- "$args0" "$args1" ;;
-        3) set -- "$args0" "$args1" "$args2" ;;
-        4) set -- "$args0" "$args1" "$args2" "$args3" ;;
-        5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
-        6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
-        7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
-        8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
-        9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
-    esac
-fi
-
-# Escape application args
-save () {
-    for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
-    echo " "
-}
-APP_ARGS=`save "$@"`
-
-# Collect all arguments for the java command, following the shell quoting and substitution rules
-eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "\"-Dorg.gradle.appname=$APP_BASE_NAME\"" -classpath "\"$CLASSPATH\"" org.gradle.wrapper.GradleWrapperMain "$APP_ARGS"
-
-exec "$JAVACMD" "$@"
diff --git a/gradlew.bat b/gradlew.bat
deleted file mode 100644
index ac1b06f..0000000
--- a/gradlew.bat
+++ /dev/null
@@ -1,89 +0,0 @@
-@rem
-@rem Copyright 2015 the original author or authors.
-@rem
-@rem Licensed under the Apache License, Version 2.0 (the "License");
-@rem you may not use this file except in compliance with the License.
-@rem You may obtain a copy of the License at
-@rem
-@rem      https://www.apache.org/licenses/LICENSE-2.0
-@rem
-@rem Unless required by applicable law or agreed to in writing, software
-@rem distributed under the License is distributed on an "AS IS" BASIS,
-@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-@rem See the License for the specific language governing permissions and
-@rem limitations under the License.
-@rem
-
-@if "%DEBUG%" == "" @echo off
-@rem ##########################################################################
-@rem
-@rem  Gradle startup script for Windows
-@rem
-@rem ##########################################################################
-
-@rem Set local scope for the variables with windows NT shell
-if "%OS%"=="Windows_NT" setlocal
-
-set DIRNAME=%~dp0
-if "%DIRNAME%" == "" set DIRNAME=.
-set APP_BASE_NAME=%~n0
-set APP_HOME=%DIRNAME%
-
-@rem Resolve any "." and ".." in APP_HOME to make it shorter.
-for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi
-
-@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
-set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"
-
-@rem Find java.exe
-if defined JAVA_HOME goto findJavaFromJavaHome
-
-set JAVA_EXE=java.exe
-%JAVA_EXE% -version >NUL 2>&1
-if "%ERRORLEVEL%" == "0" goto execute
-
-echo.
-echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
-echo.
-echo Please set the JAVA_HOME variable in your environment to match the
-echo location of your Java installation.
-
-goto fail
-
-:findJavaFromJavaHome
-set JAVA_HOME=%JAVA_HOME:"=%
-set JAVA_EXE=%JAVA_HOME%/bin/java.exe
-
-if exist "%JAVA_EXE%" goto execute
-
-echo.
-echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
-echo.
-echo Please set the JAVA_HOME variable in your environment to match the
-echo location of your Java installation.
-
-goto fail
-
-:execute
-@rem Setup the command line
-
-set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
-
-
-@rem Execute Gradle
-"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %*
-
-:end
-@rem End local scope for the variables with windows NT shell
-if "%ERRORLEVEL%"=="0" goto mainEnd
-
-:fail
-rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
-rem the _cmd.exe /c_ return code!
-if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
-exit /b 1
-
-:mainEnd
-if "%OS%"=="Windows_NT" endlocal
-
-:omega
diff --git a/hivemq-extension-sdk b/hivemq-extension-sdk
index 58521ab..62f3273 160000
--- a/hivemq-extension-sdk
+++ b/hivemq-extension-sdk
@@ -1 +1 @@
-Subproject commit 58521ab4a2b7de8d611297078bdd1873d9a8c4b5
+Subproject commit 62f3273da492960871d5d479b581c4dd2ba87fd2
diff --git a/test-app/.gitattributes b/test-app/.gitattributes
deleted file mode 100644
index 00a51af..0000000
--- a/test-app/.gitattributes
+++ /dev/null
@@ -1,6 +0,0 @@
-#
-# https://help.github.com/articles/dealing-with-line-endings/
-#
-# These are explicitly windows files and should use crlf
-*.bat           text eol=crlf
-
diff --git a/test-app/.gitignore b/test-app/.gitignore
deleted file mode 100644
index 1b6985c..0000000
--- a/test-app/.gitignore
+++ /dev/null
@@ -1,5 +0,0 @@
-# Ignore Gradle project-specific cache directory
-.gradle
-
-# Ignore Gradle build output directory
-build
diff --git a/test-app/build.gradle.kts b/test-app/build.gradle.kts
deleted file mode 100644
index 5d0c866..0000000
--- a/test-app/build.gradle.kts
+++ /dev/null
@@ -1,45 +0,0 @@
-import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
-
-
-plugins {
-    id("org.jetbrains.kotlin.jvm") version "1.4.32"
-
-    application
-    distribution
-}
-
-repositories {
-    jcenter()
-}
-
-dependencies {
-    implementation(platform("org.jetbrains.kotlin:kotlin-bom"))
-    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
-
-
-    implementation("com.github.ajalt.clikt:clikt:3.1.0")
-    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.3")
-    implementation(project(":client"))
-
-    testImplementation("org.jetbrains.kotlin:kotlin-test")
-    testImplementation("org.jetbrains.kotlin:kotlin-test-junit")
-}
-
-application {
-    mainClass.set("test.app.AppKt")
-}
-
-
-tasks.withType<org.jetbrains.kotlin.gradle.tasks.KotlinCompile>().configureEach {
-    kotlinOptions {
-        jvmTarget = "11"
-    }
-}
-val compileKotlin: KotlinCompile by tasks
-compileKotlin.kotlinOptions {
-    jvmTarget = "1.8"
-}
-val compileTestKotlin: KotlinCompile by tasks
-compileTestKotlin.kotlinOptions {
-    jvmTarget = "1.8"
-}
\ No newline at end of file
diff --git a/test-app/gradle/wrapper/gradle-wrapper.jar b/test-app/gradle/wrapper/gradle-wrapper.jar
deleted file mode 100644
index e708b1c..0000000
Binary files a/test-app/gradle/wrapper/gradle-wrapper.jar and /dev/null differ
diff --git a/test-app/gradle/wrapper/gradle-wrapper.properties b/test-app/gradle/wrapper/gradle-wrapper.properties
deleted file mode 100644
index be52383..0000000
--- a/test-app/gradle/wrapper/gradle-wrapper.properties
+++ /dev/null
@@ -1,5 +0,0 @@
-distributionBase=GRADLE_USER_HOME
-distributionPath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-6.7-bin.zip
-zipStoreBase=GRADLE_USER_HOME
-zipStorePath=wrapper/dists
diff --git a/test-app/src/main/kotlin/test/app/App.kt b/test-app/src/main/kotlin/test/app/App.kt
deleted file mode 100644
index fb54aec..0000000
--- a/test-app/src/main/kotlin/test/app/App.kt
+++ /dev/null
@@ -1,16 +0,0 @@
-/*
- * This Kotlin source file was generated by the Gradle 'init' task.
- */
-package test.app
-
-import com.github.ajalt.clikt.core.CliktCommand
-import com.github.ajalt.clikt.core.subcommands
-import test.app.commands.*
-
-class Cli : CliktCommand() {
-    override fun run() {
-    }
-}
-
-fun main(args: Array<String>) =
-    Cli().subcommands(Publish(), Subscribe(), Unsubscribe(), Synthetic(), Periodic(), Analyze()).main(args)
diff --git a/test-app/src/main/kotlin/test/app/commands/Analyze.kt b/test-app/src/main/kotlin/test/app/commands/Analyze.kt
deleted file mode 100644
index be28abe..0000000
--- a/test-app/src/main/kotlin/test/app/commands/Analyze.kt
+++ /dev/null
@@ -1,64 +0,0 @@
-package test.app.commands
-
-import com.github.ajalt.clikt.core.CliktCommand
-import com.github.ajalt.clikt.parameters.arguments.argument
-import com.github.ajalt.clikt.parameters.options.default
-import com.github.ajalt.clikt.parameters.options.option
-import com.github.ajalt.clikt.parameters.types.int
-import com.hivemq.client.mqtt.datatypes.MqttQos
-import com.hivemq.client.mqtt.mqtt5.Mqtt5Client
-import kotlinx.coroutines.*
-import kotlinx.coroutines.channels.Channel
-import java.time.Duration
-import java.time.LocalDateTime
-import java.util.*
-
-class Analyze :
-    CliktCommand(printHelpOnEmptyArgs = true, help = "Capture messages from a topic and analyze the results") {
-    private val topic by argument()
-    private val brokerAddress by option("-b", "--broker-address", help = "MQTT Broker address").default("127.0.0.1")
-    private val numMessages by option("-n", "--num-messages", help = "Number of messages to capture").int().default(100)
-    private val qos by option("-q", "--qos", help = "Message qos").int().default(0)
-    private val discardStart by option("--discard-start", help = "Number of messages to discard in the start of the message flow").int().default(10)
-    private val discardEnd by option("--discard-end", help = "Number of messages to discard in the end of the message flow").int().default(10)
-    override fun run() = runBlocking {
-        val receiveChannel = Channel<Pair<LocalDateTime, LocalDateTime>>()
-
-        val subscriber = Mqtt5Client.builder()
-            .identifier(UUID.randomUUID().toString())
-            .serverHost(brokerAddress)
-            .buildAsync()
-
-        subscriber.connect().whenComplete { _, error ->
-            if (error != null) echo("Failed to connect to broker...")
-            subscriber.subscribeWith()
-                .topicFilter("$topic/#")
-                .qos(MqttQos.fromCode(qos) ?: MqttQos.AT_MOST_ONCE)
-                .callback {
-                    GlobalScope.launch {
-                        receiveChannel.send(Pair(LocalDateTime.parse(String(it.payloadAsBytes)), LocalDateTime.now()))
-                    }
-                }
-                .send()
-        }
-
-        val received = mutableListOf<Pair<LocalDateTime, LocalDateTime>>()
-
-        repeat(numMessages) {
-            echo("Received ${it + 1} of $numMessages messages")
-            received.add(receiveChannel.receive())
-        }
-
-        val delays = received.drop(discardStart).dropLast(discardEnd).map { Duration.between(it.first, it.second) }
-        val sumDelay = delays.fold(Duration.ZERO) { acc, delay -> acc + delay }
-        val avgDelay = sumDelay.dividedBy(delays.size.toLong())
-        val maxDelay = delays.maxByOrNull { it }
-
-        echo("\nResults:")
-        echo("Analyzed ${delays.size} number of messages.")
-        echo("Total delay for all messages combined: $sumDelay.")
-        echo("Average delay per message: $avgDelay.")
-        echo("Longest delay: $maxDelay.")
-        echo("\n")
-    }
-}
\ No newline at end of file
diff --git a/test-app/src/main/kotlin/test/app/commands/Periodic.kt b/test-app/src/main/kotlin/test/app/commands/Periodic.kt
deleted file mode 100644
index 5b33d0b..0000000
--- a/test-app/src/main/kotlin/test/app/commands/Periodic.kt
+++ /dev/null
@@ -1,53 +0,0 @@
-package test.app.commands
-
-import com.github.ajalt.clikt.core.CliktCommand
-import com.github.ajalt.clikt.parameters.arguments.argument
-import com.github.ajalt.clikt.parameters.options.*
-import com.github.ajalt.clikt.parameters.types.int
-import com.hivemq.client.extensions.PriorityClass
-import com.hivemq.client.extensions.TopicPriority
-import com.hivemq.client.mqtt.datatypes.MqttQos
-import com.hivemq.client.mqtt.datatypes.MqttTopicFilter
-import com.hivemq.client.mqtt.mqtt5.Mqtt5Client
-import kotlinx.coroutines.delay
-import kotlinx.coroutines.runBlocking
-import java.time.LocalDateTime
-import java.util.*
-
-class Periodic: CliktCommand(printHelpOnEmptyArgs = true, help = "Publish messages periodically") {
-
-    private val brokerAddress by option("-b", "--broker-address", help = "MQTT Broker address").default("127.0.0.1")
-    private val topic by option("-t", "--topic", help = "The topic to publish to").default("")
-    private val qos by option("-q", "--qos", help = "Message qos").int().default(0)
-    private val topicPriorities by option("-p", "--topic-priority").pair().multiple()
-    private val interval by option("-i", "--interval").int().default(1000)
-    private val numMessages by option("-n", "--num-messages").int().default(1000)
-
-    override fun run(): Unit = runBlocking {
-        val client = Mqtt5Client.builder()
-            .identifier(UUID.randomUUID().toString())
-            .serverHost(brokerAddress).apply {
-                topicPriorities.forEach {
-                    addTopicPriority(
-                        TopicPriority(
-                            MqttTopicFilter.of(it.first),
-                            PriorityClass.valueOf(it.second.capitalize())
-                        )
-                    )
-                }
-            }.buildBlocking()
-
-        client.connect()
-        repeat(numMessages){
-            client.publishWith()
-                .topic(topic)
-                .payload(LocalDateTime.now().toString().toByteArray())
-                .qos(MqttQos.fromCode(qos) ?: MqttQos.AT_MOST_ONCE)
-                .send()
-            echo("Sent ${it+1} of $numMessages messages")
-            delay(interval.toLong())
-        }
-
-        client.disconnect()
-    }
-}
\ No newline at end of file
diff --git a/test-app/src/main/kotlin/test/app/commands/Publish.kt b/test-app/src/main/kotlin/test/app/commands/Publish.kt
deleted file mode 100644
index f36241e..0000000
--- a/test-app/src/main/kotlin/test/app/commands/Publish.kt
+++ /dev/null
@@ -1,52 +0,0 @@
-package test.app.commands
-
-import com.github.ajalt.clikt.core.CliktCommand
-import com.github.ajalt.clikt.parameters.arguments.argument
-import com.github.ajalt.clikt.parameters.options.*
-import com.github.ajalt.clikt.parameters.types.int
-import com.hivemq.client.extensions.PriorityClass
-import com.hivemq.client.extensions.TopicPriority
-import com.hivemq.client.mqtt.datatypes.MqttQos
-import com.hivemq.client.mqtt.datatypes.MqttTopicFilter
-import com.hivemq.client.mqtt.mqtt5.Mqtt5Client
-import java.util.*
-
-class Publish : CliktCommand(printHelpOnEmptyArgs = true, help = "Publish messages to MQTT") {
-
-    private val message by argument()
-    private val clientId by option("-c", "--client-id", help = "Client identifier").default(
-        UUID.randomUUID().toString()
-    )
-    private val brokerAddress by option("-b", "--broker-address", help = "MQTT Broker address").default("127.0.0.1")
-    private val topic by option("-t", "--topic", help = "The topic to publish to").default("")
-    private val qos by option("-q", "--qos", help = "Message qos").int().default(0)
-    private val retain by option("-r", "--retain", help = "Wether to retain the message or not").flag(
-        "-R",
-        "--no-retain",
-        default = false
-    )
-    private val topicPriorities by option("-p", "--topic-priority").pair().multiple()
-
-    override fun run() {
-        val client = Mqtt5Client.builder()
-            .identifier(clientId)
-            .serverHost(brokerAddress).apply {
-                topicPriorities.forEach {
-                    addTopicPriority(
-                        TopicPriority(
-                            MqttTopicFilter.of(it.first),
-                            PriorityClass.valueOf(it.second.capitalize())
-                        )
-                    )
-                }
-            }.buildBlocking()
-
-        client.connect()
-        client.publishWith()
-            .topic(topic)
-            .payload(message.toByteArray())
-            .retain(retain)
-            .qos(MqttQos.fromCode(qos) ?: MqttQos.AT_MOST_ONCE).send()
-        client.disconnect()
-    }
-}
\ No newline at end of file
diff --git a/test-app/src/main/kotlin/test/app/commands/Subscribe.kt b/test-app/src/main/kotlin/test/app/commands/Subscribe.kt
deleted file mode 100644
index b2dab79..0000000
--- a/test-app/src/main/kotlin/test/app/commands/Subscribe.kt
+++ /dev/null
@@ -1,33 +0,0 @@
-package test.app.commands
-
-import com.github.ajalt.clikt.core.CliktCommand
-import com.github.ajalt.clikt.parameters.arguments.argument
-import com.github.ajalt.clikt.parameters.arguments.default
-import com.github.ajalt.clikt.parameters.options.default
-import com.github.ajalt.clikt.parameters.options.option
-import com.github.ajalt.clikt.parameters.types.int
-import com.hivemq.client.mqtt.datatypes.MqttQos
-import com.hivemq.client.mqtt.mqtt3.Mqtt3Client
-import com.hivemq.client.mqtt.mqtt5.Mqtt5Client
-import java.util.*
-
-class Subscribe : CliktCommand(printHelpOnEmptyArgs = true, help = "Subscribe to MQTT topic filter") {
-    private val topicFilter by argument()
-    private val clientId by option ("-c", "--client-id", help = "Client identifier").default(UUID.randomUUID().toString())
-    private val brokerAddress by option("-b", "--broker-address", help = "MQTT Broker address").default("127.0.0.1")
-    private val qos by option("-q", "--qos", help = "Message qos").int().default(0)
-
-    override fun run() {
-        val client = Mqtt5Client.builder()
-            .identifier(clientId)
-            .serverHost(brokerAddress)
-            .buildAsync()
-
-        client.connect()
-        client.subscribeWith()
-            .topicFilter(topicFilter)
-            .qos(MqttQos.fromCode(qos) ?: MqttQos.AT_MOST_ONCE)
-            .callback {println("${it.topic}: ${String(it.payloadAsBytes)}")}
-            .send()
-    }
-}
\ No newline at end of file
diff --git a/test-app/src/main/kotlin/test/app/commands/Synthetic.kt b/test-app/src/main/kotlin/test/app/commands/Synthetic.kt
deleted file mode 100644
index 69812e2..0000000
--- a/test-app/src/main/kotlin/test/app/commands/Synthetic.kt
+++ /dev/null
@@ -1,111 +0,0 @@
-package test.app.commands
-
-import com.github.ajalt.clikt.core.CliktCommand
-import com.github.ajalt.clikt.parameters.options.default
-import com.github.ajalt.clikt.parameters.options.multiple
-import com.github.ajalt.clikt.parameters.options.option
-import com.github.ajalt.clikt.parameters.types.int
-import com.hivemq.client.mqtt.MqttGlobalPublishFilter
-import com.hivemq.client.mqtt.datatypes.MqttQos
-import com.hivemq.client.mqtt.mqtt5.Mqtt5Client
-import kotlinx.coroutines.Dispatchers
-import kotlinx.coroutines.delay
-import kotlinx.coroutines.launch
-import kotlinx.coroutines.runBlocking
-import java.time.Duration
-import java.time.LocalDateTime
-import java.util.*
-import java.util.concurrent.ConcurrentHashMap
-import java.util.concurrent.TimeUnit
-
-
-class Synthetic : CliktCommand(printHelpOnEmptyArgs = true, help = "Put a syntethic load on the broker") {
-    private val brokerAddress by option("-b", "--broker-address", help = "MQTT Broker address").default("127.0.0.1")
-    private val topic: List<String> by option(
-        "-t",
-        "--topic",
-        help = "The topic to publish to. Can be specified multiple times"
-    ).multiple()
-    private val numMessages by option("-n", "--num-messages", help = "Number of messages to send").int().default(100)
-    private val numPublishersPerTopic by option("-p", "--num-publishers-per-topic", help = "Number of clients to build per topic").int().default(10)
-    private val timeout by option("--timeout", help = "seconds to wait for message receive").int().default(10)
-    private val qos by option("-q", "--qos", help = "Message qos").int().default(0)
-
-    override fun run() = runBlocking {
-        val received =
-            ConcurrentHashMap(topic.associateBy({ it }, { mutableListOf<Pair<LocalDateTime, LocalDateTime>>() }))
-
-        val subscriber = Mqtt5Client.builder()
-            .identifier(UUID.randomUUID().toString())
-            .serverHost(brokerAddress)
-            .buildAsync()
-
-        subscriber.connect()
-
-
-
-        echo("Setting up subscriptions")
-        // Setup subscriptions
-        topic.forEach { topic ->
-            subscriber.subscribeWith()
-                .topicFilter("$topic/#")
-                .qos(MqttQos.fromCode(qos) ?: MqttQos.AT_MOST_ONCE)
-                .callback{
-                    received[topic]?.add(Pair(LocalDateTime.parse(String(it.payloadAsBytes)), LocalDateTime.now()))
-                }
-                .send()
-        }
-
-
-
-        echo("Connecting publishers")
-        val publishers = topic.associateBy({ it }) {
-            (1..numPublishersPerTopic).map {
-                val publisher = Mqtt5Client.builder()
-                    .identifier(UUID.randomUUID().toString())
-                    .serverHost(brokerAddress)
-                    .buildBlocking()
-
-                publisher.connect()
-                publisher
-            }
-        }
-
-        topic.map { topic ->
-                launch(Dispatchers.Default) {
-                    publishers[topic]!!.forEach{ publisher ->
-                        repeat(numMessages) {
-                            publisher.publishWith()
-                                .topic(topic)
-                                .payload("${LocalDateTime.now()}".toByteArray())
-                                .qos(MqttQos.fromCode(qos) ?: MqttQos.AT_MOST_ONCE)
-                                .send()
-                        }
-                        publisher.disconnect()
-                    }
-                }
-        }
-
-        echo("Waiting for messages to be received")
-        delay(timeout.toLong() * 1000)
-
-        // Analyze the results
-        echo("Analyzing...\n")
-        received.forEach { (topic, messages) ->
-            echo("Results for $topic:")
-            val sumDelay = messages.fold(Duration.ZERO) { acc, message ->
-                acc + Duration.between(message.first, message.second)
-            }
-            val avgDelay = sumDelay.dividedBy(messages.size.toLong())
-            val maxDelay = messages.map { message -> Duration.between(message.first, message.second)}.maxOrNull()
-            val numDroppedMessages = numMessages * numPublishersPerTopic - messages.size
-            echo("Total number of messages received ${messages.size}")
-            echo("Total delay for all messages combined: $sumDelay.")
-            echo("Average delay per message: $avgDelay.")
-            echo("Longest delay: $maxDelay.")
-            echo("Number of dropped messages $numDroppedMessages")
-
-            echo("\n")
-        }
-    }
-}
diff --git a/test-app/src/main/kotlin/test/app/commands/Unsubscribe.kt b/test-app/src/main/kotlin/test/app/commands/Unsubscribe.kt
deleted file mode 100644
index c8c199a..0000000
--- a/test-app/src/main/kotlin/test/app/commands/Unsubscribe.kt
+++ /dev/null
@@ -1,31 +0,0 @@
-package test.app.commands
-
-import com.github.ajalt.clikt.core.CliktCommand
-import com.github.ajalt.clikt.parameters.arguments.argument
-import com.github.ajalt.clikt.parameters.arguments.default
-import com.github.ajalt.clikt.parameters.options.default
-import com.github.ajalt.clikt.parameters.options.option
-import com.github.ajalt.clikt.parameters.options.required
-import com.github.ajalt.clikt.parameters.types.int
-import com.hivemq.client.mqtt.datatypes.MqttQos
-import com.hivemq.client.mqtt.mqtt3.Mqtt3Client
-import com.hivemq.client.mqtt.mqtt5.Mqtt5Client
-import java.util.*
-
-class Unsubscribe : CliktCommand(printHelpOnEmptyArgs = true, help = "Subscribe to MQTT topic filter") {
-    private val topicFilter by argument()
-    private val clientId by option ("-c", "--client-id", help = "Client identifier").required()
-    private val brokerAddress by option("-b", "--broker-address", help = "MQTT Broker address").default("127.0.0.1")
-
-    override fun run() {
-        val client = Mqtt5Client.builder()
-            .identifier(clientId)
-            .serverHost(brokerAddress)
-            .buildAsync()
-
-        client.connect()
-        client.unsubscribeWith()
-            .topicFilter(topicFilter)
-            .send()
-    }
-}
\ No newline at end of file
